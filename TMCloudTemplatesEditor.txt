// Controller code

// Templates controller
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using Kendo.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using NLog;
using Resources.Utilities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Text;
using System.Web;
using System.Web.Mvc;
using TMCloud.App_Data;
using TMCloud.Classes;
using TMCloud.Helpers;
using TMCloud.Models;
using TMCloud.Models.Dockets;
using TMCloud.Models.Documents;
using TMCloud.Models.Ecommerce;
using TMCloud.Models.LookupTables;
using TMCloud.Models.Membership;
using TMCloud.Models.Modules;
using TMCloud.Models.Mqx;
using TMCloud.Models.Templates;
using TMCloud.Models.TrademarkProfile;
using TMCloud.Mqx;
using TMCloud.Mqx.Core;
using TMCloud.ViewModels;
using TMCloud.ViewModels.Templates;

namespace TMCloud.Controllers.Templates
{
    public class TemplatesController : BaseController
    {
        static Logger _logger = LogManager.GetCurrentClassLogger();

        IModelState _modelState;

        private readonly IDocketService _docketService;
        private readonly IDocumentService _documentService;
        Models.TrademarkClearances.ITrademarkClearanceService _trademarkClearanceService;
        ITemplatesService _templateService;
        Models.Trademarks.ITrademarkService _trademarkService;
        ITrademarkProfileService _trademarkProfileService;
        Models.AdditionalIPs.IAdditionalIPService _additionalIpService;
        Models.AddressBook.IAddressBookService _addressBookService;
        Models.Common.ICommonService _commonService;
        Models.Settings.IScheduledEmailsService _scheduledEmailsService;
        Models.Disputes.IDisputeService _disputeService;
        Models.Imports.IImportService _importService;
        Models.DomainNames.IDomainNameService _domainNameService;
        Models.ManagersUsersAccessRights.ManagersUsersAccessRightsService _managerUserAccessRightsService;
        Models.Membership.IAccountMembershipService _accountMembershipService;
        Areas.SuperAdmin.Models.AdminSettings.IAdminSettingsService _settingsService;
        Models.ManagersUsersAccessRights.ManagersUsersAccessRightsService _managersUsersAccessRightsService;
        Models.Assignments.IAssignmentService _assignmentService;
        Models.Patents.IPatentService _patentService;

        IECommerceService _eCommerceService;
        ILookupTableService _lookupTableService;

        public TemplatesController()
        {
            IUserAuthentication _userAuthentication = new UserAuthentication();
            // TODO: need a resource for the service
            _modelState = new ModelStateWrapper(ModelState, Resources.Modules.AddressBook.CompanyDetails.ResourceManager);

            _docketService = new DocketService(_userAuthentication, _modelState);
            _documentService = new DocumentService(_userAuthentication, _modelState);
            _trademarkClearanceService = new Models.TrademarkClearances.TrademarkClearanceService(_userAuthentication, _modelState);
            _lookupTableService = new LookupTableService(_userAuthentication);
            _templateService = new TemplatesService(_userAuthentication, _modelState);
            _trademarkService = new Models.Trademarks.TrademarkService(_userAuthentication, _modelState);
            _trademarkProfileService = new TrademarkProfileService(_userAuthentication, _modelState);
            _additionalIpService = new Models.AdditionalIPs.AdditionalIPService(_userAuthentication, _modelState);
            _addressBookService = new Models.AddressBook.AddressBookService(_userAuthentication, _modelState);
            _commonService = new Models.Common.CommonService(_userAuthentication, _modelState);
            _scheduledEmailsService = new Models.Settings.ScheduledEmailsService(_userAuthentication, _modelState);
            _disputeService = new Models.Disputes.DisputeService(_userAuthentication, _modelState);
            _importService = new Models.Imports.ImportService(_userAuthentication, _modelState);
            _domainNameService = new Models.DomainNames.DomainNameService(_userAuthentication, _modelState);
            _eCommerceService = new ECommerceService(_userAuthentication, _modelState);
            _managerUserAccessRightsService = new Models.ManagersUsersAccessRights.ManagersUsersAccessRightsService(_userAuthentication, _modelState);
            _accountMembershipService = new Models.Membership.AccountMembershipService(_userAuthentication, _modelState);
            _settingsService = new Areas.SuperAdmin.Models.AdminSettings.AdminSettingsService(_userAuthentication, _modelState);
            _managersUsersAccessRightsService = new Models.ManagersUsersAccessRights.ManagersUsersAccessRightsService(_userAuthentication, _modelState);
            _assignmentService = new Models.Assignments.AssignmentService(_userAuthentication, _modelState);
            _patentService = new Models.Patents.PatentService(_userAuthentication, _modelState);
        }

        public ActionResult Search()
        {
            SearchViewModel viewModel = new SearchViewModel();

            //modules list
            LookupTable moduleTypesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.ModuleTypesTableTemplates, UserContext.GetActiveUserData().AccountID);
            viewModel.ModuleTypesList = LookupTableHelper.ToSingleSelect(moduleTypesLookupTable);

            return View("Search", viewModel);
        }

        public JsonResult GetCascadeTemplateSections(string moduleTypeIDString)
        {
            IQueryable<TemplateSection> templateSections = _templateService.GetTemplateSectionsByModuleTypeID(Guid.Parse(moduleTypeIDString));

            return Json(templateSections.Select(p => new { Value = p.ID, Text = p.Name }), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SearchSubmit(SearchViewModel viewModel)
        {
            AddSearchResultsFixedData();

            if (ModelState.IsValid)
            {
                //Session["FromDashboard"] = Globals.DEFAULT_NO;
                Models.Templates.SearchCriteria searchCriteria = ViewModelToSearch(viewModel);
                IQueryable<Template> query = _templateService.GetSearchRecords(searchCriteria);

                string strSearchCriteria = BuildSearchCriteriaString(searchCriteria);

                // Save search into User's history
                Guid SearchHistoryID = _templateService.SaveTemplateSearchHistory(searchCriteria, strSearchCriteria, UserContext.GetActiveUserData().UserID);

                // save the query for use by the grid when paging
                UserContext.LastTemplateQuery = query;

                ResultsViewModel resultsViewModel = new ResultsViewModel();
                int? pageSize = UserContext.GetActiveUserData().PageSize;
                resultsViewModel.PageSize = pageSize == null ? 10 : pageSize;
                //resultsViewModel.ColumnSettingsList = GetGridColumnSettings();
                resultsViewModel.SearchHistoryID = SearchHistoryID;
                resultsViewModel.SearchHistoryIDExport = SearchHistoryID;

                resultsViewModel.TotalRecords = query.Count().ToString();
                resultsViewModel.SearchCriteria = strSearchCriteria;
                return View("SearchResults", resultsViewModel);
            }

            // re-show view
            SearchViewModel searchViewModel = new SearchViewModel();

            return View("Search", searchViewModel);
        }

        private Models.Templates.SearchCriteria ViewModelToSearch(SearchViewModel viewModel)
        {
            Models.Templates.SearchCriteria searchCriteria = new Models.Templates.SearchCriteria();
            searchCriteria.CreatedBy = viewModel.CreatedBy;
            searchCriteria.Description = viewModel.Description;
            searchCriteria.Notes = viewModel.Notes;
            searchCriteria.TemplateID = viewModel.TemplateID;
            searchCriteria.Title = viewModel.Title;
            searchCriteria.Jurisdictions = Globals.ViewModelToSearchMultiSelect(viewModel.Jurisdictions);
            searchCriteria.TrademarkStatusCodes = Globals.ViewModelToSearchMultiSelect(viewModel.TrademarkStatusCodes);
            searchCriteria.TemplateTypes = Globals.ViewModelToSearchMultiSelect(viewModel.TemplateTypes);
            searchCriteria.DateFrom = viewModel.DateFrom;
            searchCriteria.DateTo = viewModel.DateTo;
            searchCriteria.ModuleTypeID = Guid.Parse(viewModel.ModuleName);
            //searchCriteria.TemplateSectionID = Guid.Parse(viewModel.SectionName);
            searchCriteria.AccountID = UserContext.GetActiveUserData().AccountID;

            return searchCriteria;
        }

        public void AddSearchResultsFixedData()
        {
            //modules list
            LookupTable moduleTypesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.ModuleTypesTable, UserContext.GetActiveUserData().AccountID);
            ViewData["moduleTypes"] = moduleTypesLookupTable;
            // jursidiction list
            LookupTable jurisdictionLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.CountryLawJurisdictionsTable, UserContext.GetActiveUserData().AccountID);
            jurisdictionLookupTable = Globals.PrependSelectOne(jurisdictionLookupTable);
            ViewData["jurisdictions"] = jurisdictionLookupTable;
            // tm status code list
            LookupTable tmStatusCodeLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.TrademarkStatusCodesTable, UserContext.GetActiveUserData().AccountID);
            ViewData["trademarkStatusCodes"] = tmStatusCodeLookupTable;
            // templates list
            LookupTable templateTypesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.TemplateTypesTable, UserContext.GetActiveUserData().AccountID);
            ViewData["templateTypes"] = templateTypesLookupTable;
        }

        public string BuildSearchCriteriaString(Models.Templates.SearchCriteria searchCriteria)
        {
            ViewableCriteriaBuilder viewableCriteria = new ViewableCriteriaBuilder();
            ViewableCriteriaBuilder viewableCriteriaSubstring = new ViewableCriteriaBuilder();

            if (searchCriteria.ModuleTypeID != null && searchCriteria.ModuleTypeID != Guid.Empty)
            {
                ModuleType moduleEntity = _commonService.GetModuleTypeByModuleTypeID(searchCriteria.ModuleTypeID.Value);
                viewableCriteria.Add(Resources.Templates.Search.ModuleLabel, moduleEntity.Name);
            }
            viewableCriteria.Add(Resources.Templates.Search.CreatedByLabel, searchCriteria.CreatedBy.Text);
            viewableCriteria.Add(Resources.Templates.Search.DescriptionLabel, searchCriteria.Description.Text);
            viewableCriteria.Add(Resources.Templates.Search.NotesLabel, searchCriteria.Notes.Text);
            viewableCriteria.Add(Resources.Templates.Search.TemplateIDLabel, searchCriteria.TemplateID.Text);
            viewableCriteria.Add(Resources.Templates.Search.TitleLabel, searchCriteria.Title.Text);

            if (searchCriteria.Jurisdictions.SelectedItems != null)
            {
                viewableCriteriaSubstring = new ViewableCriteriaBuilder();
                foreach (Guid selecteditem in searchCriteria.Jurisdictions.SelectedItems)
                {
                    CountryLaw countryLaw = _commonService.GetCountryLawByID(selecteditem);
                    viewableCriteriaSubstring.Add(countryLaw.Name);
                }
                viewableCriteria.Add(Resources.Templates.Search.JurisdictionLabel, viewableCriteriaSubstring.ToString());
            }

            if (searchCriteria.TrademarkStatusCodes.SelectedItems != null)
            {
                viewableCriteriaSubstring = new ViewableCriteriaBuilder();
                foreach (Guid selecteditem in searchCriteria.TrademarkStatusCodes.SelectedItems)
                {
                    TrademarkStatusCode tmStatusCode = _commonService.GetTrademarkStatusCodeByID(selecteditem);
                    viewableCriteriaSubstring.Add(tmStatusCode.Name);
                }
                viewableCriteria.Add(Resources.Templates.Search.TrademarkStatusLabel, viewableCriteriaSubstring.ToString());
            }

            if (searchCriteria.TemplateTypes.SelectedItems != null)
            {
                viewableCriteriaSubstring = new ViewableCriteriaBuilder();
                foreach (Guid selecteditem in searchCriteria.TemplateTypes.SelectedItems)
                {
                    TemplateType templateType = _templateService.GetTemplateTypesByID(selecteditem);
                    viewableCriteriaSubstring.Add(templateType.Name);
                }
                viewableCriteria.Add(Resources.Templates.Search.TemplateTypesLabel, viewableCriteriaSubstring.ToString());
            }

            viewableCriteria.Add(searchCriteria.DateFrom, Resources.Templates.Search.DateCreatedLabel, Resources.Templates.Search.FromLabel);
            viewableCriteria.Add(searchCriteria.DateTo, Resources.Templates.Search.DateCreatedLabel, Resources.Templates.Search.ToLabel);

            if (string.IsNullOrWhiteSpace(viewableCriteria.ToString()))
            {
                return Resources.Templates.Search.None;
            }

            return viewableCriteria.ToString();
        }

        [HttpPost]
        public ActionResult Search_Read([DataSourceRequest]DataSourceRequest request)
        {
            IQueryable<Template> query = UserContext.LastTemplateQuery;

            // sorting
            if (request.Sorts != null)
            {
                foreach (SortDescriptor sortDescriptor in request.Sorts)
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ModuleTypeID":
                            query = query.OrderBy(r => r.ModuleType.Name, sortDescriptor);
                            break;
                        case "TemplateSection":
                            query = query.OrderBy(r => r.TemplateSection.Name, sortDescriptor);
                            break;
                        case "Title":
                            query = query.OrderBy(r => r.Title, sortDescriptor);
                            break;
                        case "CreatedBy":
                            query = query.OrderBy(r => r.CreatedBy, sortDescriptor);
                            break;
                        case "Description":
                            query = query.OrderBy(r => r.Description, sortDescriptor);
                            break;
                        case "Notes":
                            query = query.OrderBy(r => r.Notes, sortDescriptor);
                            break;
                        case "TemplateID":
                        default:
                            query = query.OrderBy(r => r.TemplateID, sortDescriptor);
                            break;
                        case "JurisdictionID":
                            query = query.OrderBy(r => r.CountryLaw.Name, sortDescriptor);
                            break;
                        case "TrademarkStatusCodeID":
                            query = query.OrderBy(r => r.TrademarkStatusCode.Name, sortDescriptor);
                            break;
                        case "TemplateTypeID":
                            query = query.OrderBy(r => r.TemplateType.Name, sortDescriptor);
                            break;
                        case "DateCreated":
                            query = query.OrderBy(r => r.DateCreated, sortDescriptor);
                            break;
                    }
                }//end of foreach loop
            }
            else
            {
                query = query.OrderBy(r => r.Title);
            }//end of if (request.Sorts != null)

            // paging
            var total = query.Count();
            if (request.Page > 0)
            {
                query = query.Skip((request.Page - 1) * request.PageSize);
            }
            query = query.Take(request.PageSize);

            List<ResultsViewModel.Summary> summaries = new List<ResultsViewModel.Summary>();
            foreach (Template entity in query)
            {
                ResultsViewModel.Summary summary = new ResultsViewModel.Summary();
                summary.ID = entity.ID;

                if (entity.ModuleTypeID.HasValue && entity.ModuleTypeID != null && entity.ModuleTypeID != Guid.Empty)
                {
                    summary.ModuleTypeID = entity.ModuleTypeID.Value;
                }
                if (entity.SectionID.HasValue && entity.SectionID != null && entity.SectionID != Guid.Empty)
                {
                    summary.TemplateSectionID = entity.SectionID.Value;
                }
                if (entity.JurisdictionID.HasValue && entity.JurisdictionID != null && entity.JurisdictionID != Guid.Empty)
                {
                    summary.JurisdictionID = entity.JurisdictionID.Value;
                }
                if (entity.TrademarkStatusCodeID.HasValue && entity.TrademarkStatusCodeID != null && entity.TrademarkStatusCodeID != Guid.Empty)
                {
                    summary.TrademarkStatusCodeID = entity.TrademarkStatusCodeID.Value;
                }
                if (entity.TemplateTypeID.HasValue && entity.TemplateTypeID != null && entity.TemplateTypeID != Guid.Empty)
                {
                    summary.TemplateTypeID = entity.TemplateTypeID.Value;
                }

                summary.CreatedBy = entity.CreatedBy;
                summary.Description = entity.Description;
                summary.Notes = entity.Notes;
                summary.TemplateID = entity.TemplateID;
                summary.Title = entity.Title;

                if (entity.DateCreated != null)
                {
                    summary.DateCreated = entity.DateCreated;
                }
                summary.AccountID = entity.AccountID;
                if (entity.AccountID.HasValue && entity.AccountID != null && entity.AccountID != Guid.Empty)
                {
                    summary.AccountName = _commonService.GetAccountHolderCompanyByAccountID(entity.AccountID.Value).Name;
                }
                else if (entity.AccountID == null)
                {
                    summary.AccountName = Resources.Templates.Search.SuperadminLabel;
                }

                summaries.Add(summary);
            }

            // results
            var result = new DataSourceResult()
            {
                Data = summaries,
                Total = total
            };

            return Json(result);
        }

        public ActionResult Search_Update([DataSourceRequest] DataSourceRequest request, ResultsViewModel.Summary summary)
        {
            if (_templateService.UpdateTemplate(summary))
            {
                // success
            }

            List<ResultsViewModel.Summary> summaries = new List<ResultsViewModel.Summary>();
            summaries.Add(summary);

            var result = new DataSourceResult()
            {
                Data = summaries,
            };

            return Json(result);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteSelectedRecords(ResultsViewModel viewModel)
        {
            if (viewModel.SelectedDeleteRecordIDs != null && viewModel.SelectedDeleteRecordIDs != "")
            {
                //separate the IDs to delete, they are comma separated
                List<Guid> recordIDsToDelete = Globals.GetSelectedIDs(viewModel.SelectedDeleteRecordIDs);
                foreach (Guid recordID in recordIDsToDelete)
                {
                    _templateService.DeleteTemplateByID(recordID);
                }
            }
            //show the search results again
            AddSearchResultsFixedData();

            Models.Templates.SearchCriteria searchCriteria = _templateService.GetTemplateSearchHistoryByID(viewModel.SearchHistoryID.Value);
            IQueryable<Template> query = _templateService.GetSearchRecords(searchCriteria);

            string strSearchCriteria = BuildSearchCriteriaString(searchCriteria);

            // save the query for use by the grid when paging
            UserContext.LastTemplateQuery = query;
            int? pageSize = UserContext.GetActiveUserData().PageSize;
            viewModel.PageSize = pageSize == null ? 10 : pageSize;

            viewModel.TotalRecords = query.Count().ToString();
            viewModel.SearchCriteria = strSearchCriteria;
            return View("SearchResults", viewModel);
        }

        #region Handling of requests for new Templates
        string _actionPrefix = "";

        public ActionResult NewView(Guid ID, String NewRecord, String SuccessNotification)
        {
            _actionPrefix = "New";
            return View(ID, NewRecord, SuccessNotification);
        }

        public ActionResult NewEdit(Guid ID, String NewRecord, String SuccessNotification)
        {
            _actionPrefix = "New";
            return Edit(ID, NewRecord, SuccessNotification);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult NewUpdateSubmit(DetailsViewModel viewModel)
        {
            _actionPrefix = "New";
            return UpdateSubmit(viewModel);
        }

        //string GetViewLink(Guid templateID)
        //{
        //	string link = Url.Action(_actionPrefix + "View", new { ID = templateID });
        //	return link;
        //}

        //string GetEditLink(Guid templateID)
        //{
        //	string link = Url.Action(_actionPrefix + "Edit", new { ID = templateID });
        //	return link;
        //}
        #endregion

        #region Details
        public ActionResult View([Bind(Prefix = "ID")] Guid ID, [Bind(Prefix = "NewRecord")] String NewRecord, [Bind(Prefix = "SuccessNotification")] String SuccessNotification)
        {
            DetailsViewModel viewModel = LoadDetails(ID, NewRecord, true);
            viewModel.SuccessNotification = SuccessNotification != null ? SuccessNotification : string.Empty;
            viewModel.ActionPrefix = _actionPrefix;

            return View("Details", viewModel);
        }

        public ActionResult Edit([Bind(Prefix = "ID")] Guid ID, [Bind(Prefix = "NewRecord")] String NewRecord, [Bind(Prefix = "SuccessNotification")] String SuccessNotification)
        {
            DetailsViewModel viewModel = LoadDetails(ID, NewRecord, false);
            viewModel.SuccessNotification = SuccessNotification != null ? SuccessNotification : string.Empty;
            viewModel.ActionPrefix = _actionPrefix;

            return View("Details", viewModel);
        }

        public ActionResult New()
        {
            DetailsViewModel viewModel = LoadDetails(Guid.Empty, "Yes", false);
            viewModel.ActionPrefix = "New";

            return View("Details", viewModel);
        }

        public DetailsViewModel LoadDetails(Guid ID, String NewRecord, bool readOnly)
        {
            var viewModel = new DetailsViewModel();

            FixedData(viewModel);

            viewModel.ID = ID;
            ViewBag.ReadOnly = readOnly;

            if (NewRecord != null && NewRecord == "Yes")
            {
                ViewBag.NewRecord = true;
                viewModel.IsNew = true;
                viewModel.IsBeingCopied = false;

                viewModel.TemplateTypeID = Guid.Empty;
                viewModel.TrademarkStatusCodeID = Guid.Empty;
                viewModel.ModuleTypeID = Guid.Empty;
                viewModel.OwnerAccountID = Guid.Empty;
                viewModel.TemplateSectionID = Guid.Empty;
            }
            else
            {
                ViewBag.NewRecord = false;
                viewModel.IsNew = false;
                LoadTemplateRecord(viewModel);
            }
            return viewModel;
        }

        public void LoadTemplateRecord(DetailsViewModel viewModel)
        {
            Template entity = _templateService.GetTemplateByID(viewModel.ID);
            if (entity != null)
            {
                // Autocompletes
                viewModel.JurisdictionNames = GetJurisdictionNamesByTemplateID(viewModel.ID);
                List<Guid> JurisdictionIDs = GetJurisdictionIDs(viewModel.ID);
                if (JurisdictionIDs.Count > 0)
                {
                    viewModel.JurisdictionIDs = String.Join(",", JurisdictionIDs);
                }
                // Dropdowns
                viewModel.TrademarkStatusCodeID = entity.TrademarkStatusCodeID != null ? entity.TrademarkStatusCodeID.Value : Guid.Empty;
                viewModel.TemplateTypeID = entity.TemplateTypeID != null ? entity.TemplateTypeID.Value : Guid.Empty;
                viewModel.ModuleTypeID = entity.ModuleTypeID != null ? entity.ModuleTypeID.Value : Guid.Empty;
                viewModel.OwnerAccountID = entity.AccountID != null ? entity.AccountID.Value : Guid.Empty;
                viewModel.TemplateSectionID = entity.SectionID != null ? entity.SectionID.Value : Guid.Empty;

                // Text
                viewModel.TrademarkStatusCodeName = entity.TrademarkStatusCode != null ? entity.TrademarkStatusCode.Name : string.Empty;
                viewModel.TemplateTypeName = entity.TemplateType != null ? entity.TemplateType.Name : string.Empty;
                viewModel.TemplateEmailTypeName = Globals.TEMPLATE_TYPE_EMAIL;
                viewModel.ModuleTypeName = entity.ModuleType != null ? entity.ModuleType.Name : string.Empty;
                //viewModel.TemplateSectionName = entity.TemplateSection != null ? entity.TemplateSection.Name : string.Empty;

                viewModel.EmailBody = entity.EmailBody == null ? string.Empty : HttpUtility.HtmlDecode(entity.EmailBody);
                viewModel.EmailSubject = entity.EmailSubject == null ? string.Empty : HttpUtility.HtmlDecode(entity.EmailSubject);
                viewModel.EmailTo = entity.EmailTo;
                viewModel.EmailCc = entity.EmailCc;
                viewModel.EmailBcc = entity.EmailBcc;
                viewModel.CreatedBy = entity.CreatedBy;
                viewModel.Description = entity.Description;
                viewModel.Notes = entity.Notes;
                viewModel.Title = entity.Title;
                viewModel.DateCreated = entity.DateCreated;
                viewModel.TemplateID = entity.TemplateID;
                viewModel.DateCreatedText = entity.DateCreated.ToString(UserContext.GetActiveUserData().OutputDateFormat);

                // Booleans
                viewModel.IsBeingCopied = false;
            }
        }

        void FixedData(DetailsViewModel viewModel)
        {
            //modules list
            LookupTable moduleTypesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.ModuleTypesTableTemplates, UserContext.GetActiveUserData().AccountID);
            viewModel.ModuleTypesList = LookupTableHelper.ToSingleSelect(moduleTypesLookupTable);

            //trademark status list
            LookupTable tmStatusCodesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.TrademarkStatusCodesTable, UserContext.GetActiveUserData().AccountID);
            viewModel.TrademarkStatusCodeList = LookupTableHelper.ToSingleSelect(tmStatusCodesLookupTable);

            //jursidiction list
            //viewModel.JurisdictionDropDown = viewModel.JurisdictionIDs == null ?
            //            new MultiSelectViewModel(LookupTableName.CountryLawJurisdictionsTable)
            //            : new MultiSelectViewModel(LookupTableName.CountryLawJurisdictionsTable, viewModel.JurisdictionIDs);

            // tm status code list
            LookupTable templateTypesLookupTable = _lookupTableService.GetTableForAccount(LookupTableName.TemplateTypesTable, UserContext.GetActiveUserData().AccountID);
            viewModel.TemplatesList = LookupTableHelper.ToSingleSelect(templateTypesLookupTable);

        }

        public string GetJurisdictionNamesByTemplateID(Guid templateID)
        {
            //get the basis of filing ids from the TrademarksToBasisOfFilings table
            IQueryable<TemplatesToJurisdiction> templatesToJurisdictions = _templateService.GetJurisdictionsByTemplateID(templateID);
            string Jurisdictions = string.Empty;
            foreach (TemplatesToJurisdiction templatesToJurisdiction in templatesToJurisdictions)
            {
                if (templatesToJurisdiction.CountryLaw != null)
                {
                    Jurisdictions += templatesToJurisdiction.CountryLaw.Name + ", ";
                }
            }
            //trim the last comma
            if (Jurisdictions != string.Empty)
            {
                Jurisdictions = Jurisdictions.TrimEnd(' ').TrimEnd(',');
            }
            return Jurisdictions;
        }

        public List<Guid> GetJurisdictionIDs(Guid templateID)
        {
            //get the basis of filing ids from the TrademarksToBasisOfFilings table
            IQueryable<TemplatesToJurisdiction> templatesToJurisdictions = _templateService.GetJurisdictionsByTemplateID(templateID);
            List<Guid> JurisdictionIDs = new List<Guid>();
            foreach (TemplatesToJurisdiction templatesToJurisdiction in templatesToJurisdictions)
            {
                JurisdictionIDs.Add(templatesToJurisdiction.CountryLawID);
            }
            return JurisdictionIDs;
        }
        public ActionResult GetJurisdictionsByTempleteID(Guid templateID)
        {
            List<Guid> JurisdictionIDs = new List<Guid>();
            IQueryable<TemplatesToJurisdiction> templatesToJurisdictions = _templateService.GetJurisdictionsByTemplateID(templateID);
            if (templatesToJurisdictions != null)
            {
                foreach (TemplatesToJurisdiction entityID in templatesToJurisdictions)
                {
                    JurisdictionIDs.Add(entityID.CountryLawID);
                }
            }
            return Json(new { isValid = true, templateJurisdictions = JurisdictionIDs }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UpdateSubmit(DetailsViewModel viewModel)
        {
            FixedData(viewModel);

            if (string.IsNullOrWhiteSpace(viewModel.Title) && !viewModel.IsBeingCopied)
            {
                viewModel.ErrorNotification = Resources.Templates.Details.ErrorTitleMissing;
            }

            if (viewModel.IsBeingCopied)
            {
                LoadTemplateRecord(viewModel);
                viewModel.IsBeingCopied = true;
                viewModel.EmailBodyString = viewModel.EmailBody;
                viewModel.EmailSubjectString = viewModel.EmailSubject;
            }

            if (string.IsNullOrWhiteSpace(viewModel.ErrorNotification) && viewModel.ModuleTypeID != null)
            {
                Guid headerSectionID = _templateService.GetTemplateSectionIDByModuleTypeIDAndSectionName(viewModel.ModuleTypeID, Globals.TEMPLATE_SECTION_HEADER);
                Guid templateToLoadID = viewModel.ID;
                Guid? accountID = null;
                if (UserContext.GetActiveUserData().AccountID == Globals.SUPERADMIN_GUID)
                {
                    //if superadmin is copying or create the template then accountID should be null
                    accountID = null;
                }
                else if (viewModel.IsBeingCopied || viewModel.IsNew)
                {
                    //if template is being copied or new then current user should be the owner
                    accountID = UserContext.GetActiveUserData().AccountID;
                }
                else
                {
                    //for edit use the current OwnerAccountID
                    accountID = viewModel.OwnerAccountID;
                }
                Models.Templates.Details details = new Models.Templates.Details();
                details.ID = viewModel.ID;

                if (UserContext.GetActiveUserData().FirstName != "Super")
                {
                    details.CreatedBy = UserContext.GetActiveUserData().FirstName + " " + UserContext.GetActiveUserData().LastName;
                }
                else
                {
                    details.CreatedBy = "TM Cloud";
                }
                details.Description = viewModel.Description;
                details.JurisdictionName = viewModel.JurisdictionNames;
                details.ModuleTypeID = viewModel.ModuleTypeID;
                details.Notes = viewModel.Notes;
                details.TemplateSectionID = headerSectionID; //details.TemplateSectionID = viewModel.TemplateSectionID;
                details.TemplateTypeID = viewModel.TemplateTypeID;
                details.Title = viewModel.Title;
                details.TrademarkStatusCodeID = viewModel.TrademarkStatusCodeID;
                details.EmailBody = viewModel.EmailBodyString;
                details.EmailSubject = viewModel.EmailSubjectString;
                details.EmailBcc = viewModel.DocumentEmailBcc;
                details.EmailCc = viewModel.EmailCc;

                List<Guid> SelectedJurisdictionIDs = new List<Guid>();
                if (viewModel.JurisdictionIDs != null && viewModel.JurisdictionIDs != "")
                {
                    string[] arrJurisdictionIDs = viewModel.JurisdictionIDs.Split(',');
                    foreach (string strJurisdictionID in arrJurisdictionIDs)
                    {
                        SelectedJurisdictionIDs.Add(Guid.Parse(strJurisdictionID));
                    }
                }

                if (viewModel.IsBeingCopied)
                {
                    details.JurisdictionIDs = SelectedJurisdictionIDs;
                }
                else if (SelectedJurisdictionIDs != null && SelectedJurisdictionIDs.Count > 0)
                {
                    details.JurisdictionIDs = SelectedJurisdictionIDs;
                }

                if (viewModel.IsBeingCopied || viewModel.IsNew)
                {
                    // create new template and redirect to it
                    if (_templateService.SaveCreateTemplate(details, accountID, details.CreatedBy, viewModel.IsNew, viewModel.IsBeingCopied, ref templateToLoadID))
                    {
                        viewModel.IsBeingCopied = false;

                        if (viewModel.IsNew)
                        {
                            ViewBag.ReadOnly = true;
                            // no longer a new record
                            ViewBag.NewRecord = false;
                            viewModel.IsNew = false;
                            return RedirectToAction(_actionPrefix + "View", "Templates", new { ID = templateToLoadID, SuccessNotification = Resources.Templates.Details.SuccessfulCreationNotification });
                        }
                        // Start in edit mode if just copied.
                        else
                        {
                            ViewBag.ReadOnly = true;
                            // no longer a new record
                            ViewBag.NewRecord = false;
                            viewModel.IsNew = false;
                            return RedirectToAction(_actionPrefix + "Edit", "Templates", new { ID = templateToLoadID, SuccessNotification = Resources.Templates.Details.SuccessfulCreationNotification });
                        }
                    }
                }
                else
                {
                    // modify current template
                    if (_templateService.SaveCreateTemplate(details, accountID, details.CreatedBy, viewModel.IsNew, viewModel.IsBeingCopied, ref templateToLoadID))
                    {
                        ViewBag.ReadOnly = true;

                        return RedirectToAction(_actionPrefix + "View", "Templates", new { ID = templateToLoadID, SuccessNotification = Resources.Templates.Details.SuccessNotification });
                    }
                }
            }

            // re-show view
            ViewBag.ReadOnly = false;

            viewModel.ActionPrefix = _actionPrefix;

            return View("Details", viewModel);
        }

		#endregion Details

		//public ActionResult PastTemplateSearch([Bind(Prefix = "ID")] Guid? searchHistoryID)
		//public ActionResult PastTemplateSearch(Guid? searchHistoryID, string fromDashboard)
		public ActionResult PastTemplateSearch(Guid? searchHistoryID)
		{
			//ModuleType ModuleType = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TEMPLATES);
			Guid moduleTypeID = _commonService.ModuleTypeNameToID(Globals.MODULE_TYPE_TEMPLATES);

			//// if not passed a searchID, get the last one saved
			//if (!searchHistoryID.HasValue)
			//         {
			//             string methodName = string.Empty;
			//             string controllerName = string.Empty;
			//             Guid searchID = new Guid();
			//             if (Session["FromDashboard"] != null && ((string)Session["FromDashboard"]) == Globals.DEFAULT_YES)
			//             {
			//                 searchID = _commonService.GetMostRecentDashboardSearch(UserContext.GetActiveUserData().UserID, ModuleType.ID).SearchHistoryID.Value;
			//             }
			//             else
			//             {
			//                 Globals.GetMostRecentSearchByUserID(UserContext.GetActiveUserData().UserID, ModuleType.ID, ref searchID, ref methodName, ref controllerName);
			//             }
			//             searchHistoryID = searchID;
			//         }
			//         //if user clicked a past search from dashboard then save it in SearchHistoriesDashBoard table so that breadcrumbs can use it later
			//         if (fromDashboard != null && fromDashboard == Globals.DEFAULT_YES)
			//         {
			//             // Save search into dashboard history
			//             _commonService.SaveDashboardSearchHistory(searchHistoryID);
			//             Session["FromDashboard"] = Globals.DEFAULT_YES;
			//         }

			// if not passed a searchID, get the last one saved
			if (!searchHistoryID.HasValue)
			{
				searchHistoryID = Globals.GetMostRecentSearchByUserID(UserContext.GetActiveUserData().UserID, moduleTypeID);
			}

			AddSearchResultsFixedData();

            Models.Templates.SearchCriteria searchCriteria = _templateService.GetTemplateSearchHistoryByID((Guid)searchHistoryID);
            IQueryable<Template> query = _templateService.GetSearchRecords(searchCriteria);

            string strSearchCriteria = BuildSearchCriteriaString(searchCriteria);

            // save the query for use by the grid when paging
            UserContext.LastTemplateQuery = query;

            ResultsViewModel viewModel = new ResultsViewModel();
            int? pageSize = UserContext.GetActiveUserData().PageSize;
            viewModel.PageSize = pageSize == null ? 10 : pageSize;
            viewModel.SearchHistoryID = searchHistoryID;
            viewModel.SearchHistoryIDExport = searchHistoryID;

            ViewBag.TotalRecords = query.Count().ToString();
            viewModel.SearchCriteria = strSearchCriteria;
            return View("SearchResults", viewModel);
        }

        public JsonResult GetEmailTemplateData(Guid id, Guid moduleSpecificID, string filePaths = null, string isReport = "No", string href = "unknown")
        {
            var result = new Models.Templates.Details();

            if (id != null && id != Guid.Empty)
            {
                Template template = _templateService.GetTemplateByID(id);

                // Can't translate tokens for a report template as tokens are specific to a single trademark (ex: TrademarkID)

                if (isReport == "No")
                {
                    template = TranslateTemplateTokens(template, moduleSpecificID, href);
                }
                result.DocumentEmailTo = template.EmailTo;
                result.DocumentEmailCc = template.EmailCc;
                result.DocumentEmailBcc = template.EmailBcc;
                result.DocumentEmailSubject = template.EmailSubject;
                result.DocumentEmailBody = template.EmailBody;
                result.DocumentEmailBody = result.EmailBody;

            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetTemplateData(Guid id, Guid moduleSpecificID, string moduleSpecificIDs, string filePaths = null, string isReport = "No", string href = "unknown")
        {
            var result = new Models.Templates.Details();

            try
            {
                result.IsEmail = false;
                result.IsDocumentEmail = false;
                if (id != null && id != Guid.Empty)
                {
                    Template template = _templateService.GetTemplateByID(id);
                    string TemplateBody = template.EmailBody;

                    // Can't translate tokens for a report template as tokens are specific to a single trademark (ex: TrademarkID)
                    if (template.TemplateTypeID == _templateService.GetTemplateTypeByName(Globals.TEMPLATE_TYPE_EMAIL).ID)
                    {
                        if (isReport == "No")
                        {
                            if (moduleSpecificIDs != null && moduleSpecificIDs != "" && moduleSpecificIDs != "undefined")
                            {
                                List<Guid> RecordIDs = Globals.GetSelectedIDs(moduleSpecificIDs);
                                foreach (Guid RecordID in RecordIDs)
                                {
                                    template.EmailBody = TemplateBody;
                                    TranslateTemplateTokens(template, RecordID, href);
                                    result.EmailBody += template.EmailBody;
                                    //result.EmailBody += Globals.TEMPLATE_SEPARATOR;
                                }
                            }
                            else
                            {
                                template = TranslateTemplateTokens(template, moduleSpecificID, href);
                                result.EmailBody = template.EmailBody;
                            }
                        }

                        result.IsEmail = true;
                        result.EmailTo = template.EmailTo;
                        result.EmailCc = template.EmailCc;
                        if (!string.IsNullOrWhiteSpace(template.EmailBcc))
                        {
                            //result.EmailBcc = template.EmailBcc + ", docs@tmcloud.com";
                            result.EmailBcc = template.EmailBcc + ", " + UserContext.GetActiveUserData().Email;
                        }
                        else
                        {
                            //result.EmailBcc = "docs@tmcloud.com";
                            result.EmailBcc = UserContext.GetActiveUserData().Email;
                        }

                        result.EmailSubject = template.EmailSubject;
                        //result.EmailBody = template.EmailBody;
                        result.DocumentEmailBody = result.EmailBody;
                    }
                    else if (template.TemplateTypeID == _templateService.GetTemplateTypeByName(Globals.TEMPLATE_TYPE_DOCUMENT).ID)
                    {
                        if (isReport == "No")
                        {
                            if (moduleSpecificIDs != null && moduleSpecificIDs != "" && moduleSpecificIDs != "undefined")
                            {
                                List<Guid> RecordIDs = Globals.GetSelectedIDs(moduleSpecificIDs);
                                foreach (Guid RecordID in RecordIDs)
                                {
                                    template.EmailBody = TemplateBody;
                                    TranslateTemplateTokens(template, RecordID, href);
                                    result.DocumentBody += template.EmailBody;
                                    //result.DocumentBody += Globals.TEMPLATE_SEPARATOR;
                                }
                            }
                            else
                            {
                                template = TranslateTemplateTokens(template, moduleSpecificID, href);
                                result.DocumentBody = template.EmailBody;
                            }
                        }

                        result.IsDocumentEmail = true;
                        result.DocumentEmailTo = template.EmailTo;
                        result.DocumentEmailCc = template.EmailCc;
                        result.DocumentEmailBcc = template.EmailBcc;
                        result.DocumentEmailSubject = template.EmailSubject;
                    }
                }
                else
                {
                    result.EmailTo = string.Empty;
                    result.EmailCc = string.Empty;
                    result.EmailBcc = string.Empty;
                    result.EmailSubject = string.Empty;
                    result.EmailBody = string.Empty;
                }
            }
            catch(Exception e)
            {
                result.DocumentBody = "Message: " + e.Message + "<br/>" + e.InnerException + "<br />Stack Trace: " + e.StackTrace;

            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetScheduledEmailTemplateDataByID(Guid templateID)
        {
            var result = new Models.Templates.Details();

            if (templateID != null && templateID != Guid.Empty)
            {
                Template template = _templateService.GetTemplateByID(templateID);

                if (template.TemplateTypeID == _templateService.GetTemplateTypeByName(Globals.TEMPLATE_TYPE_EMAIL).ID)
                {
                    result.IsEmail = true;
                    result.EmailTo = template.EmailTo;
                    result.EmailCc = template.EmailCc;
                    result.EmailBcc = template.EmailBcc;
                    result.EmailSubject = template.EmailSubject;
                }

                result.EmailBody = template.EmailBody;
            }
            else
            {
                result.EmailTo = string.Empty;
                result.EmailCc = string.Empty;
                result.EmailBcc = string.Empty;
                result.EmailSubject = string.Empty;
                result.EmailBody = string.Empty;
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        private Template TranslateTemplateTokens(Template template, Guid moduleSpecificID, string href)
        {
            if (template.ModuleTypeID != null)
            {
                template = ReplaceTokensByModuleID(template, moduleSpecificID, href);
            }
            return template;
        }

        private Template ReplaceTokensByModuleID(Template template, Guid moduleSpecificID, string href)
        {
            IQueryable<ModuleType> moduleTypes = _commonService.GetModuleTypes();

            List<string> email = new List<string>();

            string environment = string.Empty;
            try
            {
                if (!string.IsNullOrWhiteSpace(href) && href != "unknown")
                {
                    var parts = href.Split('/');
                    var beforeFirstSlash = String.Join("", parts.Take(1));
                    var beforeThirdSlash = String.Join("/", parts.Take(3));

                    if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_app"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_app"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                        //environment = "http://app.tmcloud.com"; // Must switch back after site is https again.
                    }
                    else if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_qa"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_qa"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                        //environment = "http://qa.tmcloud.com";
                    }
                    else if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_qa_ip"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_qa_ip"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                        //environment = "http://192.168.10.9";
                    }
                    else if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_app_ip"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_app_ip"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                        //environment = "http://192.168.10.107";
                    }
                    else if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_dev"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_dev"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                        //environment = "http://192.168.10.107";
                    }
                    else if (beforeThirdSlash.Contains(ConfigurationManager.AppSettings["env_qa_sandbox_ip"]))
                    {
                        environment = ConfigurationManager.AppSettings["env_qa_sandbox_ip"].ToString();
                        environment = beforeFirstSlash + "//" + environment;
                    }
                    else
                    {
                        environment = beforeThirdSlash;
                    }
                    Session["Environment"] = environment;
                }

                // Only Subject and Body should have tokens
                email.Add(template.EmailSubject);
                email.Add(template.EmailBody);

                var currentModuleType = moduleTypes.Where(x => x.ID == template.ModuleTypeID).FirstOrDefault();

				//if (template.ModuleType.Name == Globals.MODULE_TYPE_ADDITIONAL_IPS)
				if (template.ModuleType.Name == Globals.MODULE_TYPE_COPYRIGHTS
					|| template.ModuleType.Name == Globals.MODULE_TYPE_CONTRACTS
					|| template.ModuleType.Name == Globals.MODULE_TYPE_GENERAL_MATTERS)
				{
					email = ReplaceAdditionalIpTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_ASSIGNMENTS)
                {
                    email = ReplaceAssignmentTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_DOCKETS)
                {
                    email = ReplaceDocketTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_TRADEMARKS)
                {
                    email = ReplaceTrademarkTokens(email, moduleSpecificID, environment);  
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_ADDRESS_BOOK_PEOPLE)
                {
                    email = ReplacePeopleTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_ADDRESS_BOOK_COMPANY)
                {
                    email = ReplaceCompanyTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_DOCUMENTS)
                {
                    email = ReplaceDocumentTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_DOMAIN_NAMES)
                {
                    email = ReplaceDomainNamesTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_SEARCHES)
                {
                    email = ReplaceSearchesTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_ECOMMERCE)
                {
                    email = ReplaceECommerceTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_DISPUTES)
                {
                    email = ReplaceDisputeTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_ACCOUNT_MANAGEMENT)
                {
                    email = ReplaceAccountManagementTokens(email, moduleSpecificID, environment);
                }
                else if (template.ModuleType.Name == Globals.MODULE_TYPE_PATENTS)
                {
                    email = ReplacePatentTokens(email, moduleSpecificID, environment);
                }

                if (email.Count == 1)
                {
                    if (!string.IsNullOrWhiteSpace(template.EmailSubject))
                    {
                        template.EmailSubject = email[0];
                        template.EmailBody = string.Empty;
                    }
                    else
                    {
                        template.EmailSubject = string.Empty;
                        template.EmailBody = email[0];
                    }
                }
                else
                {
                    template.EmailSubject = email[0];
                    template.EmailBody = email[1];
                }
            }
            catch(Exception e)
            {
                throw new Exception("ReplaceTokensByModuleID" + Environment.NewLine + e.InnerException, e);
            }
            return template;
        }

        private List<string> ReplaceTrademarkTokens(List<string> stringsToFilter, Guid trademarkID, string environment)
        {
            Account accountEntity = _addressBookService.GetAccount(UserContext.GetActiveUserData().AccountID);
            IQueryable<TrademarksToBasisOfFiling> tmToBasisOfFilings = _trademarkService.GetBasisOfFilingsByTrademarkID(trademarkID);
            IQueryable<GroupsToTrademark> groupsToTrademarks = _trademarkService.GetGroupsByTrademarkID(trademarkID);
            IQueryable<ManagersToTrademark> managersToTrademarks = _trademarkService.GetManagersByTrademarkID(trademarkID);
            IQueryable<DeadlineType> deadlineTypes = _docketService.GetDeadlineTypesByAccountID(accountEntity.ID);
            IQueryable<ActionStatusType> actionStatusTypes = _docketService.GetActionStatusTypesByAccountID(accountEntity.ID);
            IQueryable<Manager> docketManagers = _docketService.GetManagersByAccountID(accountEntity.ID);
            IQueryable<Trademark> designatedTrademarks = _trademarkService.GetDesignatedTrademarks(trademarkID);
            IQueryable<DocketsToTrademark> docketsToTrademark = _trademarkService.GetDocketsToTrademarkByTrademarkID(trademarkID);
            TrademarksToPriority trademarkToPriority = _trademarkService.GetTrademarksToPriorityByTrademarkID(trademarkID);
            TrademarksToPriority trademarkToConventionPriority = _trademarkService.GetTrademarksToPriorityByTrademarkIDConventionPriority(trademarkID);
            TrademarksToClassesGoodsService trademarkToClassesGoodsService = _trademarkService.GetTrademarkClassesGoodsServiceByTrademarkID(trademarkID);
            List<TrademarksToClassesGoodsService> classesGoodsServices = _commonService.GetClassesByTrademarkID(trademarkID);
            List<ViewModels.Trademarks.TrademarkDetailsViewModel.DocketsSummary> docketsSummary = _trademarkService.GetDockets(trademarkID).OrderBy(x => x.DocketDueDate).ToList();
            List<ViewModels.Trademarks.TrademarkDetailsViewModel.DocketsSummary> docketHistoriesSummary = _trademarkService.GetDocketsHistory(trademarkID).OrderBy(x => x.DocketDueDate).ToList();
            List<JournalEntriesToTrademark> journalEntrySummaries = _trademarkService.GetJournalEntriesByTrademarkID(trademarkID).OrderByDescending(x => x.Date).ToList();
            List<string> filteredEmail = new List<string>();
            IEnumerable<ViewModels.Trademarks.TrademarkDetailsViewModel.RenewalsSummary> renewalSummaries = _trademarkService.GetRenewals(trademarkID);
            IEnumerable<ViewModels.Trademarks.TrademarkDetailsViewModel.CustomsRecordalsSummary> customsRecordals = _trademarkService.GetCustomsRecordals(trademarkID);
            IEnumerable<Document> documents = _trademarkService.GetDocumentByTrademarkID(trademarkID);

            string classes = string.Empty;
            string classesGoods = string.Empty;
            string classesTmoGoods = string.Empty;
            string completedDocketsActions = string.Empty;
            string activeDocketActions = string.Empty;
            string activeDocketActionsShort = string.Empty;
            string basisOfFiling = string.Empty;
            string caseDescription = _commonService.GetTrademarkCaseDescriptionByID(trademarkID);
            string groups = string.Empty;
            string journalEntries = string.Empty;
            string managers = string.Empty;
            string tmRegistrationDetail = string.Empty;
            string dateFormat = UserContext.GetActiveUserData().OutputDateFormat;
            string designatedTrademarksString = string.Empty;
            string renewalEntries = string.Empty;
            string customsRecordalsEntries = string.Empty;
            string documentsEntries = string.Empty;

            string registered = Globals.TRADEMARK_STATUS_REGISTERED;
            string dead = Globals.TRADEMARK_STATUS_DEAD;
            string pending = Globals.TRADEMARK_STATUS_PENDING;

            Trademark trademark = _trademarkService.GetTrademarkRecordByID(trademarkID);
            AgentsToTrademark agent = _trademarkService.GetAgentsByTrademarkID(trademarkID).FirstOrDefault();

            string brandLogoPath = string.Empty;
            if (!string.IsNullOrWhiteSpace(accountEntity.LogoFilePath) && !string.IsNullOrWhiteSpace(accountEntity.LogoFileName))
            {
                brandLogoPath = accountEntity.LogoFilePath + "/" + accountEntity.LogoFileName;
                brandLogoPath = brandLogoPath.Replace(" ", "%20");
            }

            // Tables
            if (trademark != null)
            {
                // Registration Detail
                string tmRegDetailsApplicationNumber = string.IsNullOrWhiteSpace(trademark.ApplicationNumber) ? string.Empty : trademark.ApplicationNumber;
                string tmRegDetailsApplicationDate = trademark.ApplicationDate == null ? string.Empty : trademark.ApplicationDate.Value.ToString("MMM dd, yyyy");
                string tmRegDetailsRegistrationNumber = string.IsNullOrWhiteSpace(trademark.RegistrationNumber) ? string.Empty : trademark.RegistrationNumber;
                string tmRegDetailsRegistrationDate = trademark.RegistrationDate == null ? string.Empty : trademark.RegistrationDate.Value.ToString("MMM dd, yyyy");
                string tmRegDetailsNextRenewalDate = trademark.NextRenewalDate == null ? string.Empty : trademark.NextRenewalDate.Value.ToString("MMM dd, yyyy");
                string tmRegDetailsStatusCode = trademark.TrademarkStatusCode == null ? string.Empty : trademark.TrademarkStatusCode.Name;

                // TM Registration Detail Table
                tmRegistrationDetail = "<table border='1'><tbody><tr><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif; font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.ApplicationNumberToken
                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.ApplicationDateToken
                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RegistrationNumberToken
                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RegistrationDateToken
                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RenewalDueToken
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.StatusToken + "</span></td></tr>";

                tmRegistrationDetail += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsApplicationNumber
                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsApplicationDate
                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsRegistrationNumber
                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsRegistrationDate
                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsNextRenewalDate
                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsStatusCode + "</span></td></tr>";

                tmRegistrationDetail += "</tbody></table>";
            }

            // Docket Actions / Docket Actions History
            if (docketsSummary.Count() > 0)
            {
                activeDocketActions = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 24%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.ActionStatus + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.StatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";

                activeDocketActionsShort = "<p></p><table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 22%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 29%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 17%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";

                foreach (ViewModels.Trademarks.TrademarkDetailsViewModel.DocketsSummary docketSummary in docketsSummary)
                {
                    string docketSummaryDueDate = docketSummary.DocketDueDate == null ? string.Empty : docketSummary.DocketDueDate.Value.ToString("MMM dd, yyyy");
                    string docketSummaryDeadline = docketSummary.DocketDeadlineTypeID == null ? string.Empty : deadlineTypes.Where(x => x.ID == docketSummary.DocketDeadlineTypeID.Value).FirstOrDefault().Name;
                    string docketSummaryReminder = string.IsNullOrWhiteSpace(docketSummary.DocketReminder) ? string.Empty : docketSummary.DocketReminder;
                    string docketSummaryActionStatusType = docketSummary.DocketActionStatusTypeID == null ? string.Empty : actionStatusTypes.Where(x => x.ID == docketSummary.DocketActionStatusTypeID.Value).FirstOrDefault().Name;
                    string docketSummaryStatusDate = docketSummary.DocketStatusDate == null ? string.Empty : docketSummary.DocketStatusDate.Value.ToString("MMM dd, yyyy");
                    string docketSummaryManager = string.Empty;

                    if (docketSummary.DocketManagerID != null)
                    {
                        Manager docketManager = docketManagers.Where(x => x.ID == docketSummary.DocketManagerID.Value).FirstOrDefault();

                        if (docketManager != null && docketManager.ID != Guid.Empty)
                        {
                            if (docketManager.Person != null)
                            {
                                docketSummaryManager = (docketManager.Person.FirstName + " " + docketManager.Person.LastName).Trim();
                            }
                        }
                    }

                    string docketSummaryNotes = string.IsNullOrWhiteSpace(docketSummary.DocketNotes) ? string.Empty : docketSummary.DocketNotes;

                    activeDocketActions += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryActionStatusType + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryStatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryNotes + "</span></td></tr>";

                    activeDocketActionsShort += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryNotes + "</span></td></tr>";
                }
                activeDocketActions += "</tbody></table><p></p>";
                activeDocketActionsShort += "</tbody></table>";
            }

            if (docketHistoriesSummary.Count() > 0)
            {
                completedDocketsActions = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 24%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.ActionStatus + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.StatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";

                foreach (ViewModels.Trademarks.TrademarkDetailsViewModel.DocketsSummary docketHistorySummary in docketHistoriesSummary)
                {
                    string docketHistorySummaryDueDate = docketHistorySummary.DocketDueDate == null ? string.Empty : docketHistorySummary.DocketDueDate.Value.ToString("MMM dd, yyyy");
                    string docketHistorySummaryDeadline = docketHistorySummary.DocketDeadlineTypeID == null ? string.Empty : deadlineTypes.Where(x => x.ID == docketHistorySummary.DocketDeadlineTypeID.Value).FirstOrDefault().Name;
                    string docketHistorySummaryReminder = string.IsNullOrWhiteSpace(docketHistorySummary.DocketReminder) ? string.Empty : docketHistorySummary.DocketReminder;
                    string docketHistorySummaryActionStatusType = docketHistorySummary.DocketActionStatusTypeID == null ? string.Empty : actionStatusTypes.Where(x => x.ID == docketHistorySummary.DocketActionStatusTypeID.Value).FirstOrDefault().Name;
                    string docketHistorySummaryStatusDate = docketHistorySummary.DocketStatusDate == null ? string.Empty : docketHistorySummary.DocketStatusDate.Value.ToString("MMM dd, yyyy");
                    string docketHistorySummaryManager = string.Empty;

                    if (docketHistorySummary.DocketManagerID != null)
                    {
                        Manager docketHistoryManager = docketManagers.Where(x => x.ID == docketHistorySummary.DocketManagerID.Value).FirstOrDefault();

                        if (docketHistoryManager != null && docketHistoryManager.ID != Guid.Empty)
                        {
                            if (docketHistoryManager.Person != null)
                            {
                                docketHistorySummaryManager = (docketHistoryManager.Person.FirstName + " " + docketHistoryManager.Person.LastName).Trim();
                            }
                        }
                    }

                    string docketHistorySummaryNotes = string.IsNullOrWhiteSpace(docketHistorySummary.DocketNotes) ? string.Empty : docketHistorySummary.DocketNotes;

                    completedDocketsActions += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryActionStatusType + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryStatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketHistorySummaryNotes + "</span></td></tr>";
                }
                completedDocketsActions += "</tbody></table>";
            }

            if (journalEntrySummaries.Count() > 0)
            {
                //journalSummary.Date = journalEntry.Date;
                //journalSummary.Activity = journalEntry.Activity;
                //journalSummary.Time = journalEntry.TimeSpent;


                journalEntries = "<table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Date
                                    + "</span></td><td style='width: 34%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Person
                                    + "</span></td><td style='width: 44%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Activity + "</span></td></tr>";

                foreach (JournalEntriesToTrademark journalEntrySummary in journalEntrySummaries)
                {
                    string journalDate = journalEntrySummary.Date == null ? string.Empty : journalEntrySummary.Date.Value.ToString(dateFormat);
                    string journalName = journalEntrySummary.Person == null ? string.Empty : journalEntrySummary.Person.GetFullName();
                    string journalActivity = journalEntrySummary.Activity == null ? string.Empty : journalEntrySummary.Activity;

                    journalEntries += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalName
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalActivity + "</span></td></tr>";
                }
                journalEntries += "</tbody></table>";
            }

            // Classes Goods Services
            if (classesGoodsServices.Count() > 0)
            {
                classesGoods = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.ClassesLabel
                                    + "</span></td><td style='text-align:center; width: 88%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.GoodsLabel + "</span></td></tr>";
                classesTmoGoods = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.ClassesLabel
                                    + "</span></td><td style='text-align:center; width: 88%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.TMOGoodsToken + "</span></td></tr>";

                foreach (TrademarksToClassesGoodsService classesGoodsService in classesGoodsServices)
                {
                    classesGoods += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.Classes
                                    + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.GoodsServices + "</span></td></tr>";
                    classesTmoGoods += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.Classes
                                    + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.GoodsServicesForeignLanguage + "</span></td></tr>";

                    classes += classesGoodsService.Classes + ", ";
                }
                //classesGoods = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'>" + Resources.Templates.TrademarksModule.ClassesLabel
                //                    + "</td><td style='text-align:center; width: 88%'>" + Resources.Templates.TrademarksModule.GoodsLabel + "</td></tr>";
                //classesTmoGoods = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'>" + Resources.Templates.TrademarksModule.ClassesLabel
                //                    + "</td><td style='text-align:center; width: 88%'>" + Resources.Templates.TrademarksModule.TMOGoodsToken + "</td></tr>";

                //foreach (TrademarksToClassesGoodsService classesGoodsService in classesGoodsServices)
                //{
                //    classesGoods += "<tr><td style='text-align:center;'>" + classesGoodsService.Classes
                //                    + "</td><td>" + classesGoodsService.GoodsServices + "</td></tr>";
                //    classesTmoGoods += "<tr><td style='text-align:center;'>" + classesGoodsService.Classes
                //                    + "</td><td>" + classesGoodsService.GoodsServicesForeignLanguage + "</td></tr>";

                //    classes += classesGoodsService.Classes + ", ";
                //}
                classesGoods += "</tbody></table>";
                classesTmoGoods += "</tbody></table>";
                classes = classes.TrimEnd(' ').TrimEnd(',');
            }

            //renewals
            if (renewalSummaries.Count() > 0)
            {
                renewalEntries = "<table border='1'><tbody><tr><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.RenewalDeadlineLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.RenewalInstructedLabel
                                    + "</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.AppNumLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.AppDateLabel
                                    + "</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.RegNumLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.RegDateLabel + "</span></td></tr>";

                foreach (ViewModels.Trademarks.TrademarkDetailsViewModel.RenewalsSummary renewalSummary in renewalSummaries)
                {
                    string renewalDueDate = renewalSummary.RenewalsRenewalDeadlineDate == null ? string.Empty : renewalSummary.RenewalsRenewalDeadlineDate.Value.ToString(dateFormat);
                    string renewalInstructed = renewalSummary.RenewalsRenewalInstructed == null ? string.Empty : renewalSummary.RenewalsRenewalInstructed.Value.ToString(dateFormat);
                    string appNumber = renewalSummary.RenewalsApplicationNumber == null ? string.Empty : renewalSummary.RenewalsApplicationNumber;
                    string appDate = renewalSummary.RenewalsApplicationDate == null ? string.Empty : renewalSummary.RenewalsApplicationDate.Value.ToString(dateFormat);
                    string regNumber = renewalSummary.RenewalsRegistrationNumber == null ? string.Empty : renewalSummary.RenewalsRegistrationNumber;
                    string regDate = renewalSummary.RenewalsRegistrationDate == null ? string.Empty : renewalSummary.RenewalsRegistrationDate.Value.ToString(dateFormat);

                    renewalEntries += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + renewalDueDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + renewalInstructed
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + appNumber
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + appDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + regNumber
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + regDate + "</span></td></tr>";

                    //add note
                    IEnumerable<ViewModels.Trademarks.TrademarkDetailsViewModel.RenewalNotesSummary> renewalNoteSummaries = _trademarkService.GetRenewalNotes(renewalSummary.RenewalID);
                    if(renewalNoteSummaries.Count() > 0)
                    {
                        renewalEntries += "<tr><td colspan='6' style='width: 100%; text-align:left;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.NotesLabel + "</span>: ";
                        foreach (ViewModels.Trademarks.TrademarkDetailsViewModel.RenewalNotesSummary renewalNoteSummary in renewalNoteSummaries)
                        {
                            renewalEntries += "<br><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + renewalNoteSummary.RenewalNotes + "</span>";
                        }
                        renewalEntries += "</td></tr>";
                    }
                }
                renewalEntries += "</tbody></table>";
            }


            // WIPO Designations
            foreach (Trademark designatedTrademark in designatedTrademarks)
            {
                if (designatedTrademark.CountryLaw != null)
                {
                    designatedTrademarksString += designatedTrademark.CountryLaw.WipoCode + "-" + designatedTrademark.CountryLaw.Name;
                }
                if (designatedTrademark.TrademarkStatusCode != null)
                {
                    if (designatedTrademark.TrademarkStatusCode.Name == registered)
                    {
                        designatedTrademarksString += " <span style='font-size: 24px; '>®</span>, ";
                    }
                    else if (designatedTrademark.TrademarkStatusCode.Name == dead)
                    {
                        designatedTrademarksString += " <img style='width: 24px;' src='/Images/Icons/dead.png'>, ";
                    }
                    else if (designatedTrademark.TrademarkStatusCode.Name == pending)
                    {
                        designatedTrademarksString += " <img style='width: 24px;' src='/Images/Icons/pending.png'>, ";
                    }
                    else
                    {
                        designatedTrademarksString += designatedTrademark.TrademarkStatusCode.Name + ", ";
                    }
                }
                else
                {
                    designatedTrademarksString += ", ";
                }
            }
            designatedTrademarksString = designatedTrademarksString.TrimEnd(' ').TrimEnd(',');

            // Basis of Filing
            foreach (TrademarksToBasisOfFiling tmToBasisOfFiling in tmToBasisOfFilings)
            {
                basisOfFiling += tmToBasisOfFiling.TrademarkBasisOfFiling.Name + ", ";
            }
            //trim the last comma
            if (basisOfFiling != string.Empty)
            {
                basisOfFiling = basisOfFiling.TrimEnd(' ').TrimEnd(',');
            }

            // Groups
            if (groupsToTrademarks.Count() > 0)
            {
                foreach (GroupsToTrademark groupsToTrademark in groupsToTrademarks)
                {
                    groups += groupsToTrademark.Group.Name + ", ";
                }
                groups = groups.TrimEnd(' ').TrimEnd(',');
            }

            // Managers
            if (managersToTrademarks.Count() > 0)
            {
                foreach (ManagersToTrademark managersToTrademark in managersToTrademarks)
                {
                    if (managersToTrademark.Manager != null && managersToTrademark.Manager.Person != null)
                    {
                        managers += managersToTrademark.Manager.Person.FirstName + " " + managersToTrademark.Manager.Person.LastName + ", ";
                    }
                }
                managers = managers.TrimEnd(' ').TrimEnd(',');
            }

            //customs recordals
            if (customsRecordals.Count() > 0)
            {
                customsRecordalsEntries = "<table border='1'><tbody><tr><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.EffectiveDateLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.ExpiryDateLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.RecordationNumberLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.ReferenceNumberLabel
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.AgentLabel
                                    + "</span></td><td style='width: 25%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Trademarks.TrademarkDetails.NotesLabel + "</span></td></tr>";

                foreach (ViewModels.Trademarks.TrademarkDetailsViewModel.CustomsRecordalsSummary customsRecordal in customsRecordals)
                {
                    string effectiveDate = customsRecordal.EffectiveDate == null ? string.Empty : customsRecordal.EffectiveDate.Value.ToString(dateFormat);
                    string expiryDate = customsRecordal.ExpiryDate == null ? string.Empty : customsRecordal.ExpiryDate.Value.ToString(dateFormat);
                    string recordationNumber = customsRecordal.RecordationNumber == null ? string.Empty : customsRecordal.RecordationNumber;
                    string referenceNumber = customsRecordal.ReferenceNumber == null ? string.Empty : customsRecordal.ReferenceNumber;
                    string agentCompanyName = customsRecordal.AgentCompanyName == null ? string.Empty : customsRecordal.AgentCompanyName;
                    string customsRecordalsNotes = customsRecordal.CustomsRecordalsNotes == null ? string.Empty : customsRecordal.CustomsRecordalsNotes;

                    customsRecordalsEntries += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + effectiveDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + expiryDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + recordationNumber
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + referenceNumber
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + agentCompanyName
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + customsRecordalsNotes + "</span></td></tr>";
                }
                customsRecordalsEntries += "</tbody></table>";
            }

            //documents
            if (documents.Count() > 0)
            {
                documentsEntries = "<table border='1'><tbody><tr><td style='width: 30%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Documents.Search.FileNameLabel
                                    + "</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Documents.SearchResults.DocumentTypeName
                                    + "</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Documents.SearchResults.DocumentDescription
                                    + "</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Documents.SearchResults.DateOfDocument + "</span></td></tr>";

                foreach (Document document in documents)
                {
                    string fileName = document.FileName == null ? string.Empty : document.FileName;
                    string documentType = document.DocumentType.Name == null ? string.Empty : document.DocumentType.Name;
                    string documentDescription = document.Description == null ? string.Empty : document.Description;
                    string documentDate = document.DocumentDate == null ? string.Empty : document.DocumentDate.Value.ToString(dateFormat);

                    documentsEntries += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + fileName
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + documentType
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + documentDescription
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + documentDate + "</span></td></tr>";
                }
                documentsEntries += "</tbody></table>";
            }

            //Replacing of Subject and Body tokens
            foreach (string stringToFilter in stringsToFilter)
            {
                string filteredString = stringToFilter;
                int FileWidthSmall = 0;
                int FileHeightSmall = 0;
                int FileWidthMedium = 0;
                int FileHeightMedium = 0;
                int FileWidthLarge = 0;
                int FileHeightLarge = 0;

                // Only filter if not empty and string contains at least one curly bracket
                if (!string.IsNullOrWhiteSpace(filteredString) && filteredString.Contains("{"))
                {
                    //for all table tokens, get the style text and put it in table tag - commented out as it required all table changes in all modules - ticket 1789
                    //string styleText = "";
                    filteredString = filteredString.Replace("&amp;", "&").Replace("&#39;", "'");
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BasisOfFilingToken + "}", basisOfFiling);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //styleText = Globals.GetStyleTextFromSpan(filteredString, Resources.Templates.TrademarksModule.TmRegistrationDetailsToken);
                    //if (styleText != "")
                    //{
                    //    tmRegistrationDetail = tmRegistrationDetail.Replace("<table border='1'>", "<table style='" + styleText + "' border ='1'>");
                    //}
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TmRegistrationDetailsToken + "}", tmRegistrationDetail);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //styleText = Globals.GetStyleTextFromSpan(filteredString, Resources.Templates.TrademarksModule.ClassesAndGoodsToken);
                    //if(styleText != "")
                    //{
                    //    classesGoods = classesGoods.Replace("<table border='1'>", "<table style='" + styleText + "' border ='1'>");
                    //}
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClassesAndGoodsToken + "}", classesGoods);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TMOGoodsToken + "}", classesTmoGoods);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //styleText = Globals.GetStyleTextFromSpan(filteredString, Resources.Templates.TrademarksModule.ActiveDocketActionsToken);
                    //if (styleText != "")
                    //{
                    //    activeDocketActions = activeDocketActions.Replace("<table border='1'>", "<table style='" + styleText + "' border ='1'>");
                    //}
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ActiveDocketActionsToken + "}", activeDocketActions);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //styleText = Globals.GetStyleTextFromSpan(filteredString, Resources.Templates.TrademarksModule.ActiveDocketActionsShortToken);
                    //if (styleText != "")
                    //{
                    //    activeDocketActionsShort = activeDocketActionsShort.Replace("<table border='1'>", "<table style='" + styleText + "' border ='1'>");
                    //}
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ActiveDocketActionsShortToken + "}", activeDocketActionsShort);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //styleText = Globals.GetStyleTextFromSpan(filteredString, Resources.Templates.TrademarksModule.CompletedDocketActionsToken);
                    //if (styleText != "")
                    //{
                    //    completedDocketsActions = completedDocketsActions.Replace("<table border='1'>", "<table style='" + styleText + "' border ='1'>");
                    //}
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CompletedDocketActionsToken + "}", completedDocketsActions);
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClassesToken + "}", classes);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CaseDescriptionToken + "}", caseDescription);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.GroupsToken + "}", groups);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.JournalEntriesToken + "}", journalEntries);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ManagersToken + "}", managers);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoDesignationsToken + "}", designatedTrademarksString);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RenewalsToken + "}", renewalEntries);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CustomsRecordalsToken + "}", customsRecordalsEntries);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DocumentsToken + "}", documentsEntries);

                    if (!string.IsNullOrWhiteSpace(brandLogoPath))
                    {
                        //brand logo can be small, medium, or large, small width 50px, medium width 100px, large width 200px, height should be adjusted as per the aspect ratio
                        //small
                        Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_SMALL, accountEntity.LogoFileWidth, accountEntity.LogoFileHeight, ref FileWidthSmall, ref FileHeightSmall);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoSmallToken + "}"
                            , "<img style='width:" + FileWidthSmall + "px; height:" + FileHeightSmall + "px;' src='" + brandLogoPath + "'>");
                        //medium
                        Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_MEDIUM, accountEntity.LogoFileWidth, accountEntity.LogoFileHeight, ref FileWidthMedium, ref FileHeightMedium);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoMediumToken + "}"
                            , "<img style='width:" + FileWidthMedium + "px; height:" + FileHeightMedium + "px;' src='" + brandLogoPath + "'>");
                        //large
                        Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_LARGE, accountEntity.LogoFileWidth, accountEntity.LogoFileHeight, ref FileWidthLarge, ref FileHeightLarge);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoLargeToken + "}"
                            , "<img style='width:" + FileWidthLarge + "px; height:" + FileHeightLarge + "px;' src='" + brandLogoPath + "'>");


                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoToken + "}"
                            , "<img style='width:250px; height:250px;' src='" + brandLogoPath + "'>");
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoSmallToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoMediumToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.BrandingLogoLargeToken + "}", string.Empty);
                    }

                    if (trademark.TrademarkProfile != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TrademarkToken + "}", trademark.TrademarkProfile.Name);
                        if (trademark.TrademarkProfile.TrademarkProfileType != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TypeOfTrademarkToken + "}", trademark.TrademarkProfile.TrademarkProfileType.Name);
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TypeOfTrademarkToken + "}", string.Empty);
                        }

                        if (!string.IsNullOrWhiteSpace(trademark.TrademarkProfile.FileName) && !string.IsNullOrWhiteSpace(trademark.TrademarkProfile.FilePath))
                        {
                            //logo can be small, medium, or large, small width 50px, medium width 100px, large width 200px, height should be adjusted as per the aspect ratio
                            //small
                            Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_SMALL, trademark.TrademarkProfile.FileWidth, trademark.TrademarkProfile.FileHeight, ref FileWidthSmall, ref FileHeightSmall);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoSmallToken + "}"
                                , "<img style='width:" + FileWidthSmall + "px; height:" + FileHeightSmall + "px;' src='" + trademark.TrademarkProfile.FilePath + Globals.SLASH + trademark.TrademarkProfile.FileName + "'>");
                            //medium
                            Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_MEDIUM, trademark.TrademarkProfile.FileWidth, trademark.TrademarkProfile.FileHeight, ref FileWidthMedium, ref FileHeightMedium);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoMediumToken + "}"
                                , "<img style='width:" + FileWidthMedium + "px; height:" + FileHeightMedium + "px;' src='" + trademark.TrademarkProfile.FilePath + Globals.SLASH + trademark.TrademarkProfile.FileName + "'>");
                            //large
                            Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_LARGE, trademark.TrademarkProfile.FileWidth, trademark.TrademarkProfile.FileHeight, ref FileWidthLarge, ref FileHeightLarge);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoLargeToken + "}"
                                , "<img style='width:" + FileWidthLarge + "px; height:" + FileHeightLarge + "px;' src='" + trademark.TrademarkProfile.FilePath + Globals.SLASH + trademark.TrademarkProfile.FileName + "'>");

                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoToken + "}"
                                , "<img style='width:250px; height:250px;' src='" + trademark.TrademarkProfile.FilePath + Globals.SLASH + trademark.TrademarkProfile.FileName + "'>");
                            if (filteredString.Contains("/Files"))
                            {
                                filteredString = filteredString.Replace("/Files", environment + "/Files");
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoSmallToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoMediumToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoLargeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TrademarkToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TypeOfTrademarkToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoSmallToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoMediumToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LogoLargeToken + "}", string.Empty);
                    }

                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationNumberToken + "}", trademark.ApplicationNumber);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientsReferenceToken + "}", trademark.ClientReference);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegistrationNumberToken + "}", trademark.RegistrationNumber);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NotesToken + "}", trademark.Notes);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.LimitationsToken + "}", trademark.LimitationsDisclaimers);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.FileReferenceToken + "}", trademark.FileReference);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TmIdNumberToken + "}", trademark.TrademarkNumber);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PublicationDetailsToken + "}", trademark.PublicationDetails);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TodaysDateToken + "}", DateTime.Now.ToString(dateFormat));
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TodaysDateLongToken + "}", DateTime.Now.ToString("MMMM dd, yyyy"));
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TmoStatusToken + "}", trademark.TmoStatus);

                    if (trademark.StatusDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TmoStatusDateToken + "}", trademark.StatusDate.Value.ToString(dateFormat));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TmoStatusDateToken + "}", string.Empty);
                    }

                    if (trademark.PriorityFilingDeadlineDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineToken + "}", trademark.PriorityFilingDeadlineDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineLongToken + "}", trademark.PriorityFilingDeadlineDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineLongToken + "}", string.Empty);
                    }
                    //Priority Filing Deadline from Priority Application
                    if (trademarkToConventionPriority != null)
                    {
                        if (trademarkToConventionPriority.LinkTrademarkID != null && trademarkToConventionPriority.JurisdictionID != null)
                        {
                            //check the jurisdiction to see if FirstFiling (In Application details of TM reecord) is checked
                            Trademark conventionPriorityTrademark = _trademarkService.GetTrademarkRecordByID(trademarkToConventionPriority.LinkTrademarkID.Value);
                            if(conventionPriorityTrademark != null && conventionPriorityTrademark.FirstFiling != null && conventionPriorityTrademark.FirstFiling.Value &&
                                trademark.ConventionPriority != null)
                            {
                                //if first filing is checked then take the ConventionPriority date from the main record and add 6 months to it
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken + "}", trademark.ConventionPriority.Value.AddMonths(6).ToString(dateFormat));
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken + "}", trademark.ConventionPriority.Value.AddMonths(6).ToString("MMMM dd, yyyy"));
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken + "}", string.Empty);
                        }

                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityNumberToken + "}", trademarkToPriority.ApplicationNumber);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken + "}", string.Empty);
                    }


                    if (trademark.DateOfPublication != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateOfPublicationToken + "}", trademark.DateOfPublication.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateOfPublicationLongToken + "}", trademark.DateOfPublication.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateOfPublicationToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateOfPublicationLongToken + "}", string.Empty);
                    }

                    if (trademark.ConventionPriority != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityDateToken + "}", trademark.ConventionPriority.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityDateLongToken + "}", trademark.ConventionPriority.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityDateLongToken + "}", string.Empty);
                    }

                    if (trademarkToPriority != null)
                    {
                        if (trademarkToPriority.JurisdictionID != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityJurisdictionToken + "}", trademarkToPriority.CountryLaw.Name);
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityJurisdictionToken + "}", string.Empty);
                        }

                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityNumberToken + "}", trademarkToPriority.ApplicationNumber);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityJurisdictionToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ConventionPriorityNumberToken + "}", string.Empty);
                    }

                    if (trademarkToClassesGoodsService != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.FirstUseInCommerceToken + "}", trademarkToClassesGoodsService.UseInCommerce);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.FirstUseToken + "}", trademarkToClassesGoodsService.FirstUse);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.FirstUseInCommerceToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.FirstUseToken + "}", string.Empty);
                    }

                    if (trademark.StatusDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.SubstatusDateToken + "}", trademark.StatusDate.Value.ToString(dateFormat));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.SubstatusDateToken + "}", string.Empty);
                    }

                    if (trademark.NoticeOfAllowanceDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NoticeOfAllowanceDateToken + "}", trademark.NoticeOfAllowanceDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NoticeOfAllowanceDateLongToken + "}", trademark.NoticeOfAllowanceDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NoticeOfAllowanceDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NoticeOfAllowanceDateLongToken + "}", string.Empty);
                    }

                    if (trademark.OppositionPeriodEndDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OppositionPeriodEndsToken + "}", trademark.OppositionPeriodEndDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OppositionPeriodEndsLongToken + "}", trademark.OppositionPeriodEndDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OppositionPeriodEndsToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OppositionPeriodEndsLongToken + "}", string.Empty);
                    }

                    if (trademark.RecordCheckedDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateCheckedToken + "}", trademark.RecordCheckedDate.Value.ToString(dateFormat));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DateCheckedToken + "}", string.Empty);
                    }

                    if (trademark.CoolingOffDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CoolingOffPeriodEndsToken + "}", trademark.CoolingOffDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CoolingOffPeriodEndsLongToken + "}", trademark.CoolingOffDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CoolingOffPeriodEndsToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CoolingOffPeriodEndsLongToken + "}", string.Empty);
                    }

                    if (trademark.DeclarationOfUseDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DeclarationOfUseFiledToken + "}", trademark.DeclarationOfUseDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DeclarationOfUseFiledLongToken + "}", trademark.DeclarationOfUseDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DeclarationOfUseFiledToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DeclarationOfUseFiledLongToken + "}", string.Empty);
                    }

                    if (trademark.GrantDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.GrantDateToken + "}", trademark.GrantDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.GrantDateLongToken + "}", trademark.GrantDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.GrantDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.GrantDateLongToken + "}", string.Empty);
                    }

                    if (trademark.ExtensionDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ExtensionsObtainedUntilToken + "}", trademark.ExtensionDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ExtensionsObtainedUntilLongToken + "}", trademark.ExtensionDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ExtensionsObtainedUntilToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ExtensionsObtainedUntilLongToken + "}", string.Empty);
                    }

                    if (trademark.RegistrationDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegistrationDateToken + "}", trademark.RegistrationDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegistrationDateLongToken + "}", trademark.RegistrationDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegistrationDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegistrationDateLongToken + "}", string.Empty);
                    }

                    if (trademark.NextRenewalDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RenewalDueToken + "}", trademark.NextRenewalDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RenewalDueLongToken + "}", trademark.NextRenewalDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RenewalDueToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RenewalDueLongToken + "}", string.Empty);
                    }

                    #region Agent
                    if (agent != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsReferenceToken + "}", agent.AgentReference);

                        if (agent.Company != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsToken + "}", agent.Company.Name);

                            if (agent.Company.Address != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1Token + "}", agent.Company.Address.AddressLine1);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress2Token + "}", agent.Company.Address.AddressLine2);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1And2Token + "}",
                                                    (agent.Company.Address.AddressLine1 + " " + agent.Company.Address.AddressLine2));
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityToken + "}", agent.Company.Address.City);

                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentPostalCodeToken + "}", agent.Company.Address.PostalCode);

                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentStateToken + "}", agent.Company.Address.State);

                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken + "}",
                                                    (agent.Company.Address.City + " " + agent.Company.Address.State + " " + agent.Company.Address.PostalCode));

                                if (agent.Company.Address.CountryLaw != null)
                                {
                                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCountryToken + "}", agent.Company.Address.CountryLaw.Name);
                                }
                                else
                                {
                                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCountryToken + "}", string.Empty);
                                }
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1Token + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress2Token + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1And2Token + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentPostalCodeToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentStateToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken + "}", string.Empty);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCountryToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1And2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentPostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentStateToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCountryToken + "}", string.Empty);
                        }

                        if (agent.Person != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactToken + "}", (agent.Person.FirstName + " " + agent.Person.LastName));
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactFirstNameToken + "}", agent.Person.FirstName);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactPreferredNameToken + "}", agent.Person.Nickname);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkPhoneToken + "}", agent.Person.WorkPhone);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkingEmailToken + "}", agent.Person.WorkEmail);

                            if (agent.Person.PeopleSalutation != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactSalutationToken + "}", agent.Person.PeopleSalutation.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactSalutationToken + "}", string.Empty);
                            }

                            if (agent.Person.PeopleTitle != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactTitleToken + "}", agent.Person.PeopleTitle.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactTitleToken + "}", string.Empty);
                            }

                            if (agent.Person.PeopleDepartment != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactDepartmentToken + "}", agent.Person.PeopleDepartment.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactDepartmentToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactFirstNameToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactPreferredNameToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkPhoneToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkingEmailToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactSalutationToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactTitleToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactDepartmentToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsReferenceToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentsToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentAddress1And2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentPostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentStateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentCountryToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactFirstNameToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactPreferredNameToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkPhoneToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactWorkingEmailToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactSalutationToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactTitleToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AgentContactDepartmentToken + "}", string.Empty);
                    }
                    #endregion Agent

                    #region Client
                    if (trademark.Company1 != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientToken + "}", trademark.Company1.Name);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientNumberToken + "}", trademark.Company1.ClientNumber);

                        if (trademark.Company1.Address != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1Token + "}", trademark.Company1.Address.AddressLine1);

                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress2Token + "}", trademark.Company1.Address.AddressLine2);

                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1And2Token + "}",
                                                    (trademark.Company1.Address.AddressLine1 + " " + trademark.Company1.Address.AddressLine2));
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityToken + "}", trademark.Company1.Address.City);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientStateToken + "}", trademark.Company1.Address.State);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientPostalCodeToken + "}", trademark.Company1.Address.PostalCode);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityStatePostalCodeToken + "}",
                                                    (trademark.Company1.Address.City + " " + trademark.Company1.Address.State + " " + trademark.Company1.Address.PostalCode));
                            if (trademark.Company1.Address.CountryLaw != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCountryToken + "}", trademark.Company1.Address.CountryLaw.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCountryToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1And2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientStateToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientPostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityStatePostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCountryToken + "}", string.Empty);
                        }

                        if (trademark.Person != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactToken + "}", (trademark.Person.FirstName + " " + trademark.Person.LastName));
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactFirstNameToken + "}", trademark.Person.FirstName);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactPreferredNameToken + "}", trademark.Person.Nickname);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkPhoneToken + "}", trademark.Person.WorkPhone);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkingEmailToken + "}", trademark.Person.WorkEmail);

                            if (trademark.Person.PeopleSalutation != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactSalutationToken + "}", trademark.Person.PeopleSalutation.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactSalutationToken + "}", string.Empty);
                            }

                            if (trademark.Person.PeopleTitle != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactTitleToken + "}", trademark.Person.PeopleTitle.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactTitleToken + "}", string.Empty);
                            }

                            if (trademark.Person.PeopleDepartment != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactDepartmentToken + "}", trademark.Person.PeopleDepartment.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactDepartmentToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactSalutationToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactFirstNameToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactPreferredNameToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactTitleToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactDepartmentToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkPhoneToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkingEmailToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientAddress1And2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientStateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientPostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCityStatePostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientCountryToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactSalutationToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactFirstNameToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactPreferredNameToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactTitleToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactDepartmentToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkPhoneToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientContactWorkingEmailToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ClientNumberToken + "}", string.Empty);
                    }
                    #endregion Client

                    #region Applicant/Registrant
                    if (trademark.Company != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantIncorporateInToken + "}", trademark.Company.IncorporatedIn);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantRegistrantToken + "}", trademark.Company.Name);

                        if (trademark.ApplicationDate != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateToken + "}", trademark.ApplicationDate.Value.ToString(dateFormat));
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateLongToken + "}", trademark.ApplicationDate.Value.ToString("MMMM dd, yyyy"));
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateLongToken + "}", string.Empty);
                        }

                        if (trademark.Company.Address != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1And2Token + "}",
                                                    (trademark.Company.Address.AddressLine1 + " " + trademark.Company.Address.AddressLine2));
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1Token + "}", trademark.Company.Address.AddressLine1);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress2Token + "}", trademark.Company.Address.AddressLine2);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityToken + "}", trademark.Company.Address.City);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantStateToken + "}", trademark.Company.Address.State);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantPostalCodeToken + "}", trademark.Company.Address.PostalCode);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityStatePostalCodeToken + "}",
                                                    (trademark.Company.Address.City + " " + trademark.Company.Address.State + " " + trademark.Company.Address.PostalCode));
                            if (trademark.Company.Address.CountryLaw != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCountryToken + "}", trademark.Company.Address.CountryLaw.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCountryToken + "}", string.Empty);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1And2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress2Token + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantStateToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantPostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityStatePostalCodeToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCountryToken + "}", string.Empty);
                        }

                        if (trademark.Company.CompanyEntityType != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantTypeOfEntityToken + "}", trademark.Company.CompanyEntityType.Name);
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantTypeOfEntityToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantIncorporateInToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantRegistrantToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicationDateLongToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1And2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress1Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantAddress2Token + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantStateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantPostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCityStatePostalCodeToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantCountryToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ApplicantTypeOfEntityToken + "}", string.Empty);
                    }
                    #endregion Applicant/Registrant

                    if (trademark.RecordCheckedBy != null)
                    {
                        Person person = _commonService.GetPersonByUserID(trademark.RecordCheckedBy.Value);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCheckedByToken + "}", person.FirstName + " " + person.LastName);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCheckedByToken + "}", string.Empty);
                    }

                    if (trademark.TrademarkRegistrationType != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TypeOfRegistrationToken + "}", trademark.TrademarkRegistrationType.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.TypeOfRegistrationToken + "}", string.Empty);
                    }

                    if (trademark.CountryLaw != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.JurisdictionToken + "}", trademark.CountryLaw.Name);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoCodeToken + "}", trademark.CountryLaw.WipoCode);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.JurisdictionToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoCodeToken + "}", string.Empty);
                    }

                    if (trademark.TrademarkStatusCode != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.StatusToken + "}", trademark.TrademarkStatusCode.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.StatusToken + "}", string.Empty);
                    }

                    if (trademark.TrademarkSubstatusCode != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.SubstatusToken + "}", trademark.TrademarkSubstatusCode.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.SubstatusToken + "}", string.Empty);
                    }

                    if (trademark.GeographicRegion != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegionToken + "}", trademark.GeographicRegion.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RegionToken + "}", string.Empty);
                    }

                    if (trademark.CentralAttackExpiresDate != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoCentralAttackExpiresToken + "}", trademark.CentralAttackExpiresDate.Value.ToString(dateFormat));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoCentralAttackExpiresToken + "}", string.Empty);
                    }

                    if (trademark.Footer != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCreatedByToken + "}", trademark.Footer.CreatedBy);
                        if (trademark.Footer.TimeCreated != null)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCreatedOnToken + "}", trademark.Footer.TimeCreated.Value.ToString(dateFormat));
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCreatedOnToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCreatedByToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.RecordCreatedOnToken + "}", string.Empty);
                    }

                    #region INCOMPLETE
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.AssociatedMarksToken + "}", string.Empty);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.DependentRegistrationsToken + "}", string.Empty);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.EuCtmSeniorityToken + "}", string.Empty);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.HomeRegistrationsToken + "}", string.Empty);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.PriorRegistrationsToken + "}", string.Empty);
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.WipoIrBaseToken + "}", string.Empty);
                    #endregion INCOMPLETE

                    //new fields
                    if(trademark.Company2 != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OwnerToken + "}", trademark.Company2.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.OwnerToken + "}", string.Empty);
                    }
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.MatterNumberToken + "}", trademark.MatterNumber);
                    if (trademark.CostCenter != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CostCenterToken + "}", trademark.CostCenter.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CostCenterToken + "}", string.Empty);
                    }

                    if (docketsToTrademark.Count() > 0)
                    {
                        DocketsToTrademark docketToTrademark = docketsToTrademark.Where(x => x.DeadlineType.Name == Globals.DEADLINE_TYPES_OFFICE_ACTION_DUE && x.ActionStatusType.Name == Globals.ACTION_STATUS_WAITING_FOR_ACTION).FirstOrDefault();
                        if (docketToTrademark != null && docketToTrademark.ID != Guid.Empty)
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ResponseToOfficeActionDueToken + "}", docketToTrademark.DueDate.Value.ToString(dateFormat));
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ResponseToOfficeActionDueToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ResponseToOfficeActionDueToken + "}", string.Empty);
                    }

                    if (trademark.ResponsibleOffice != null)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ResponsibleOfficeToken + "}", trademark.ResponsibleOffice.Name);
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.ResponsibleOfficeToken + "}", string.Empty);
                    }
                    filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.CustomsRecordalToken + "}", trademark.CustomsRecordal);

                    //next action taken
                    DocketsToTrademark NextAction = _trademarkService.GetNextDocketAction(trademark.ID);
                    if (NextAction != null)
                    {
                        if (NextAction.DueDate.HasValue && NextAction.DueDate != null)
                        {
                            String strDueDate = NextAction.DueDate.Value.ToString(dateFormat);
                            String strDueDateLong = NextAction.DueDate.Value.ToString("MMMM dd, yyyy");
                            if (NextAction.DeadlineTypeID != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionToken + "}", strDueDate + " - " + NextAction.DeadlineType.Name);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionLongToken + "}", strDueDateLong + " - " + NextAction.DeadlineType.Name);
                            }
                            else if (!string.IsNullOrWhiteSpace(NextAction.Reminder))
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionToken + "}", strDueDate + " - " + NextAction.Reminder);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionLongToken + "}", strDueDateLong + " - " + NextAction.Reminder);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionToken + "}", strDueDate);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionLongToken + "}", strDueDateLong);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionLongToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextActionLongToken + "}", string.Empty);
                    }
                    //next deadline
                    DocketsToTrademark NextDeadline = _trademarkService.GetNextDocketDeadline(trademark.ID);
                    if (NextDeadline != null)
                    {
                        if (NextDeadline.DueDate.HasValue && NextDeadline.DueDate != null)
                        {
                            String strDueDate = NextDeadline.DueDate.Value.ToString(dateFormat);
                            String strDueDateLong = NextDeadline.DueDate.Value.ToString("MMMM dd, yyyy");
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineDateToken + "}", strDueDate);

                            if (NextDeadline.DeadlineTypeID != null)
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineToken + "}", strDueDate + " - " + NextDeadline.DeadlineType.Name);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineLongToken + "}", strDueDateLong + " - " + NextDeadline.DeadlineType.Name);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineToken + "}", strDueDate);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineLongToken + "}", strDueDateLong);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineLongToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextDeadlineLongToken + "}", string.Empty);
                    }
                    //next reminder
                    DocketsToTrademark NextReminder = _trademarkService.GetNextDocketReminder(trademark.ID);
                    if (NextReminder != null)
                    {
                        if (NextReminder.DueDate.HasValue && NextReminder.DueDate != null)
                        {
                            String strDueDate = NextReminder.DueDate.Value.ToString(dateFormat);
                            String strDueDateLong = NextReminder.DueDate.Value.ToString("MMMM dd, yyyy");
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderDateToken + "}", strDueDate);

                            if (!string.IsNullOrWhiteSpace(NextReminder.Reminder))
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderToken + "}", strDueDate + " - " + NextReminder.Reminder);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderLongToken + "}", strDueDateLong + " - " + NextReminder.Reminder);
                            }
                            else
                            {
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderToken + "}", strDueDate);
                                filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderLongToken + "}", strDueDateLong);
                            }
                        }
                        else
                        {
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderToken + "}", string.Empty);
                            filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderLongToken + "}", string.Empty);
                        }
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.NextReminderLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec8Affidavit = _trademarkService.GetNextDocketSection8AffidavitDue(trademark.ID);
                    if (sec8Affidavit != null && sec8Affidavit.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitDueToken + "}", sec8Affidavit.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitDueLongToken + "}", sec8Affidavit.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitDueToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitDueLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec8AffidavitFirstDayToFile = _trademarkService.GetNextDocketSection8AffidavitFirstDayToFile(trademark.ID);
                    if (sec8AffidavitFirstDayToFile != null && sec8AffidavitFirstDayToFile.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileToken + "}", sec8AffidavitFirstDayToFile.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileLongToken + "}", sec8AffidavitFirstDayToFile.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec71SixYearAffidavitDue = _trademarkService.GetNextDocketSection71SixYearAffidavitDue(trademark.ID);
                    if (sec71SixYearAffidavitDue != null && sec71SixYearAffidavitDue.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateToken + "}", sec71SixYearAffidavitDue.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateLongToken + "}", sec71SixYearAffidavitDue.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec71TenYearAffidavitDue = _trademarkService.GetNextDocketSection71TenYearAffidavitDue(trademark.ID);
                    if (sec71TenYearAffidavitDue != null && sec71TenYearAffidavitDue.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateToken + "}", sec71TenYearAffidavitDue.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateLongToken + "}", sec71TenYearAffidavitDue.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec71SixYearAffidavitGracePeriodEnds = _trademarkService.GetNextDocketSection71SixYearAffidavitGracePeriodEnds(trademark.ID);
                    if (sec71SixYearAffidavitGracePeriodEnds != null && sec71SixYearAffidavitGracePeriodEnds.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateToken + "}", sec71SixYearAffidavitGracePeriodEnds.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateLongToken + "}", sec71SixYearAffidavitGracePeriodEnds.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateLongToken + "}", string.Empty);
                    }

                    DocketsToTrademark sec71TenYearAffidavitGracePeriodEnds = _trademarkService.GetNextDocketSection71TenYearAffidavitGracePeriodEnds(trademark.ID);
                    if (sec71TenYearAffidavitGracePeriodEnds != null && sec71TenYearAffidavitGracePeriodEnds.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateToken + "}", sec71TenYearAffidavitGracePeriodEnds.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateLongToken + "}", sec71TenYearAffidavitGracePeriodEnds.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateLongToken + "}", string.Empty);
                    }

                    //US SOU Ultimate Deadline
                    DocketsToTrademark SouUltimateDeadline = _trademarkService.GetNextUSSouUltimateDeadlineDue(trademark.ID);
                    if (SouUltimateDeadline != null && SouUltimateDeadline.ID != Guid.Empty)
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.USSOUUltimateDeadlineToken + "}", SouUltimateDeadline.DueDate.Value.ToString(dateFormat));
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.USSOUUltimateDeadlineLongToken + "}", SouUltimateDeadline.DueDate.Value.ToString("MMMM dd, yyyy"));
                    }
                    else
                    {
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.USSOUUltimateDeadlineToken + "}", string.Empty);
                        filteredString = filteredString.Replace("{" + Resources.Templates.TrademarksModule.USSOUUltimateDeadlineLongToken + "}", string.Empty);
                    }

                }
                filteredEmail.Add(filteredString != null ? filteredString : string.Empty);
            }
            return filteredEmail;
        }

        private List<string> ReplaceAdditionalIpTokens(List<string> stringsToFilter, Guid additionalIpID, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();
            List<ViewModels.AdditionalIPs.DetailsViewModel.RelatedTrademarkWithLogoInfoSummary> relatedTrademarkSummaries = _additionalIpService.GetRelatedTrademarksWithLogoInfoSummaryByAdditionalIpID(additionalIpID);
            var tokens = Resources.Templates.AdditionalIPModule.ResourceManager.GetTokens();

            string relatedTrademarks = string.Empty;
            string relatedTrademarksToReplace = "{" + Resources.Templates.AdditionalIPModule.RelatedTrademarksTableToken.Replace("&", "&amp;") + "}";

            string tmAssignmentsSchedule = string.Empty;
            string tmAssignmentScheduleToReplace = "{" + Resources.Templates.AdditionalIPModule.TmAssignmentScheduleToken.Replace("&", "&amp;") + "}";

            string tmAssignmentsScheduleNoImage = string.Empty;
            string tmAssignmentScheduleToReplaceNoImage = "{" + Resources.Templates.AdditionalIPModule.TmAssignmentScheduleNoImageToken.Replace("&", "&amp;") + "}";

            int FileWidthSmall = 0;
            int FileHeightSmall = 0;

            #region Tables
            // Related Trademarks
            if (relatedTrademarkSummaries.Count() > 0)
            {
                relatedTrademarks = "<table border='1'><tbody><tr><td style='width: 48%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.RegistrationNumber
                                    + "</span></td><td style='width: 29%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.Classes + "</span></td></tr>";

                tmAssignmentsSchedule = "<table border='1'><tbody><tr><td style='width: 48%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.Image
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.RegistrationNumber
                                    + "</span></td><td style='width: 29%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.JurisdictionToken + "</span></td></tr>";

                tmAssignmentsScheduleNoImage = "<table border='1'><tbody><tr><td style='width: 36%; text-align:center;'><span style='text-align:center; font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.ApplicationNumberToken
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.RegistrationNumber
                                    + "</span></td><td style='width: 41%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AdditionalIPModule.JurisdictionToken + "</span></td></tr>";

                foreach (ViewModels.AdditionalIPs.DetailsViewModel.RelatedTrademarkWithLogoInfoSummary relatedTrademarkSummary in relatedTrademarkSummaries)
                {
                    FileWidthSmall = 0;
                    FileHeightSmall = 0;
                    string logo = string.Empty;

                    if (!string.IsNullOrWhiteSpace(relatedTrademarkSummary.LogoName) && !string.IsNullOrWhiteSpace(relatedTrademarkSummary.LogoPath))
                    {
                        Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_SMALL, relatedTrademarkSummary.LogoWidth, relatedTrademarkSummary.LogoHeight, ref FileWidthSmall, ref FileHeightSmall);
                        logo = "<img style='width:" + FileWidthSmall + "px; height:" + FileHeightSmall + "px;' src='" + relatedTrademarkSummary.LogoPath + Globals.SLASH + relatedTrademarkSummary.LogoName + "'>";
                    }

                    relatedTrademarks += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.TrademarkProfileName
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.RegistrationNumber
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.Classes + "</span></td></tr>";

                    tmAssignmentsSchedule += "<tr><td style='text-align:center; width: 48%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.TrademarkProfileName
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + logo
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.RegistrationNumber
                                        + "</span></td><td style='text-align:center; width: 29%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.Jurisdiction + "</span></td></tr>";

                    tmAssignmentsScheduleNoImage += "<tr><td style='text-align:center; width: 36%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.TrademarkProfileName
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.ApplicationNumber
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.RegistrationNumber
                                        + "</span></td><td style='text-align:center; width: 41%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + relatedTrademarkSummary.Jurisdiction + "</span></td></tr>";
                }
                relatedTrademarks += "</tbody></table>";
                tmAssignmentsSchedule += "</tbody></table>";
                tmAssignmentsScheduleNoImage += "</tbody></table>";
            }

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    tablesAddedStrings.Add(stringToFilter.Replace(relatedTrademarksToReplace, relatedTrademarks).Replace(tmAssignmentScheduleToReplace, tmAssignmentsSchedule)
                                                            .Replace(tmAssignmentScheduleToReplaceNoImage, tmAssignmentsScheduleNoImage)
                                                            .Replace("&nbsp;", " ")
                                                            .Replace("&amp;", "&")
                                                            .Replace("'", "&#39;")
                                                            .Replace("{" + Resources.Templates.TrademarksModule.TodaysDateToken + "}", DateTime.Now.ToString("MMMM dd, yyyy")));
                }
            }
            #endregion Tables

            var tokenData = _additionalIpService.GetAdditionalIpEmailTemplateTokenData(additionalIpID);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceSearchesTokens(List<string> stringsToFilter, Guid searchID, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();
            List<TrademarkClearancesToClassesGoodsService> classesGoodsServices = _commonService.GetClassesByTrademarkClearanceID(searchID);
            var tokens = Resources.Templates.SearchesModule.ResourceManager.GetTokens();

            string classes = string.Empty;
            string classesGoods = string.Empty;
            string classesGoodsStringToReplace = "{" + Resources.Templates.SearchesModule.ClassesAndGoodsToFileToken.Replace("&", "&amp;") + "}";

            #region Tables
            // Classes Goods Services
            if (classesGoodsServices.Count() > 0)
            {
                classesGoods = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.ClassesLabel
                                    + "</span></td><td style='text-align:center; width: 88%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.TrademarksModule.GoodsLabel + "</span></td></tr>";
                foreach (TrademarkClearancesToClassesGoodsService classesGoodsService in classesGoodsServices)
                {
                    classesGoods += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.Classes
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + classesGoodsService.GoodsServices + "</span></td></tr>";
                    classes += classesGoodsService.Classes + ", ";
                }
                classesGoods += "</tbody></table>";
                classes = classes.TrimEnd(' ').TrimEnd(',');
            }

            #endregion Tables

            //foreach (string stringToFilter in stringsToFilter)
            //{
            //    if (stringToFilter != null)
            //    {
            //        tablesAddedStrings.Add(stringToFilter.Replace(classesGoodsStringToReplace, classesGoods));
            //    }
            //}

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace("&amp;", "&")
                                                          .Replace("'", "&#39;")
                                                          .Replace(classesGoodsStringToReplace, classesGoods);
                    tablesAddedStrings.Add(filteredString);
                }
            }

            var tokenData = _trademarkClearanceService.GetSearchEmailTemplateTokenData(searchID);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceECommerceTokens(List<string> stringsToFilter, Guid id, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace("&amp;", "&")
                                                          .Replace("'", "&#39;");
                    tablesAddedStrings.Add(filteredString);
                }
            }

            var tokens = Resources.Templates.ECommerceModule.ResourceManager.GetTokens();

            var tokenData = _eCommerceService.GetECommerceEmailTemplateTokenData(id);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceDisputeTokens(List<string> stringsToFilter, Guid id, string environment)
        {
            Guid accountID = UserContext.GetActiveUserData().AccountID;
            Guid trademarkModuleTypeID = Globals.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TRADEMARKS).ID;
            List<string> editedStrings = new List<string>();
            var tokens = Resources.Templates.DisputesModule.ResourceManager.GetTokens();

            tokens.Add("Client Reference", "ClientReference");
            tokens.Add("Todays Date", "TodaysDate");

            string dateFormat = UserContext.GetActiveUserData().OutputDateFormat;

            string activeDocketActionsTokenToReplace = "{" + Resources.Templates.DisputesModule.ActiveDocketActionsToken.Replace("&", "&amp;") + "}";
            string activeDocketActions = string.Empty;

            string activeDocketActionsShortTokenToReplace = "{" + Resources.Templates.DisputesModule.ActiveDocketActionsShortToken.Replace("&", "&amp;") + "}";
            string activeDocketActionsShort = string.Empty;

            string otherPartysIpRightsTokenToReplace = "{" + Resources.Templates.DisputesModule.OtherPartysIpRightsToken.Replace("&", "&amp;").Replace("'", "&#39;") + "}";
            string otherPartysIpRights = string.Empty;

            string clientIPRightsTokenToReplace = "{" + Resources.Templates.DisputesModule.ClientIPRightsToken.Replace("&", "&amp;").Replace("'", "&#39;") + "}";
            string clientIPRightsToken = string.Empty;

            string journalEntriesTokenToReplace = "{" + Resources.Templates.DisputesModule.JournalEntriesToken.Replace("&", "&amp;") + "}";
            string journalEntries = string.Empty;

            string caseTitleTokenToReplace = "{" + Resources.Templates.DisputesModule.CaseTitleToken.Replace("&", "&amp;") + "}";
            string caseTitle = _disputeService.GetDisputePartiesByID(id);

            string caseDescriptionTokenToReplace = "{" + Resources.Templates.DisputesModule.CaseDescriptionToken.Replace("&", "&amp;") + "}";
            string caseDescription = _commonService.GetDisputeCaseDescriptionByID(id);

            string nextDeadlineTokenToReplace = "{" + Resources.Templates.DisputesModule.NextDeadlineToken.Replace("&", "&amp;") + "}";
            string nextDeadlineString = string.Empty;

            IQueryable<ActionStatusType> actionStatusTypes = _docketService.GetActionStatusTypesByAccountID(accountID);
            List<ViewModels.Disputes.DetailsViewModel.ClientIPRightsSummary> clientIpRightsInvolved = _disputeService.GetClientIPRightsInvolved(id).ToList();
            List<JournalEntriesToDispute> journalEntriesToDispute = _disputeService.GetJournalEntriesByDisputeID(id).ToList();
            List<ViewModels.Disputes.DetailsViewModel.OpposingPartiesIPRightsSummary> opposingPartiesIPRights = _disputeService.GetOpposingPartiesIPRightsInvolved(id).ToList();
            List<ViewModels.Disputes.DetailsViewModel.DocketsSummary> docketsSummary = _disputeService.GetDockets(id).OrderBy(x => x.DocketDueDate).ToList();
            IQueryable<DeadlineType> deadlineTypes = _docketService.GetDeadlineTypesByAccountID(accountID);
            IQueryable<Trademark> trademarks = _trademarkService.GetTrademarksByAccountID(accountID);

            //next deadline
            DocketsToDispute NextDeadline = _disputeService.GetNextDocketDeadline(id);

            if (NextDeadline != null)
            {
                if (NextDeadline.DueDate.HasValue && NextDeadline.DueDate != null)
                {
                    nextDeadlineString = NextDeadline.DueDate.Value.ToString(dateFormat);

                    if (NextDeadline.DeadlineTypeID != null)
                    {
                        nextDeadlineString += " - " + NextDeadline.DeadlineType.Name;
                    }
                }
            }
            #region Tables
            // Related Trademarks
            if (stringsToFilter.Count() > 0)
            {
                journalEntries = "<table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Date
                                    + "</span></td><td style='width: 34%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Person
                                    + "</span></td><td style='width: 44%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Activity + "</span></td></tr>";

                clientIPRightsToken = "<table border='1'><tbody><tr><td style='width: 25%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Trademark
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.ApplicationNumber
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Classes
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Status
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Jurisdiction
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.TmIdNumber + "</span></td></tr>";

                otherPartysIpRights = "<table border='1'><tbody><tr><td style='width: 25%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Trademark
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.ApplicationNumber
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Classes
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Status
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Jurisdiction
                                    + "</span></td><td style='width: 15%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.TmIdNumber + "</span></td></tr>";

                activeDocketActions = "<table border='1'><tbody><tr><td style='width: 18%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.DueDate
                                    + "</span></td><td style='width: 28%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Deadline
                                    + "</span></td><td style='width: 18%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Reminder
                                    + "</span></td><td style='width: 18%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.DocketManager
                                    + "</span></td><td style='width: 18%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Notes + "</span></td></tr>";

                activeDocketActionsShort = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 22%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 29%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 17%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";


                foreach (JournalEntriesToDispute journalEntryToDispute in journalEntriesToDispute)
                {
                    string journalDate = journalEntryToDispute.Date == null ? string.Empty : journalEntryToDispute.Date.Value.ToString(dateFormat);
                    string journalName = journalEntryToDispute.Person == null ? string.Empty : journalEntryToDispute.Person.GetFullName();
                    string journalActivity = journalEntryToDispute.Activity == null ? string.Empty : journalEntryToDispute.Activity;

                    journalEntries += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalName
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalActivity + "</span></td></tr>";
                }

                foreach (ViewModels.Disputes.DetailsViewModel.ClientIPRightsSummary clientIpRightInvolved in clientIpRightsInvolved)
                {
                    Trademark ourPartyTm = trademarks.Where(x => x.ID == clientIpRightInvolved.ClientIPRightsRecordID).FirstOrDefault();
                    if (ourPartyTm != null)
                    {
                        string ourPartyTmName = string.Empty;
                        string ourAppNum = ourPartyTm.ApplicationNumber == null ? string.Empty : ourPartyTm.ApplicationNumber;
                        string ourPartyClasses = string.Empty;

                        List<TrademarksToClassesGoodsService> ourPartyClassesGoods = _commonService.GetClassesByTrademarkID(ourPartyTm.ID);
                        foreach (TrademarksToClassesGoodsService ourPartyClassesGood in ourPartyClassesGoods)
                        {
                            ourPartyClasses += ourPartyClassesGood.Classes + ", ";
                        }
                        ourPartyClasses = ourPartyClasses.TrimEnd(' ').TrimEnd(',');

                        string ourPartyTmStatus = ourPartyTm.TrademarkStatusCode == null ? string.Empty : ourPartyTm.TrademarkStatusCode.Name;
                        string ourPartyTmJurisdiction = ourPartyTm.CountryLaw == null ? string.Empty : ourPartyTm.CountryLaw.Name;
                        string ourPartyTmId = ourPartyTm.TrademarkNumber == null ? string.Empty : ourPartyTm.TrademarkNumber;

                        if (ourPartyTm.TrademarkProfile != null)
                        {
                            ourPartyTmName = ourPartyTm.TrademarkProfile.Name == null ? string.Empty : ourPartyTm.TrademarkProfile.Name;
                        }

                        clientIPRightsToken += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourPartyTmName
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourAppNum
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourPartyClasses
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourPartyTmStatus
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourPartyTmJurisdiction
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + ourPartyTmId + "</span></td></tr>";
                    }
                }

                foreach (ViewModels.Disputes.DetailsViewModel.OpposingPartiesIPRightsSummary opposingPartyIPRights in opposingPartiesIPRights)
                {
                    Trademark opposingPartyTm = trademarks.Where(x => x.ID == opposingPartyIPRights.OpposingPartyIPRightsRecordID).FirstOrDefault();
                    if (opposingPartyTm != null)
                    {
                        string opposingPartyTmName = string.Empty;
                        string opposingAppNum = opposingPartyTm.ApplicationNumber == null ? string.Empty : opposingPartyTm.ApplicationNumber;
                        string opposingPartyClasses = string.Empty;

                        List<TrademarksToClassesGoodsService> opposingPartyClassesGoods = _commonService.GetClassesByTrademarkID(opposingPartyTm.ID);
                        foreach (TrademarksToClassesGoodsService opposingPartyClassesGood in opposingPartyClassesGoods)
                        {
                            opposingPartyClasses += opposingPartyClassesGood.Classes + ", ";
                        }
                        opposingPartyClasses = opposingPartyClasses.TrimEnd(' ').TrimEnd(',');

                        string opposingPartyTmStatus = opposingPartyTm.TrademarkStatusCode == null ? string.Empty : opposingPartyTm.TrademarkStatusCode.Name;
                        string opposingPartyTmJurisdiction = opposingPartyTm.CountryLaw == null ? string.Empty : opposingPartyTm.CountryLaw.Name;
                        string opposingPartyTmId = opposingPartyTm.TrademarkNumber == null ? string.Empty : opposingPartyTm.TrademarkNumber;

                        if (opposingPartyTm.TrademarkProfile != null)
                        {
                            opposingPartyTmName = opposingPartyTm.TrademarkProfile.Name == null ? string.Empty : opposingPartyTm.TrademarkProfile.Name;
                        }

                        otherPartysIpRights += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingPartyTmName
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingAppNum
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingPartyClasses
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingPartyTmStatus
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingPartyTmJurisdiction
                                    + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + opposingPartyTmId + "</span></td></tr>";
                    }
                }

                foreach (ViewModels.Disputes.DetailsViewModel.DocketsSummary docketSummary in docketsSummary)
                {
                    string docketNotes = docketSummary.DocketNotes == null ? string.Empty : docketSummary.DocketNotes;
                    string docketReminder = docketSummary.DocketReminder == null ? string.Empty : docketSummary.DocketReminder;
                    string docketSummaryActionStatusType = docketSummary.DocketActionStatusTypeID == null ? string.Empty : actionStatusTypes.Where(x => x.ID == docketSummary.DocketActionStatusTypeID.Value).FirstOrDefault().Name;
                    string docketSummaryStatusDate = docketSummary.DocketStatusDate == null ? string.Empty : docketSummary.DocketStatusDate.Value.ToString(dateFormat);
                    string docketDeadline = string.Empty;
                    if (docketSummary.DocketDeadlineTypeID != null)
                    {
                        DeadlineType deadlineType = new DeadlineType();
                        deadlineType = deadlineTypes.Where(x => x.ID == docketSummary.DocketDeadlineTypeID.Value).FirstOrDefault();
                        docketDeadline = deadlineType.Name;
                    }
                    string docketDueDate = docketSummary.DocketDueDate == null ? string.Empty : docketSummary.DocketDueDate.Value.ToString(dateFormat);
                    string docketManager = string.Empty;
                    if (docketSummary.DocketManagerID != null)
                    {
                        Manager manager = _commonService.GetManagerByManagerID(docketSummary.DocketManagerID.Value);

                        if (manager.Person != null)
                        {
                            docketManager = manager.Person.GetFullName();
                        }
                    }
                    activeDocketActions += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDueDate
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDeadline
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketReminder
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketManager
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketNotes + "</span></td></tr>";

                    activeDocketActionsShort += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketNotes + "</span></td></tr>";

                }

                journalEntries += "</tbody></table>";
                otherPartysIpRights += "</tbody></table>";
                clientIPRightsToken += "</tbody></table>";
                activeDocketActions += "</tbody></table>";
                activeDocketActionsShort += "</tbody></table>";
            }

            #endregion Tables

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace("&amp;", "&")
                                                          .Replace("'", "&#39;")
                                                          .Replace(clientIPRightsTokenToReplace, clientIPRightsToken)
                                                          .Replace(otherPartysIpRightsTokenToReplace, otherPartysIpRights)
                                                          .Replace(caseTitleTokenToReplace, caseTitle)
                                                          .Replace(caseDescriptionTokenToReplace, caseDescription)
                                                          .Replace(journalEntriesTokenToReplace, journalEntries)                               
                                                          .Replace(nextDeadlineTokenToReplace, nextDeadlineString)
                                                          .Replace(activeDocketActionsTokenToReplace, activeDocketActions)
                                                          .Replace(activeDocketActionsShortTokenToReplace, activeDocketActionsShort);
                    editedStrings.Add(filteredString);
                }
            }

            var tokenData = _disputeService.GetDisputeEmailTemplateTokenData(id);

            return _templateService.ReplaceTokens(editedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceAccountManagementTokens(List<string> stringsToFilter, Guid id, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();
            List<App_Data.User> usersList = _accountMembershipService.GetUsersByAccountID(id).ToList();
            List<ImportTrademark> importTrademarksList = _importService.GetImportTrademarkByAccountID(id).ToList();
            var tokens = Resources.Templates.AccountManagementModule.ResourceManager.GetTokens();

            string tmRecordsDownloadedTable = string.Empty;
            string tmRecordsDownloadedStringToReplace = "{" + Resources.Templates.AccountManagementModule.TmRecordsDownloadedTableToken.Replace("&", "&amp;") + "}";

            string usersTable = string.Empty;
            string usersStringToReplace = "{" + Resources.Templates.AccountManagementModule.UsersTableToken.Replace("&", "&amp;") + "}";

            string recordCount = string.Empty;
            string recordCountToReplace = "{" + Resources.Templates.AccountManagementModule.RecordCountToken + "}";

            #region Table

            tmRecordsDownloadedTable = "<table border='1'><tbody><tr><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.DateLabel
                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.UsernameLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.ProjectNameLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.SearchCriteriaLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.NumberOfRecordsImportedLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.AccountHolderLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.BilledLabel + "</span></td></tr>";

            if (importTrademarksList.Count() > 0)
            {
                string accountHolder = _addressBookService.GetAccountHolderCompanyByAccountID(id).Name;

                foreach (ImportTrademark importTrademarkList in importTrademarksList)
                {
                    string trademarkUsername = "Unknown, or no corresponding person or user in database";
                    string dateBilled = importTrademarkList.DateBilled == null ? "No Bill Sent" : importTrademarkList.DateBilled.Value.ToShortDateString();

                    if (importTrademarkList.Person != null)
                    {
                        if (importTrademarkList.Person.User != null)
                        {
                            trademarkUsername = importTrademarkList.Person.User.UserName;
                        }
                    }

                    string importDate = importTrademarkList.Date.ToShortDateString();

                    tmRecordsDownloadedTable += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + importDate
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + trademarkUsername
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + importTrademarkList.ProjectName
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + importTrademarkList.SearchCriteria
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + importTrademarkList.TotalImportedRows.ToString()
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + accountHolder
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + dateBilled + "</span></td></tr>";
                }
                tmRecordsDownloadedTable += "</tbody></table>";
            }

            usersTable = "<table border='1'><tbody><tr><td style='text-align:center; width: 28%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.NameLabel
                                    + "</span></td><td style='text-align:center; width: 30%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.EmailUsernameLabel
                                    //+ "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.PermissionsLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.StatusLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.ActiveLabel
                                    + "</span></td><td style='text-align:center; width: 14%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + Resources.Templates.AccountManagementModule.LastLoginLabel + "</span></td></tr>";

            if (usersList.Count() > 0)
            {
                string yes = Resources.Common.Common.Yes;
                string no = Resources.Common.Common.No;

                foreach (App_Data.User userList in usersList)
                {
                    string lastLoginDate = userList.LastLoginDate == null ? "Unknown" : userList.LastLoginDate.Value.ToShortDateString();
                    string userActive = userList.Active ? yes : no;
                    string userPersonName = "Unknown, or no corresponding person for user in database";
                    string userStatusCode = userList.StatusCode == null ? "No status" : userList.StatusCode.Name;

                    if (userList.People.Count > 0)
                    {
                        userPersonName = userList.People.FirstOrDefault().FirstName;

                        if (!string.IsNullOrWhiteSpace(userList.People.FirstOrDefault().LastName))
                        {
                            userPersonName = userPersonName + " " + userList.People.FirstOrDefault().LastName;
                        }
                    }

                    usersTable += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + userPersonName
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + userList.UserName
                                //+ "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + userList.Permissions
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + userStatusCode
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + userActive
                                + "</span></td><td><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + lastLoginDate + "</span></td></tr>";
                }
                usersTable += "</tbody></table>";
            }
            #endregion Table

            #region Record Count

            Account account = _managersUsersAccessRightsService.GetAccount(id);

            ViewModels.Settings.ModulePermissionsViewModel modulePermissionsViewModel = new ViewModels.Settings.ModulePermissionsViewModel(new ModulePermissions(account.ActivatedModules));

            List<Tuple<string, string>> results = _commonService.GetRecordCountsByAccountID(id);

            modulePermissionsViewModel.PeopleFree = results.Where(x => x.Item1 == "PeopleFree").FirstOrDefault().Item2;
            modulePermissionsViewModel.CompaniesFree = results.Where(x => x.Item1 == "CompaniesFree").FirstOrDefault().Item2;
            //modulePermissionsViewModel.AdditionalIpsCharge = results.Where(x => x.Item1 == "AdditionalIPsCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.PatentsCharge = results.Where(x => x.Item1 == "PatentsCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.AssignmentsCharge = results.Where(x => x.Item1 == "AssignmentsCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.DocumentsFree = results.Where(x => x.Item1 == "DocumentsFree").FirstOrDefault().Item2;
            modulePermissionsViewModel.DisputesCharge = results.Where(x => x.Item1 == "DisputesCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.DomainNamesCharge = results.Where(x => x.Item1 == "DomainNamesCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.ECommerceCharge = results.Where(x => x.Item1 == "ECommerceCharge").FirstOrDefault().Item2;
			modulePermissionsViewModel.CopyrightsCharge = results.Where(x => x.Item1 == "CopyrightsCharge").FirstOrDefault().Item2;
			modulePermissionsViewModel.ContractsCharge = results.Where(x => x.Item1 == "ContractsCharge").FirstOrDefault().Item2;
			modulePermissionsViewModel.GeneralMattersCharge = results.Where(x => x.Item1 == "GeneralMattersCharge").FirstOrDefault().Item2;
			modulePermissionsViewModel.SearchesCharge = results.Where(x => x.Item1 == "TrademarkClearancesCharge").FirstOrDefault().Item2;
            modulePermissionsViewModel.TrademarkProfilesFree = results.Where(x => x.Item1 == "TrademarkProfilesFree").FirstOrDefault().Item2;
            modulePermissionsViewModel.TrademarkRecordsCharge = results.Where(x => x.Item1 == "TrademarksCharge").FirstOrDefault().Item2;

            recordCount = (//Convert.ToInt32(modulePermissionsViewModel.AdditionalIpsCharge)
                         + Convert.ToInt32(modulePermissionsViewModel.PatentsCharge)
                         + Convert.ToInt32(modulePermissionsViewModel.AssignmentsCharge)
                         + Convert.ToInt32(modulePermissionsViewModel.DisputesCharge)
                         + Convert.ToInt32(modulePermissionsViewModel.DomainNamesCharge) 
                         + Convert.ToInt32(modulePermissionsViewModel.ECommerceCharge)
						 + Convert.ToInt32(modulePermissionsViewModel.CopyrightsCharge)
						 + Convert.ToInt32(modulePermissionsViewModel.ContractsCharge)
						 + Convert.ToInt32(modulePermissionsViewModel.GeneralMattersCharge)
						 + Convert.ToInt32(modulePermissionsViewModel.SearchesCharge) 
                         + Convert.ToInt32(modulePermissionsViewModel.TrademarkRecordsCharge)).ToString();
            #endregion Record Count

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace(tmRecordsDownloadedStringToReplace, tmRecordsDownloadedTable)
                                                          .Replace(usersStringToReplace, usersTable)
                                                          .Replace(recordCountToReplace, recordCount);
                    tablesAddedStrings.Add(filteredString);
                }
            }

            var tokenData = _managerUserAccessRightsService.GetAccountManagementEmailTemplateTokenData(id);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceDocketTokens(List<string> stringsToFilter, Guid docketID, string environment)
        {
            Guid accountID = UserContext.GetActiveUserData().AccountID;
            Guid disputeModuleTypeID = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_DISPUTES).ID;
            Guid trademarkModuleTypeID = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TRADEMARKS).ID;
            List<string> editedStrings = new List<string>();
            IQueryable<DeadlineType> deadlineTypes = _docketService.GetDeadlineTypesByAccountID(accountID);
            List<vw_Dockets> docketsSummary = _docketService.GetDocketsByAccountID(accountID).Where(x => x.ID == docketID).ToList();
            IQueryable<ActionStatusType> actionStatusTypes = _docketService.GetActionStatusTypesByAccountID(accountID);
            var tokens = Resources.Templates.DocketModule.ResourceManager.GetTokens();
            string dateFormat = UserContext.GetActiveUserData().OutputDateFormat;

            string activeDocketActionsTokenToReplace = "{" + Resources.Templates.DocketModule.ActiveDocketActionsToken.Replace("&", "&amp;") + "}";
            string activeDocketActions = string.Empty;

            string activeDocketActionsShortTokenToReplace = "{" + Resources.Templates.DocketModule.ActiveDocketActionsShortToken.Replace("&", "&amp;") + "}";
            string activeDocketActionsShort = string.Empty;

            string completedDocketActionsTokenToReplace = "{" + Resources.Templates.DocketModule.CompletedDocketActionsToken.Replace("&", "&amp;") + "}";
            string completedDocketsActions = string.Empty;

            string journalEntriesDisputesTokenToReplace = "{" + Resources.Templates.DocketModule.JournalEntriesDisputesToken.Replace("&", "&amp;") + "}";
            string journalEntriesDisputes = string.Empty;

            string journalEntriesTrademarksTokenToReplace = "{" + Resources.Templates.DocketModule.JournalEntriesTrademarksToken.Replace("&", "&amp;") + "}";
            string journalEntriesTrademarks = string.Empty;

            string caseTitleTokenToReplace = "{" + Resources.Templates.DisputesModule.CaseTitleToken.Replace("&", "&amp;") + "}";
            string caseTitle = string.Empty;

            string tmRegistrationDetailsTokenToReplace = "{" + Resources.Templates.DocketModule.TrademarkRegistrationDetailsToken.Replace("&", "&amp;") + "}";
            string tmRegistrationDetail = string.Empty;

            if (stringsToFilter.Count() > 0)
            {
                activeDocketActions = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 24%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.ActionStatus + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 10%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.StatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";

                activeDocketActionsShort = "<table border='1'><tbody><tr><td style='text-align:center; width: 12%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DueDate
                                    + "</span></td><td style='text-align:center; width: 22%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Deadline + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 29%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Reminder + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.DocketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center; width: 17%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Modules.Dockets.Details.Notes + "</span></td>";
                foreach (vw_Dockets docketSummary in docketsSummary)
                {
                    string docketNotes = docketSummary.Notes == null ? string.Empty : docketSummary.Notes;
                    string docketReminder = docketSummary.Reminder == null ? string.Empty : docketSummary.Reminder;
                    string docketSummaryActionStatusType = docketSummary.ActionStatusTypeID == null ? string.Empty : actionStatusTypes.Where(x => x.ID == docketSummary.ActionStatusTypeID.Value).FirstOrDefault().Name;
                    string docketSummaryStatusDate = docketSummary.StatusDate == null ? string.Empty : docketSummary.StatusDate.Value.ToString(dateFormat);
                    string docketDeadline = string.Empty;
                    if (docketSummary.DeadlineTypeID != null)
                    {
                        DeadlineType deadlineType = new DeadlineType();
                        deadlineType = deadlineTypes.Where(x => x.ID == docketSummary.DeadlineTypeID.Value).FirstOrDefault();
                        docketDeadline = deadlineType.Name;
                    }
                    string docketDueDate = docketSummary.DueDate == null ? string.Empty : docketSummary.DueDate.Value.ToString(dateFormat);
                    string docketManager = string.Empty;
                    if (docketSummary.ManagerID != null)
                    {
                        Manager manager = _commonService.GetManagerByManagerID(docketSummary.ManagerID.Value);

                        if (manager.Person != null)
                        {
                            docketManager = manager.Person.GetFullName();
                        }
                    }
                    activeDocketActions += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryActionStatusType + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketSummaryStatusDate + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketNotes + "</span></td></tr>";

                    activeDocketActionsShort += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDueDate
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketDeadline + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketReminder + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketManager + "</span></td>"
                                    + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + docketNotes + "</span></td></tr>";

                    if (docketSummary.ModuleTypeID != null && docketSummary.RecordID != null)
                    {
                        // Disputes
                        if (docketSummary.ModuleTypeID.Value == disputeModuleTypeID)
                        {
                            caseTitle = string.Empty;
                            caseTitle = _disputeService.GetDisputePartiesByID(docketSummary.RecordID.Value);

                            List<JournalEntriesToDispute> journalEntriesToDispute = _disputeService.GetJournalEntriesByDisputeID(docketSummary.RecordID.Value).ToList();

                            journalEntriesDisputes = "<table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Date
                                                + "</span></td><td style='width: 34%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Person
                                                + "</span></td><td style='width: 44%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Activity + "</span></td></tr>";


                            foreach (JournalEntriesToDispute journalEntryToDispute in journalEntriesToDispute)
                            {
                                string journalDateDispute = journalEntryToDispute.Date == null ? string.Empty : journalEntryToDispute.Date.Value.ToString(dateFormat);
                                string journalNameDispute = journalEntryToDispute.Person == null ? string.Empty : journalEntryToDispute.Person.GetFullName();
                                string journalActivityDispute = journalEntryToDispute.Activity == null ? string.Empty : journalEntryToDispute.Activity;

                                journalEntriesDisputes += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalDateDispute
                                            + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalNameDispute
                                            + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalActivityDispute + "</span></td></tr>";
                            }

                            journalEntriesDisputes += "</tbody></table>";
                        }
                        // Trademarks
                        else if (docketSummary.ModuleTypeID.Value == trademarkModuleTypeID)
                        {
                            Trademark trademark = _trademarkService.GetTrademarkRecordByID(docketSummary.RecordID.Value);
                            if (trademark != null)
                            {
                                // Registration Detail
                                string tmRegDetailsApplicationNumber = string.IsNullOrWhiteSpace(trademark.ApplicationNumber) ? string.Empty : trademark.ApplicationNumber;
                                string tmRegDetailsApplicationDate = trademark.ApplicationDate == null ? string.Empty : trademark.ApplicationDate.Value.ToString("MMM dd, yyyy");
                                string tmRegDetailsRegistrationNumber = string.IsNullOrWhiteSpace(trademark.RegistrationNumber) ? string.Empty : trademark.RegistrationNumber;
                                string tmRegDetailsRegistrationDate = trademark.RegistrationDate == null ? string.Empty : trademark.RegistrationDate.Value.ToString("MMM dd, yyyy");
                                string tmRegDetailsNextRenewalDate = trademark.NextRenewalDate == null ? string.Empty : trademark.NextRenewalDate.Value.ToString("MMM dd, yyyy");
                                string tmRegDetailsStatusCode = trademark.TrademarkStatusCode == null ? string.Empty : trademark.TrademarkStatusCode.Name;

                                // TM Registration Detail Table
                                tmRegistrationDetail = "<p></p><table border='1'><tbody><tr><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif; font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.ApplicationNumberToken
                                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.ApplicationDateToken
                                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RegistrationNumberToken
                                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RegistrationDateToken
                                                    + "</span></td><td style='text-align:center; width: 16%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.RenewalDueToken
                                                    + "</span></td><td style='text-align:center; width: 20%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.TrademarksModule.StatusToken + "</span></td></tr>";

                                tmRegistrationDetail += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsApplicationNumber
                                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsApplicationDate
                                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsRegistrationNumber
                                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsRegistrationDate
                                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsNextRenewalDate
                                             + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + tmRegDetailsStatusCode + "</span></td></tr>";

                                tmRegistrationDetail += "</tbody></table><p></p>";
                            }

                            
                            List<JournalEntriesToTrademark> journalEntrySummaries = _trademarkService.GetJournalEntriesByTrademarkID(docketSummary.RecordID.Value).OrderByDescending(x => x.Date).ToList();

                            journalEntriesTrademarks = "<p></p><table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Date
                                                + "</span></td><td style='width: 34%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Person
                                                + "</span></td><td style='width: 44%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.DisputesModule.Activity + "</span></td></tr>";

                            foreach (JournalEntriesToTrademark journalEntrySummary in journalEntrySummaries)
                            {
                                string journalDateTrademark = journalEntrySummary.Date == null ? string.Empty : journalEntrySummary.Date.Value.ToString(dateFormat);
                                string journalNameTrademark = journalEntrySummary.Person == null ? string.Empty : journalEntrySummary.Person.GetFullName();
                                string journalActivityTrademark = journalEntrySummary.Activity == null ? string.Empty : journalEntrySummary.Activity;

                                journalEntriesTrademarks += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalDateTrademark
                                            + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalNameTrademark
                                            + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + journalActivityTrademark + "</span></td></tr>";
                            }

                            journalEntriesTrademarks += "</tbody></table><p></p>";
                        }
                    }
                }

                activeDocketActions += "</tbody></table>";
                activeDocketActionsShort += "</tbody></table>";
            }

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace(activeDocketActionsTokenToReplace, activeDocketActions)
                                                          .Replace(activeDocketActionsShortTokenToReplace, activeDocketActionsShort)
                                                          .Replace(journalEntriesDisputesTokenToReplace, activeDocketActionsShort)
                                                          .Replace(journalEntriesTrademarksTokenToReplace, journalEntriesTrademarks)
                                                          .Replace(tmRegistrationDetailsTokenToReplace, tmRegistrationDetail)
                                                          .Replace(caseTitleTokenToReplace, caseTitle);
                    editedStrings.Add(filteredString);
                }
            }

            var tokenData = _docketService.GetDocketEmailTemplateTokenData(docketID);

            return _templateService.ReplaceTokens(editedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplaceDocumentTokens(List<string> stringsToFilter, Guid documentID, string environment)
        {
            var tokens = Resources.Templates.DocumentsModule.ResourceManager.GetTokens();

            var tokenData = _documentService.GetDocumentEmailTemplateTokenData(documentID);

            return _templateService.ReplaceTokens(stringsToFilter, tokens, tokenData, environment);
        }

        private List<string> ReplaceDomainNamesTokens(List<string> stringsToFilter, Guid domainNameID, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace("&amp;", "&")
                                                          .Replace("'", "&#39;");
                    tablesAddedStrings.Add(filteredString);
                }
            }

            var tokens = Resources.Templates.DomainNamesModule.ResourceManager.GetTokens();

            var tokenData = _domainNameService.GetDomainNameEmailTemplateTokenData(domainNameID);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }

        private List<string> ReplacePeopleTokens(List<string> stringsToFilter, Guid personID, string environment)
        {
            var tokens = Resources.Templates.PeopleModule.ResourceManager.GetTokens();

            var tokenData = _addressBookService.GetPeopleEmailTemplateTokenData(personID);

            return _templateService.ReplaceTokens(stringsToFilter, tokens, tokenData, environment);
        }

        private List<string> ReplaceCompanyTokens(List<string> stringsToFilter, Guid companyID, string environment)
        {
            List<string> replacedStrings = new List<string>();
            string dateFormat = UserContext.GetActiveUserData().OutputDateFormat;
            List<JournalEntriesToCompany> journalEntrySummaries = _addressBookService.GetJournalEntriesByCompanyID(companyID).OrderByDescending(x => x.Date).ToList();
            List<Person> personEntrySummaries = _addressBookService.GetPeopleByCompanyID(companyID).ToList();

            string journalEntries = string.Empty;
            string personEntries = string.Empty;
            if (journalEntrySummaries.Count() > 0)
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.JournalDate);
                sb.Append("</span></td><td style='width: 24%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.JournalPerson);
                sb.Append("</span></td><td style='width: 54%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.JournalActivity);
                sb.Append("</span></td></tr>");


                foreach (JournalEntriesToCompany journalEntrySummary in journalEntrySummaries)
                {
                    string journalDate = journalEntrySummary.Date == null ? string.Empty : journalEntrySummary.Date.Value.ToString(dateFormat);
                    string journalName = journalEntrySummary.Person == null ? string.Empty : journalEntrySummary.Person.GetFullName();
                    string journalActivity = journalEntrySummary.Activity == null ? string.Empty : journalEntrySummary.Activity;

                    sb.Append("<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(journalDate);
                    sb.Append("</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(journalName);
                    sb.Append("</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(journalActivity);
                    sb.Append("</span></td></tr>");
                }
                sb.Append("</tbody></table>");
                journalEntries = sb.ToString();
            }

            if (personEntrySummaries.Count() > 0)
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<table border='1'><tbody><tr><td style='width: 22%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleFirstName);
                sb.Append("</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleLastName);
                sb.Append("</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleEmail);
                sb.Append("</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleTelephone);
                sb.Append("</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleTitle);
                sb.Append("</span></td><td style='width: 20%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>");
                sb.Append(Resources.Templates.CompaniesModule.PeopleDepartment);
                sb.Append("</span></td></tr>");

                foreach (Person p in personEntrySummaries)
                {
                    string firstName = p.FirstName;
                    string lastName = p.LastName;
                    string WorkEmail = p.WorkEmail;
                    string WorkPhone = p.WorkPhone;
                    string PeopleTitle = p.PeopleTitle != null ? p.PeopleTitle.Name : string.Empty;
                    string PeopleDepartment = p.PeopleDepartment != null? p.PeopleDepartment.Name : string.Empty;

                    sb.Append("<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(firstName);
                    sb.Append("</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(lastName);
                    sb.Append("</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(WorkEmail);
                    sb.Append("</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(WorkPhone);
                    sb.Append("</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(PeopleTitle);
                    sb.Append("</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>");
                    sb.Append(PeopleDepartment);
                    sb.Append("</span></td></tr>");

                }
                sb.Append("</tbody></table>");
                personEntries = sb.ToString();
            }

            foreach (string stringToFilter in stringsToFilter)
            {
                string filteredString = stringToFilter;

                if (!string.IsNullOrWhiteSpace(filteredString) && filteredString.Contains("{"))
                {
                    filteredString = filteredString.Replace("{" + Resources.Templates.CompaniesModule.JournalEntriesToken + "}", journalEntries);
                    filteredString = filteredString.Replace("{" + Resources.Templates.CompaniesModule.PeopleToken + "}", personEntries);

                    //replacedStrings.Add(filteredString);
                }
                replacedStrings.Add(filteredString);
            }

            stringsToFilter = replacedStrings;

            var tokens = Resources.Templates.CompaniesModule.ResourceManager.GetTokens();

            var tokenData = _addressBookService.GetCompanyEmailTemplateTokenData(companyID);

            List<string> tokensReplacedList = _templateService.ReplaceTokens(stringsToFilter, tokens, tokenData, environment);

            if (tokensReplacedList[1] != null)
            {
                tokensReplacedList[1] = tokensReplacedList[1].Replace("Resources.Templates.CompaniesModule.CompanyNameToken", Resources.Templates.CompaniesModule.CompanyNameToken)
                                    .Replace("Resources.Templates.CompaniesModule.CountryToken", Resources.Templates.CompaniesModule.CountryToken)
                                    .Replace("Resources.Templates.CompaniesModule.PreferredLabel", Resources.Templates.CompaniesModule.PreferredLabel)
                                    .Replace("Resources.Templates.CompaniesModule.NotesToken", Resources.Templates.CompaniesModule.NotesToken)
                                    .Replace("<table>", "<table border='1'>");  // Allows user created tables to appear correctly
            }

            return tokensReplacedList;
        }

        public JsonResult GetEmailTemplatesByModuleTypeAndSectionName(Guid moduleTypeID, string sectionName, Guid? jurisdictionID)
        {
            LookupTable lookupTable = _lookupTableService.GetEmailTemplatesByTemplateSectionAndModuleTypeID(UserContext.GetActiveUserData().AccountID, moduleTypeID, sectionName, jurisdictionID);
            SelectList selectList = LookupTableHelper.ToSingleSelect(lookupTable, null, Resources.Templates.Details.BlankEmail);

            ViewBag.IsEmailTemplate = true;

            return Json(selectList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetDocumentTemplatesByModuleTypeAndSectionName(Guid moduleTypeID, string sectionName, Guid? jurisdictionID)
        {
            LookupTable lookupTable = _lookupTableService.GetDocumentTemplatesByTemplateSectionAndModuleTypeID(UserContext.GetActiveUserData().AccountID, moduleTypeID, sectionName, jurisdictionID);
            SelectList selectList = LookupTableHelper.ToSingleSelect(lookupTable, null, Resources.Templates.Details.BlankEmail);

            ViewBag.IsEmailTemplate = false;

            return Json(selectList, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetScheduledEmailTemplatesByModuleTypeID(Guid moduleTypeID)
        {
            LookupTable lookupTable = _lookupTableService.GetScheduledEmailTemplatesByModuleTypeID(UserContext.GetActiveUserData().AccountID, moduleTypeID);
            SelectList selectList = LookupTableHelper.ToSingleSelect(lookupTable, null, Resources.Templates.Details.BlankEmail);

            //ViewBag.IsEmailTemplate = false;

            return Json(selectList, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteTemplate([Bind(Prefix = "ID")] Guid ID)
        {
            _templateService.DeleteTemplateByID(ID);
            return RedirectToAction("Search", "Templates");
        }

        [HttpPost]
        public ActionResult SaveDocument(DetailsViewModel viewModel)
        {
            try
            {
                string fileName = "DetailReport.doc";

                viewModel.DocumentBody = "<html>" + "<head>" + @"<html xmlns:o='urn:schemas-microsoft-com:office:office' " +
                "xmlns:w='urn:schemas-microsoft-com:office:word'" +
                "xmlns='http://www.w3.org/TR/REC-html40'>"

                + "<!--[if gte mso 9]>" +
                "<xml>" +
                "<w:WordDocument>" +
                "<w:View>Print</w:View>" +
                "<w:Zoom>100</w:Zoom>" +
                "<w:DoNotOptimizeForBrowser/>" +
                "</w:WordDocument>" +
                "</xml>" +
                "<![endif]-->" +
                "<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">" +
                "<style type=\"text/css\">body {font-family: Verdana, Geneva, sans-serif;font-size:x-small;} @page Section1 {size:8.5in 11.0in; margin:1in 1in 1in 1in;} </style></head>" +
                "<body><div class='Section1'>" + HttpUtility.HtmlDecode(viewModel.DocumentBody) + "</div></body>" + "</html>";

                string strBody = viewModel.DocumentBody;

                Response.AppendHeader("Content-Type", Globals.FILE_CONTENT_DOC);

                Response.AppendHeader("Content-disposition", "attachment; filename=" + fileName);


                Response.Write(strBody);

                #region Potential Chrome/Safari fix
                Response.Flush();
                Response.End();
                Response.Close();
                #endregion Potential Chrome/Safari fix
            }
            catch (Exception ex)
            {

            }

            return Content(String.Empty);
        }

        public FileStreamResult GeneratePDF(DetailsViewModel viewModel)
        {
            string strFileName = string.Empty;
            string strTitle = "Trademark";

            MemoryStream output = new MemoryStream();
            try
            {

                MigraDoc.DocumentObjectModel.Document document = Globals.CreateNewPDFDocument(strTitle, Globals.TRADEMARKS_DOCUMENTS_REPORT_PDF, Globals.TM_CLOUD_COM);
                //define document styles
                Globals.DefineDocumentStylesPDF(document);
                //add section - similar to add page
                MigraDoc.DocumentObjectModel.Section section = document.AddSection();
                //add page numbers at the bottom of each page
                Globals.AddPageNumberPDF(section, strTitle);

                document.LastSection.AddParagraph(viewModel.DocumentBody);

                //render pdf doc   
                output = Globals.RenderPDFDocument(document);
                return File(output, Globals.FILE_CONTENT_PDF, strFileName);
            }
            catch (Exception ex)
            {

            }
            return File(output, Globals.FILE_CONTENT_PDF, strFileName);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SubmitTemplateForPreview(DetailsViewModel viewModel, string[] tsdrDocs)
        {
            try
            {
                if (viewModel.EmailTo != null)
                {

                    MailMessage email = GenerateEmail(viewModel.EmailTo, viewModel.EmailCc, viewModel.EmailBcc, viewModel.EmailSubject, viewModel.EmailBody);

                    // Attach Logo
                    if (viewModel.ModuleTypeID == _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TRADEMARK_PROFILES).ID)
                    {
                        if (!string.IsNullOrWhiteSpace(viewModel.ImageFileName))
                        {
                            var filePath = Url.Content("~/Files/TrademarkProfile/" + viewModel.ID);
                            var serverPath = Server.MapPath(filePath);
                            var imagePath = string.Concat(serverPath, "/", viewModel.ImageFileName);

                            if (System.IO.File.Exists(imagePath))
                            {
                                email.Attachments.Add(new Attachment(imagePath));
                            }
                        }
                        //viewModel.EmailBody = viewModel.EmailBody.Replace("{" + Resources.Templates.Details.LogoToken + "}", Resources.Templates.Details.AttachLogoLabel);
                    }

                    if (viewModel.AttachRegCertCheckbox && Session["RegistrationNumber"] != null)
                    {
                        var stream = new WebClient().OpenRead("https://tsdrapi.uspto.gov/ts/cd/casedocs/bundle.pdf?rn=" + Session["RegistrationNumber"] + "&category=RC");

                        email.Attachments.Add(new Attachment(stream, Resources.Modules.Trademarks.TrademarkDetails.RegistrationCertificate + ".pdf"));
                    }

					if (tsdrDocs != null)
					{
						AttachTsdrDocs(email, viewModel.ID, tsdrDocs);
					}

                    if (viewModel.AttachCurrentFile)
                    {
                        AttachFileToEmail(email, viewModel.CurrentFilePath);
                    }

                    if (viewModel.IsCopiedToDocs)
                    {
                        email.To.Add(new MailAddress("docs@tmcloud.com"));
                    }

                    if (!string.IsNullOrEmpty(viewModel.SelectedFilePaths))
                    {
                        string[] filePaths = viewModel.SelectedFilePaths.Split(',');
                        foreach (var path in filePaths)
                        {
                            AttachFileToEmail(email, path);
                        }
                    }

                    if (Request.Files != null && Request.Files.Count > 0)
                    {
                        AttachFilesToEmail(email, Request.Files);
                    }

                    if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                    {
                        AttachDocumentsToEmail(email);
                    }

                    if (viewModel.ReportColumnSelectionID.HasValue && viewModel.ReportColumnSelectionID != Guid.Empty)
                    {
                        AttachReportFile(email, viewModel);
                        SendReportEmail(email);
                    }
                    else
                    {
                        email.Body = email.Body.Replace("src=\"/Files/", "src=\"" + Session["Environment"] + "/Files/");
                        if (SendEmail(email))
                        {
                            // success
                            //clear any session values
                            Session[Globals.SESSION_DOCUMENT_ATTACHED] = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //clear any session values
                Session[Globals.SESSION_DOCUMENT_ATTACHED] = null;
            }

            return Json(new DataSourceResult());
        }

        private string CleanEmailToString(string originalEmailToString)
        {
            string emailToString = string.Empty;
            //trim the last comma
            if (originalEmailToString != "")
            {
                originalEmailToString = originalEmailToString.TrimEnd(' ').TrimEnd(',');
            }

            string[] emailAddresses = originalEmailToString.Split(',', ';');
            foreach (string emailAddress in emailAddresses)
            {
                string cleanEmailAddress = emailAddress;
                if (cleanEmailAddress.Contains("(") && cleanEmailAddress.Contains(")"))
                {
                    cleanEmailAddress = cleanEmailAddress.Substring(cleanEmailAddress.IndexOf("(") + 1);
                    cleanEmailAddress = cleanEmailAddress.Substring(0, cleanEmailAddress.IndexOf(")"));
                }
                cleanEmailAddress = cleanEmailAddress.Trim();
                emailToString = emailToString + ", " + cleanEmailAddress;
            }

            return emailToString.TrimStart(',').TrimEnd(',').Trim();
        }

        // Pass in fields of email, generate everything except attachments (module specific)
        [NonAction]
        private MailMessage GenerateEmail(string to, string cc, string bcc, string subject, string body)
        {
            var email = new MailMessage();

            if (!string.IsNullOrWhiteSpace(to))
            {
                to = CleanEmailToString(to);

                string[] toEmailAddresses = to.Split(new Char[] { ',', ';' });
                foreach (string toEmailAddress in toEmailAddresses)
                {
                    email.To.Add(new MailAddress(toEmailAddress.Trim()));
                }
            }
            if (!string.IsNullOrWhiteSpace(cc))
            {
                cc = CleanEmailToString(cc);

                string[] ccEmailAddresses = cc.Split(new Char[] { ',', ';' });
                foreach (string ccEmailAddress in ccEmailAddresses)
                {
                    email.CC.Add(new MailAddress(ccEmailAddress.Trim()));
                }

            }
            if (!string.IsNullOrWhiteSpace(bcc))
            {
                bcc = CleanEmailToString(bcc);

                string[] bccEmailAddresses = bcc.Split(new Char[] { ',', ';' });
                foreach (string bccEmailAddress in bccEmailAddresses)
                {
                    email.Bcc.Add(new MailAddress(bccEmailAddress.Trim()));
                }
            }

            string emailFrom = UserContext.GetActiveUserData().Email;
            if (string.IsNullOrWhiteSpace(emailFrom))
            {
                emailFrom = "emails@tmcloud.com";
            }

            email.From = new MailAddress(emailFrom);
            email.Subject = subject != null ? subject : string.Empty;

            if (!string.IsNullOrWhiteSpace(body))
            {
                email.Body = body.Replace("<table>", "<table border='1'>");
                email.Body = Server.HtmlDecode(body);
            }
            email.IsBodyHtml = true;
            email.BodyEncoding = Encoding.UTF8;

            _scheduledEmailsService.AddNewAdditionalEmails(UserContext.GetActiveUserData().AccountID, to + ", " + cc + ", " + bcc);

            return email;
        }

		void AttachTsdrDocs(MailMessage email, Guid trademarkID, string[] tsdrDocs)
		{
			if (tsdrDocs != null)
			{
				// get the list of documents that have already been downloaded
				Document[] downloadedDocuments = _trademarkService.GetDocumentByTrademarkID(trademarkID).ToArray();

				List<string> docsToDownload = new List<string>();
				 
				foreach (string tsdrDoc in tsdrDocs)
				{
					bool haveDocument = false;
					foreach (Document document in downloadedDocuments)
					{
						// TODO: check what is needed for a match
						if (tsdrDoc == document.Description)
						{
							string fullPath = document.FilePath + "/" + document.FileName;
							try
							{
								var fileServerPath = Server.MapPath(fullPath);
								if (System.IO.File.Exists(fileServerPath))
								{
									email.Attachments.Add(new Attachment(fileServerPath));
									haveDocument = true;
									break;
								}
							}
							catch (Exception ex)
							{
								// ignore and allow to be downloaded from TSDR
							}
						}
					}

					if (!haveDocument)
					{
						// have to download
						docsToDownload.Add(tsdrDoc);
					}
				}

				if (docsToDownload.Count > 0)
				{
					// there were some documents that we don't already have

					// we could save this list in the session in Trademarks/GetAvailableTsdrDocs()
					// but would have to validate that it was for this trademarkID 
					// or we could pass the url along with the description when populating the checkboxes
					Trademark trademark = _trademarkService.GetTrademarkByID(trademarkID);
					if (trademark != null)
					{
						string appNum = trademark.ApplicationNumber;

						IMqxService mqxService = MqxHelper.GetService();
						bool isRegNum = false;
						string type = "URLs";
						int oldCountryLawID = 668; // TODO: need to be defined somewhere

						GetDocumentsResult getDocResult = mqxService.GetDocuments(oldCountryLawID, appNum, isRegNum, type);
						if (getDocResult.Success)
						{
							foreach (string tsdrDoc in docsToDownload)
							{
								bool haveDocument = false;
								foreach (PtoDocument ptoDocument in getDocResult.Documents)
								{
									string ptoDocumentDescription = TrademarksController.GetDocumentDescription(ptoDocument);
									if (ptoDocumentDescription == tsdrDoc)
									{
										string extension;
										byte[] docData = MqxHelper.DownloadDocument(ptoDocument.Url, out extension);
										if (docData != null)
										{
											// this document should now be associated with the trademark
											string fileName; // = tsdrDoc + extension;
											SaveNewDocument(trademarkID, docData, trademark.ApplicationNumber, extension, ptoDocumentDescription, ptoDocument.Date, out fileName);

											// now attach to email
											Stream stream = new MemoryStream(docData);
											email.Attachments.Add(new Attachment(stream, fileName));
											haveDocument = true;
											break;
										}
									}
								}

								if (!haveDocument)
								{
									// TODO: document has disapeared since displaying list to user
								}
							}
						}
					}
				}
			}
		}

		// This is a copy of the document creation in TrademarksController.DownloadTsdr()
		// TODO: this should be implemented in the service layer, so both can use
		bool SaveNewDocument(Guid trademarkId, byte[] docData, string appNum, string extension, string description, string docDate, out string fileName)
		{
			Guid accountId = UserContext.GetActiveUserData().AccountID;
			string accountHolderCompanyIdString = _addressBookService.GetAccountHolderCompanyByAccountID(accountId).ID.ToString();

            Guid userID = UserContext.GetActiveUserData().UserID;
            string userString = UserContext.GetActiveUserData().FirstName + " " + UserContext.GetActiveUserData().LastName;

            string virtualPath = TrademarksController.VIRTUAL_PATH_DOCUMENTS + Globals.SLASH + accountHolderCompanyIdString;
			string Path = Server.MapPath(virtualPath);

			// Create directory if missing
			if (!Directory.Exists(Path))
			{
				Directory.CreateDirectory(Path);
			}

			string docNum = _documentService.GetNewDocumentID(accountId);

			System.IO.File.WriteAllBytes(Path + Globals.SLASH + docNum + "_" + appNum + extension, docData);

			Footer footerEntity = new Footer();
			footerEntity.ID = Guid.NewGuid();
			footerEntity.CreatedBy = userString;
			footerEntity.TimeCreated = DateTime.Now;
			footerEntity.ModuleTypeID = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_DOCUMENTS).ID;

			App_Data.Document documentEntity = new App_Data.Document();
			documentEntity.ID = Guid.NewGuid();
			documentEntity.ModuleID = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TRADEMARKS).ID;
			documentEntity.DocumentTypeID = _documentService.GetDocumentTypeByDocumentTypeNameAndAccountID(Globals.DOCUMENT_TYPE_TSDR_DOWNLOAD, accountId).ID;
			documentEntity.Description = description;
			documentEntity.DocumentNumberSeq = long.Parse(docNum);
			documentEntity.DocumentNumber = Globals.PREFIX_DOCUMENT + documentEntity.DocumentNumber;
			//documentEntity.ApplicantRegistrantID = docDetails.ApplicantRegistrantID;
			//documentEntity.ApplicantRegistrantName = docDetails.ApplicantRegistrantName;
			//documentEntity.ClientID = docDetails.ClientID;
			//documentEntity.ClientName = docDetails.ClientName;
			//documentEntity.ClientNumber = docDetails.ClientNumber;
			//documentEntity.GroupTypeID = docDetails.GroupTypeID;
			if (!string.IsNullOrWhiteSpace(docDate))
			{
				documentEntity.DocumentDate = DateTime.Parse(docDate);
			}
			//documentEntity.Author = docDetails.DocumentAuthor;
			documentEntity.KeyWords = description;
			//documentEntity.NotesInDocumentProfile = selectedDoc;
			documentEntity.DateUploaded = DateTime.Now;
			documentEntity.UploadedByUserID = userID;
			documentEntity.UploadedByPeopleID = UserContext.GetActiveUserData().PersonID;
			documentEntity.FilePath = virtualPath;
			documentEntity.FileName = docNum + "_" + appNum + extension;
			// return this to the caller
			fileName = documentEntity.FileName;
			//if (result.FileContents != null)
			//{
			//	documentEntity.FileSize = long.Parse(result.FileContents.Length.ToString());
			//}
			documentEntity.FileSize = docData.Length;
			//documentEntity.TrademarkText = docDetails.TrademarkText;
			//documentEntity.MatterNumber = docDetails.MatterNumber;
			//documentEntity.InternalDocumentID = docDetails.InternalDocumentId;
			//documentEntity.FileReference = docDetails.FileReference;
			documentEntity.IsPrivate = false;
			documentEntity.VisibleToClients = true;
			documentEntity.VisibleToAgents = true;
			documentEntity.AccountID = accountId;
			documentEntity.AttachDocWithRecord = false;
			documentEntity.Enabled = true;
			documentEntity.FooterID = footerEntity.ID;
			documentEntity.DeletedPermanently = false;
			documentEntity.IsArchived = false;

			DocumentsToTrademark docToTm = new DocumentsToTrademark();
			docToTm.ID = Guid.NewGuid();
			docToTm.DocumentID = documentEntity.ID;
			docToTm.TrademarkID = trademarkId;

			return _documentService.SaveNewDocument(footerEntity, documentEntity, docToTm, userID, userString);
		}

		[NonAction]
        private MailMessage AttachFileToEmail(MailMessage email, string filePath)
        {
            if (string.IsNullOrEmpty(filePath))
            {
                throw new ArgumentException("The file path is required to be able to find the file to attach to the email");
            }

            var fileServerPath = Server.MapPath(filePath);

            if (System.IO.File.Exists(fileServerPath))
            {
                email.Attachments.Add(new Attachment(fileServerPath));
            }

            return email;
        }

        [NonAction]
        private MailMessage AttachFilesToEmail(MailMessage email, HttpFileCollectionBase files)
        {
            if (files == null || files.Count < 1)
            {
                throw new ArgumentNullException("At least one file is required in order to attach them to the email.");
            }

            for (int i = 0; i < Request.Files.Count; i++)
            {
                HttpPostedFileBase file = Request.Files[i];

                email.Attachments.Add(new Attachment(file.InputStream, file.FileName));
            }

            return email;
        }

        [NonAction]
        private MailMessage AttachReportFile(MailMessage email, DetailsViewModel viewModel)
        {
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

            if (viewModel.ModuleTypeID == ModuleTypes.Docket.GetGuid() || viewModel.ModuleTypeID == ModuleTypes.Dashboard.GetGuid())
            {
                try
                {
                    var controller = new DocketsController();
                    controller.ControllerContext = this.ControllerContext;

                    var resultsViewModel = new ViewModels.Dockets.ResultsViewModel();
                    //resultsViewModel.ReportTypeRadio = Globals.REPORT_TYPE_RESULTS_TABLE;
                    resultsViewModel.SelectedReportType = Globals.REPORT_TYPE_RESULTS_TABLE;
                    resultsViewModel.FileTypeRadio = Globals.FILE_TYPE_EXCEL;
                    if (viewModel.SearchHistoryIDEmailExport.HasValue)
                    {
                        resultsViewModel.SearchHistoryIDExport = viewModel.SearchHistoryIDEmailExport;
                    }
                    if (viewModel.ReportColumnSelectionID.HasValue && viewModel.ReportColumnSelectionID != Guid.Empty)
                    {
                        IQueryable<ReportColumnSetting> columnSettings = _commonService.GetReportColumns(viewModel.ReportColumnSelectionID.Value);
                        List<string> list = new List<string>();
                        foreach (ReportColumnSetting columnSetting in columnSettings)
                        {
                            list.Add(columnSetting.ReportColumnName);
                        }
                        resultsViewModel.ReportColumnSettingsExport = string.Join(",", list);
                    }
                    resultsViewModel.SelectedDockets = viewModel.SelectedIDs;
                    resultsViewModel.TotalRecords = viewModel.TotalRecords;
                    resultsViewModel.ShowSearchCriteriaCheckBox = false;
                    var file = controller.Export(resultsViewModel) as FileStreamResult;
                    email.Attachments.Add(new Attachment(file.FileStream, Globals.EXPORT_FILE_DOCKETS + ".xlsx", MediaTypeNames.Application.Octet));
                }
                catch
                {
                    _logger.Debug(userName);
                    //Elmah.ErrorSignal.FromCurrentContext().Raise(userName + " " + ex);
                }
            }
            _logger.Info("Attached File Count: '{0}'", email.Attachments.Count());
            return email;
        }

        [NonAction]
        private bool SendEmail(MailMessage email)
        {
            try
            {
                var smtp = new SmtpClient();
                smtp = SmtpClient(smtp);
                smtp.Send(email);
                email.Dispose();
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        [NonAction]
        private bool SendReportEmail(MailMessage email)
        {
            try
            {
                var smtp = new SmtpClient();
                smtp = SmtpClient(smtp);
                smtp.Send(email);

                string usercontext = UserContext.GetActiveUserData().Email;
                email.To.Clear();
                //email.To.Add(new MailAddress("qadocs@tmcloud.com"));
                //email.To.Add(new MailAddress("docs@tmcloud.com"));
                email.CC.Clear();
                email.Bcc.Clear();
                SendEmail(email);

                email.Dispose();
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        private SmtpClient SmtpClient(SmtpClient smtp)
        {
            smtp.Host = ConfigurationManager.AppSettings["SMTPHost"];
            smtp.Port = Convert.ToInt16(ConfigurationManager.AppSettings["SMTPPort"]);
            smtp.EnableSsl = (ConfigurationManager.AppSettings["SMTPEnableSSL"].ToLower() == "true");
            if (ConfigurationManager.AppSettings["SMTPUser"] != string.Empty && ConfigurationManager.AppSettings["SMTPPass"] != string.Empty)
            {
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["SMTPUser"], ConfigurationManager.AppSettings["SMTPPass"]);
            }
            else
            {
                smtp.UseDefaultCredentials = true;
            }

            return smtp;
        }

        public ActionResult DeleteSavedColumnSelection(Guid selectionID)
        {
            Guid ModuleTypeID = _commonService.GetModuleTypeIDByModuleTypeName(Globals.MODULE_TYPE_TRADEMARKS).ID;
            _commonService.DeleteSavedColumnSelectionByID(UserContext.GetActiveUserData().AccountID, UserContext.GetActiveUserData().UserID, ModuleTypeID, selectionID);
            return Json(new { isValid = true }, JsonRequestBehavior.AllowGet);
        }
        private List<string> ReplaceAssignmentTokens(List<string> stringsToFilter, Guid AssignmentID, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();
            List<ViewModels.Assignments.DetailsViewModel.AssignedTrademarkWithLogoInfoSummary> assignedTrademarkSummaries = _assignmentService.GetAssignedTrademarksWithLogoInfoSummaryByAssignmentID(AssignmentID);
            var tokens = Resources.Templates.AssignmentsModule.ResourceManager.GetTokens();
            Assignment assignment = _assignmentService.GetAssignmentRecordByID(AssignmentID);

            string AssignedTrademarks = string.Empty;
            string AssignedTrademarksToReplace = "{" + Resources.Templates.AssignmentsModule.AssignedTrademarksTableToken.Replace("&", "&amp;") + "}";

            string tmAssignmentsSchedule = string.Empty;
            string tmAssignmentScheduleToReplace = "{" + Resources.Templates.AssignmentsModule.TmAssignmentScheduleToken.Replace("&", "&amp;") + "}";

            string tmAssignmentsScheduleNoImage = string.Empty;
            string tmAssignmentScheduleToReplaceNoImage = "{" + Resources.Templates.AssignmentsModule.TmAssignmentScheduleNoImageToken.Replace("&", "&amp;") + "}";

            string tmDateOfAssignmentLong = string.Empty;
            string tmDateOfAssignmentLongToReplace = "{" + Resources.Templates.AssignmentsModule.DateOfAssignmentLongToken.Replace("&", "&amp;") + "}";

            string tmEffectiveDateLong = string.Empty;
            string tmEffectiveDateLongToReplace = "{" + Resources.Templates.AssignmentsModule.EffectiveDateLongToken.Replace("&", "&amp;") + "}";

            string tmExecutionDateLong = string.Empty;
            string tmExecutionDateLongToReplace = "{" + Resources.Templates.AssignmentsModule.DateOfExecutionLongToken.Replace("&", "&amp;") + "}";

            int FileWidthSmall = 0;
            int FileHeightSmall = 0;

            if (assignment.AssignmentDate != null)
            {
                tmDateOfAssignmentLong = "the " + assignment.AssignmentDate.Value.Day.ToString() + _commonService.GetDaySuffix(assignment.AssignmentDate.Value.Day) + " day of " 
                                            + DateTimeFormatInfo.CurrentInfo.GetMonthName(assignment.AssignmentDate.Value.Month) + " " + +assignment.AssignmentDate.Value.Year;
            }

            if (assignment.EffectiveDate != null)
            {
                tmEffectiveDateLong = "the " + assignment.EffectiveDate.Value.Day.ToString() + _commonService.GetDaySuffix(assignment.EffectiveDate.Value.Day) + " day of "
                                            + DateTimeFormatInfo.CurrentInfo.GetMonthName(assignment.EffectiveDate.Value.Month) + " " + +assignment.EffectiveDate.Value.Year;
            }

            if (assignment.ExecutionDate != null)
            {
                tmExecutionDateLong = "the " + assignment.ExecutionDate.Value.Day.ToString() + _commonService.GetDaySuffix(assignment.ExecutionDate.Value.Day) + " day of "
                                            + DateTimeFormatInfo.CurrentInfo.GetMonthName(assignment.ExecutionDate.Value.Month) + " " + +assignment.ExecutionDate.Value.Year;
            }

            #region Tables
            // Assigned Trademarks
            if (assignedTrademarkSummaries.Count() > 0)
            {
                AssignedTrademarks = "<table border='1'><tbody><tr><td style='width: 48%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.RegistrationNumber
                                    + "</span></td><td style='width: 29%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.Classes + "</span></td></tr>";

                tmAssignmentsSchedule = "<table border='1'><tbody><tr><td style='width: 48%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.Image
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.RegistrationNumber
                                    + "</span></td><td style='width: 29%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.JurisdictionToken + "</span></td></tr>";

                tmAssignmentsScheduleNoImage = "<table border='1'><tbody><tr><td style='width: 36%; text-align:center;'><span style='text-align:center; font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.Trademark
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.ApplicationNumberToken
                                    + "</span></td><td style='width: 23%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.RegistrationNumber
                                    + "</span></td><td style='width: 41%; text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small; font-style: italic;'>" + Resources.Templates.AssignmentsModule.JurisdictionToken + "</span></td></tr>";

                foreach (ViewModels.Assignments.DetailsViewModel.AssignedTrademarkWithLogoInfoSummary assignedTrademarkSummary in assignedTrademarkSummaries)
                {
                    FileWidthSmall = 0;
                    FileHeightSmall = 0;
                    string logo = string.Empty;

                    if (!string.IsNullOrWhiteSpace(assignedTrademarkSummary.LogoName) && !string.IsNullOrWhiteSpace(assignedTrademarkSummary.LogoPath))
                    {
                        Globals.GetAdjustedFileSizes(Globals.FILE_DISPLAY_SMALL, assignedTrademarkSummary.LogoWidth, assignedTrademarkSummary.LogoHeight, ref FileWidthSmall, ref FileHeightSmall);
                        logo = "<img style='width:" + FileWidthSmall + "px; height:" + FileHeightSmall + "px;' src='" + environment + assignedTrademarkSummary.LogoPath + Globals.SLASH + assignedTrademarkSummary.LogoName + "'>";
                    }

                    AssignedTrademarks += "<tr><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.TrademarkProfileName
                                + "</span></td><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.RegistrationNumber
                                + "</span><td style='text-align:center;'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.Classes + "</span></td></tr>";

                    tmAssignmentsSchedule += "<tr><td style='text-align:center; width: 48%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.TrademarkProfileName
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + logo
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.RegistrationNumber
                                        + "</span></td><td style='text-align:center; width: 29%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.Jurisdiction + "</span></td></tr>";

                    tmAssignmentsScheduleNoImage += "<tr><td style='text-align:center; width: 36%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.TrademarkProfileName
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.ApplicationNumber
                                        + "</span></td><td style='text-align:center; width: 23%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.RegistrationNumber
                                        + "</span></td><td style='text-align:center; width: 41%'><span style='font-family:Verdana, Geneva, sans-serif;font-size:x-small;'>" + assignedTrademarkSummary.Jurisdiction + "</span></td></tr>";
                }
                AssignedTrademarks += "</tbody></table>";
                tmAssignmentsSchedule += "</tbody></table>";
                tmAssignmentsScheduleNoImage += "</tbody></table>";
            }

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    tablesAddedStrings.Add(stringToFilter.Replace(AssignedTrademarksToReplace, AssignedTrademarks).Replace(tmAssignmentScheduleToReplace, tmAssignmentsSchedule)
                                                            .Replace(tmAssignmentScheduleToReplaceNoImage, tmAssignmentsScheduleNoImage)
                                                            .Replace("&nbsp;", " ")
                                                            .Replace(tmDateOfAssignmentLongToReplace, tmDateOfAssignmentLong)
                                                            .Replace(tmEffectiveDateLongToReplace, tmEffectiveDateLong)
                                                            .Replace(tmExecutionDateLongToReplace, tmExecutionDateLong)
                                                            .Replace("{" + Resources.Templates.TrademarksModule.TodaysDateToken + "}", DateTime.Now.ToString("MMMM dd, yyyy")));
                }
            }
            #endregion Tables

            var tokenData = _assignmentService.GetAssignmentEmailTemplateTokenData(AssignmentID);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }
        private List<string> ReplacePatentTokens(List<string> stringsToFilter, Guid patentID, string environment)
        {
            List<string> tablesAddedStrings = new List<string>();

            foreach (string stringToFilter in stringsToFilter)
            {
                if (stringToFilter != null)
                {
                    string filteredString = stringToFilter.Replace("&amp;", "&")
                                                          .Replace("'", "&#39;");
                    tablesAddedStrings.Add(filteredString);
                }
            }

            var tokens = Resources.Templates.PatentModule.ResourceManager.GetTokens();

            var tokenData = _patentService.GetPatentEmailTemplateTokenData(patentID);

            tablesAddedStrings = _patentService.ReplaceDrawingTokens(patentID, tablesAddedStrings);

            return _templateService.ReplaceTokens(tablesAddedStrings, tokens, tokenData, environment);
        }
        public ActionResult SearchDocuments_Read(string FileReference, string MatterNumber, string FileName, string DocumentTypes, string Description, string DocumentDateFrom, string DocumentDateTo, 
            string UploadedDateFrom, string UploadDateTo)
        {
            DocumentSearchCriteria searchCriteria = new DocumentSearchCriteria();
            searchCriteria.FileReference = new SearchText(FileReference);
            searchCriteria.MatterNumber = new SearchText(MatterNumber);
            searchCriteria.FileName = new SearchText(FileName);
            if (DocumentTypes != "")
            {
                List<Guid> DocumentTypeList = new List<Guid>();
                Array arrDocumentType = DocumentTypes.Split(',');
                foreach (string doctype in arrDocumentType)
                {
                    DocumentTypeList.Add(Guid.Parse(doctype));
                }
                searchCriteria.TypeOfDocument = new SearchMultiSelect(DocumentTypeList);
            }
            searchCriteria.DescriptionOfDocument = new SearchText(Description);
            if (DocumentDateFrom != "")
            {
                searchCriteria.DateOfDocumentFrom = new SearchDate(DocumentDateFrom);
            }
            if (DocumentDateTo != "")
            {
                searchCriteria.DateOfDocumentTo = new SearchDate(DocumentDateTo);
            }
            if (UploadedDateFrom != "")
            {
                searchCriteria.DateUploadedFrom = new SearchDate(UploadedDateFrom);
            }
            if (UploadDateTo != "")
            {
                searchCriteria.DateUploadedTo = new SearchDate(UploadDateTo);
            }

            IQueryable<Document> Documents = _documentService.GetDocuments(searchCriteria);
            List<TMCloud.ViewModels.Templates.DetailsViewModel.DocumentQuickSearchResultsSummary> docSummaries = new List<TMCloud.ViewModels.Templates.DetailsViewModel.DocumentQuickSearchResultsSummary>();
            foreach (Document doc in Documents)
            {
                TMCloud.ViewModels.Templates.DetailsViewModel.DocumentQuickSearchResultsSummary docSummary = new TMCloud.ViewModels.Templates.DetailsViewModel.DocumentQuickSearchResultsSummary();
                docSummary.DocumentQuickSearchID = doc.ID;
                docSummary.DocumentQuickSearchFileReference = doc.FileReference;
                docSummary.DocumentQuickSearchMatterNumber = doc.MatterNumber;
                docSummary.DocumentQuickSearchFileName = doc.FileName;
                docSummary.DocumentQuickSearchFilePath = doc.FilePath + Globals.SLASH + doc.FileName;
                if (doc.DocumentTypeID.HasValue && doc.DocumentTypeID != null)
                {
                    docSummary.DocumentQuickSearchDocumentTypeName = doc.DocumentType.Name;
                }
                docSummary.DocumentQuickSearchDescription = doc.Description;
                if (doc.DocumentDate.HasValue && doc.DocumentDate != null)
                {
                    docSummary.DocumentQuickSearchDocumentDate = doc.DocumentDate.Value.ToString(UserContext.GetActiveUserData().OutputDateFormat);
                }
                if (doc.DateUploaded.HasValue && doc.DateUploaded != null)
                {
                    docSummary.DocumentQuickSearchUploadDate = doc.DateUploaded.Value.ToString(UserContext.GetActiveUserData().OutputDateFormat);
                }
                docSummaries.Add(docSummary);
            }
            return Json(docSummaries, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddDocumentsToAttachIntoSession(string SelectedDocumentIDs)
        {
            List<DetailsViewModel.AttachDocumentsSummary> summaries = null;
            if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                summaries = Session[Globals.SESSION_DOCUMENT_ATTACHED] as List<DetailsViewModel.AttachDocumentsSummary>;
            else
                summaries = new List<DetailsViewModel.AttachDocumentsSummary>();
            if (SelectedDocumentIDs != null && SelectedDocumentIDs != "")
            {
                string[] arrRecordID = SelectedDocumentIDs.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string strID in arrRecordID)
                {
                    DetailsViewModel.AttachDocumentsSummary summary = new DetailsViewModel.AttachDocumentsSummary();
                    summary.AttachDocumentID = Guid.NewGuid();
                    summary.AttachDocumentRecordID = Guid.Parse(strID);
                    Document doc = _documentService.GetDocument(summary.AttachDocumentRecordID);
                    if(doc != null)
                    {
                        if (doc.DocumentType != null)
                            summary.AttachDocumentDocumentTypeName = doc.DocumentType.Name;
                        summary.AttachDocumentFileName = doc.FileName;
                        summary.AttachDocumentFilePath = doc.FilePath + Globals.SLASH + doc.FileName;
                        summary.AttachDocumentDescription = doc.Description;
                        if (doc.DocumentDate.HasValue && doc.DocumentDate != null)
                        {
                            summary.AttachDocumentDateOfDocument = doc.DocumentDate.Value;
                        }
                    }
                    summaries.Add(summary);
                }
                //add the summaries list into session
                Session[Globals.SESSION_DOCUMENT_ATTACHED] = summaries;
            }
            return Json(new { isValid = true }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AttachDocuments_Read([DataSourceRequest] DataSourceRequest request)
        {
            IDataSourceRequest dataSourceRequest = new DataSourceRequestWrapper(request);
            List<DetailsViewModel.AttachDocumentsSummary> documents = null;
            if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                documents = Session[Globals.SESSION_DOCUMENT_ATTACHED] as List<DetailsViewModel.AttachDocumentsSummary>;
            else
                documents = new List<DetailsViewModel.AttachDocumentsSummary>();
            return Json(documents.ToDataSourceResult(request));
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AttachDocuments_Delete([DataSourceRequest] DataSourceRequest request, DetailsViewModel.AttachDocumentsSummary documentSummary)
        {
            if (documentSummary.AttachDocumentID != Guid.Empty)
            {
                if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                {
                    List<DetailsViewModel.AttachDocumentsSummary> documents = Session[Globals.SESSION_DOCUMENT_ATTACHED] as List<DetailsViewModel.AttachDocumentsSummary>;
                    DetailsViewModel.AttachDocumentsSummary docToRemove = documents.Where(m => m.AttachDocumentID == documentSummary.AttachDocumentID).FirstOrDefault();
                    documents.Remove(docToRemove);
                    //add the documents list into session
                    Session[Globals.SESSION_DOCUMENT_ATTACHED] = documents;
                }
            }
            List<DetailsViewModel.AttachDocumentsSummary> docs = new List<DetailsViewModel.AttachDocumentsSummary>();
            docs.Add(documentSummary);
            return Json(docs.ToDataSourceResult(request, ModelState));
        }
        public ActionResult ClearTemplateSessionValues()
        {
            if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                Session[Globals.SESSION_DOCUMENT_ATTACHED] = null;
            return Json(new { isValid = true }, JsonRequestBehavior.AllowGet);
        }
        [NonAction]
        private MailMessage AttachDocumentsToEmail(MailMessage email)
        {
            List<DetailsViewModel.AttachDocumentsSummary> documents = null;
            if (Session[Globals.SESSION_DOCUMENT_ATTACHED] != null)
                documents = Session[Globals.SESSION_DOCUMENT_ATTACHED] as List<DetailsViewModel.AttachDocumentsSummary>;
            foreach (DetailsViewModel.AttachDocumentsSummary doc in documents)
            {
                var serverDocPath = Server.MapPath(doc.AttachDocumentFilePath);
                if (System.IO.File.Exists(serverDocPath))
                {
                    email.Attachments.Add(new Attachment(serverDocPath));
                }
            }
            return email;
        }
    }
}

// View page code

<%@ Page Language="C#" MasterPageFile="~/Views/Shared/SiteFluid.Master" Inherits="ViewPage<TMCloud.ViewModels.Templates.DetailsViewModel>" %>

<asp:Content ID="TitleContent" ContentPlaceHolderID="TitleContent" runat="server">
    <%:Resources.Templates.Details.HeaderLabel %>
</asp:Content>

<asp:Content ID="MainContent" ContentPlaceHolderID="MainContent" runat="server">

    <style>
        .k-editor {
            width: 234px;
            background-color: transparent;
            padding: 0 0 0 0;
            height: 25px;
            margin: 0;
            border-width: 0;
            background: none;
        }

        .k-editor-inline {
            margin: 0;
            padding: 21px 21px 11px;
            border-width: 0;
            box-shadow: none;
            background: none;
        }

            .k-editor-inline.k-state-active {
                border-width: 1px;
                padding: 20px 20px 10px;
                background: none;
            }

        /* Removes extra padding on icon buttons */
        .k-edit, .k-delete, .k-update, .k-cancel {
            margin-right: 1px !important;
            margin-left: 4px !important;
        }
        /* Reduces button width for icon only buttons*/
        .k-grid tbody .k-button {
            min-width: 0;
        }

        #subject {
            width: 100%;
        }

        .overlay {
            background-color: white;
            opacity: 0;
            border: 0;
            margin: 0;
            padding: 0;
            display: inline-block;
            vertical-align: top;
            position: absolute;
            z-index: 10;
        }

        #editorOverlay {
        }

        #subjectOverlay {
            font: -webkit-small-control;
            font-size: 90%;
            padding: 1px 0px;
        }

        #editor {
          height: 500px;
          width: 100%;
        }

    </style>
<%--    <script src="<%= Url.Content("~/Scripts/ckeditor/ckeditor.js") %>"></script>--%>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script type="text/javascript">
        var helpWindow;

        /* Prevents lists in editable dropdowns/popups from caching */
        $.ajaxSetup({ cache: false });

        $(document).ready(function () {
            document.getElementById("ButtonsBarDiv").style.display = 'inline';
            $("#ButtonsPlaceholderDiv").html($("#ButtonsDiv").html());

            helpWindow = new HelpWindow({
            	title: '<%: Resources.Common.Common.Help%>'
            });

            <% if (Model.ModuleTypeID.ToString() == "4edd0d14-9b49-4755-beb7-c258fa8e86b5")
               {  %>
            document.getElementById("TrademarkStatusLabelDiv").removeAttribute('style');
            document.getElementById("TrademarkStatusSelectDiv").removeAttribute('style');
            <% } %>

            // Only show Subject if an Email
            <% if (Model.TemplateTypeID.ToString() == "1d866bd5-c419-e411-80ca-005056b31bc3")
               {  %>
            document.getElementById("SubjectDiv").removeAttribute('style');
            <% } %>

            <% if (Model.IsNew == false)
               { %>
            showSelectedModuleInfo();
            <%  } %>

            <% if (ViewBag.ReadOnly == true){%>
                document.getElementById("SaveButtonTop").style.display = 'none';
                <% if ((Model.OwnerAccountID != Guid.Empty && Model.OwnerAccountID == TMCloud.Classes.UserContext.GetActiveUserData().AccountID) 
                                            || (Model.OwnerAccountID == Guid.Empty && TMCloud.Classes.UserContext.GetActiveUserData().AccountID == TMCloud.Globals.SUPERADMIN_GUID)){%>
                    document.getElementById("EditButton").style.display = 'inline';
                <% }else{ %>
                    document.getElementById("EditButton").style.display = 'none';
                <% } %>
            <% }else{ %>
                document.getElementById("SaveButtonTop").style.display = 'inline';
                document.getElementById("EditButton").style.display = 'none';
            <% } %>

            <% if (Model.IsBeingCopied)
               { %>
            $("#CopiedRecordDiv").show();
            <%}
               else
               {%>
            $("#CopiedRecordDiv").hide();
            <% } %>


        });

        //var editorId = "#editor"
        //setTimeout(() => {
        //    var container = document.getElementById(editorId);
        //    var editor = new Quill(container);
        //}, 3000);

        function onDeleteRecord() {
            if (confirm("<%:Resources.Templates.Details.DeleteConfirm %>")) {
                var TemplateID = $('#ID').val();
                var actionUrl = tmCloudUrlHelper.GetUrl('DeleteTemplate', 'Templates', TemplateID);
                GoToUrl(actionUrl);
            }
        }

        $(document).ready(function () {
            $("#treeView").kendoTreeView();
        });

        function RetrieveEditorText() {
            if ($("#TemplateTypeID").val() == null || $("#TemplateTypeID").val() == "" || $("#TemplateTypeID").val() == "<%: Guid.Empty %>") {
                alert("<%: Resources.Templates.Details.ErrorTemplateTypeMissing %>");
                return false;
            }
            else if ($("#Title").val() == null || $("#Title").val() == "") {
                alert("<%: Resources.Templates.Details.ErrorTitleMissing %>");
                return false;
            }
            else if ($("#ModuleTypeID").val() == null || $("#ModuleTypeID").val() == "" || $("#ModuleTypeID").val() == "<%: Guid.Empty %>") {
                alert("<%: Resources.Templates.Details.ErrorModuleMissing %>");
                return false;
            }

            var multiselectJurisdiction = $("#JurisdictionMultiDropDown").data("kendoMultiSelect");
            // get the value of the multiselect.
            var valueJurisdiction = multiselectJurisdiction.value();
            $('#JurisdictionIDs').val(valueJurisdiction);


            //var body = $("#EmailBody").data("kendoEditor");

            //$('#EmailBodyString').val(body.value());
            //$('#EmailBodyString').val(CKEDITOR.instances.EmailBody.getData());
            $('#EmailBodyString').val(quill.container.firstChild.innerHTML);

            //var json = JSON.stringify$('#EmailSubjectString').val($('#EmailSubject').val(quill.container.firstChild.innerHTML));
            //var obj = JSON.parse(json);
            $('#EmailSubjectString').val($('#EmailSubject').val());

            $('#TemplateForm').submit();
        }

        function CopyTemplate() {
            $('#IsBeingCopied').val(true);

            $('#TemplateForm').submit();
        }

    </script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <div id="loading">
        <div id="loadingcontent">
            <p id="loadingspinner" style="color: white;">
                <%: Resources.Common.Common.ProcessingLabel %>
            </p>
        </div>
    </div>
    <div style="display: none;">
        <div id="ButtonsDiv" class="prefix_1 grid_29 alpha no-print" style="padding-left: 5px; color: white !important;">
            <div class="floatRight" style="padding-right: 10px;">
                <span class="floatRight left5">
                    <a class="k-button k-button-icontext padBottom5">
                        <img id="PrintButton" height="15" onclick="window.print();" title="<%:Resources.Modules.Trademarks.TrademarkDetails.Print %>" class="CursorPointer" src="<%: Url.Content("~/Images/Icons/printer2.png") %>" />
                    </a>
                </span>
                <span class="floatRight left15">
                    <a id="helpButton" class="k-button k-button-icontext login-window helpButton padBottom5">
                        <img id="HelpImage" height="15" class="CursorPointer" src="<%: Url.Content("~/Images/Icons/help2.png") %>" />
                    </a>
                </span>
                <% if (!Model.IsNew){ %>
                    <span class="floatRight" style="margin-top: 3px;">
                        <a href="javascript:CopyTemplate()" class="left5"><%: Resources.Templates.Details.CopyTemplateButton %></a>
                    </span>
                <%} %>
                <% if (Model.IsNew == false){%>
                    <span class="floatRight bold" style="margin-top: 3px;">
                        <a href="<%: Url.Action("New", "Templates", new {area=""}) %>" class="left5"><%: Resources.Templates.Search.AddANewRecordButton %></a> |  
                    </span>
                <% } %>
            </div>
        </div>
    </div>
	<div style="display:none">
		<div id="helpWindow">
			<%: Html.Partial ("../Common/_DetailsHelpPartial") %>
		</div>
	</div>
    <div class="pad30"></div>
    <div class="grid_29 alpha omega">
        <div class="pad5"></div>
        <% using (Html.BeginForm(Model.ActionPrefix + "UpdateSubmit", "Templates", FormMethod.Post, new { id = "TemplateForm" }))
           { %>
        <%: Html.AntiForgeryToken() %>
        <%: Html.HiddenFor(m => m.ID) %>
        <%: Html.HiddenFor(m => m.IsNew) %>
        <%: Html.HiddenFor(m => m.IsBeingCopied) %>
        <%: Html.HiddenFor(m => m.EmailBodyString) %>
        <%: Html.HiddenFor(m => m.EmailSubjectString) %>
        <%: Html.HiddenFor(m => m.JurisdictionIDs) %>
        <%: Html.HiddenFor(m => m.OwnerAccountID) %>

        <div class="prefix_1 grid_29 alpha no-print" style="padding-left: 5px;">
            <div class="floatLeft" style="padding-left: 5px; padding-top: 5px">
                <table style="width: 100%">
                    <tr>
                        <td>
                            <a href="javascript:history.back()">
                                <div class="BlueButton" style="width: 50px" id="back">
                                    <div class="inline">
                                        <img src="<%: Url.Content("~/Images/Icons/back_blue.png") %>" style="width: 13px; height: 13px; margin-bottom: -2px;" />
                                    </div>
                                    <div class="inline">
                                        <%: Resources.Templates.Details.BackButton %>
                                    </div>
                                </div>
                            </a>
                        </td>
                        <td>
                            <%: Html.ActionLink(Resources.Templates.Details.EditButton, Model.ActionPrefix + "Edit", "Templates", new{ ID = Model.ID }, new {@class="editButton", id="EditButton"}) %>
                            <input id="SaveButtonTop" onclick="RetrieveEditorText()" type="button" value="<%: Resources.Templates.Details.SaveButton %>" class="BlueButton" />
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="prefix_1 grid_27 alpha omega">
            <div id="CopiedRecordDiv" class="textCenter" style="display: none;">
                <div class="pad5">
                </div>
                <div class="Rounded" style="color: #29537C; background-color: #CFE2FF; border: 1px solid #6BA6EB">
                    <div class="insidePadding">
                        <div>
                            <span><%: Html.LabelFor(m=>m.CopiedTemplateLabel, new{@class="formLabel"})%></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="clear">
        </div>
        <div class="prefix_1 grid_27 alpha omega">
            <% if (Model != null && !string.IsNullOrEmpty(Model.ErrorNotification))
               { %>
            <div class="Rounded" style="background-color: #FEFED4; border: 1px solid #FFFF33; text-align: center">
                <div class="insidePadding">
                    <p>
                        <img id="WarningSign" src="<%: Url.Content("~/Images/Icons/warning.png") %>" />
                        <%: Model.ErrorNotification %>
                    </p>
                </div>
            </div>
            <% } %>
        </div>
        <div class="clear">
        </div>
        <div class="prefix_1 grid_27 alpha omega">
            <% if (Model != null && !string.IsNullOrEmpty(Model.SuccessNotification))
               { %>
            <div class="Rounded" style="background-color: #FEFED4; border: 1px solid #FFFF33; text-align: center">
                <p>
                    <%: Model.SuccessNotification %>
                </p>
            </div>
            <% } %>
        </div>
        <div class="pad20">
        </div>
        <div class="grid_23 textCenter">
            <div class="grid_6 alpha textRight">
                *<%: Html.LabelFor(m=>m.TemplateTypesLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.TemplateTypesTooltip})%>
            </div>
            <div class="grid_7 lineHeight22 textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%= Html.Kendo().DropDownListFor(m => m.TemplateTypeID)
                                .Name("TemplateTypeID")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .HtmlAttributes(new { style = "width: 100%" })
                                .BindTo(Model.TemplatesList)
                                .Value(Model.TemplateTypeID.ToString())
                %>
                <%}
                   else
                   { %>
                <%if (!string.IsNullOrWhiteSpace(Model.TemplateTypeName))
                  { %><a class="lineHeight22 Gray14" style="display: inline; width: 244px; font-size: 14px;"><%: Model.TemplateTypeName %></a><%}
                  else
                  { %>&nbsp;<%} %>
                <% } %>
            </div>
            <% if (!Model.IsNew)
               {%>
            <div class="grid_6 textRight">
                <%: Html.LabelFor(m=>m.TemplateIDLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.TemplateIDTooltip})%>
            </div>
            <div class="grid_7 omega lineHeight22 textLeft">
                <span class="Gray14">
                    <%: Model.TemplateID %>
                </span>
            </div>
            <%}%>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                *<%: Html.LabelFor(m=>m.TitleLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.TitleTooltip})%>
            </div>
            <div class="grid_7 lineHeight22 textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%: Html.TextBoxFor(m=>m.Title, new {@class="k-input k-textbox k-input-solid k-input-md k-rounded-md", @style="width:230px; font-size:12px"}) %>
                <% }
                   else
                   { %>
                <span class="Gray14">
                    <%if (!string.IsNullOrWhiteSpace(Model.Title))
                      { %><%: Model.Title %><%}
                      else
                      { %>&nbsp;<%} %></span>
                <% } %>
            </div>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                <%: Html.LabelFor(m=>m.DescriptionLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.DescriptionTooltip})%>
            </div>
            <div class="grid_17 omega lineHeight22 textLeft">
                <span class="Gray14">
                    <% if (ViewBag.ReadOnly == false)
                       {%>
                    <%: Html.TextBoxFor(m=>m.Description, new {@class="k-input k-textbox k-input-solid k-input-md k-rounded-md", @style="width:100%; font-size:12px"}) %>
                    <% }
                       else
                       { %>
                    <span class="Gray14">
                        <%if (!string.IsNullOrWhiteSpace(Model.Description))
                          { %><%: Model.Description %><%}
                          else
                          { %>&nbsp;<%} %></span>
                    <% } %>
                </span>
            </div>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                *<%: Html.LabelFor(m=>m.ModuleLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.ModuleTooltip})%>
            </div>
            <div class="grid_7 lineHeight22 textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%= Html.Kendo().DropDownListFor(m => m.ModuleTypeID)
                            .Name("ModuleTypeID")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .HtmlAttributes(new { style = "width: 100%" })
                            .BindTo(Model.ModuleTypesList)
                            .Value(Model.ModuleTypeID.ToString())
                %>
                <%}
                   else
                   { %>
                <%if (!string.IsNullOrWhiteSpace(Model.ModuleTypeName))
                  { %><a class="lineHeight22 Gray14" style="display: inline; width: 244px; font-size: 14px;"><%: Model.ModuleTypeName %></a><%}
                  else
                  { %>&nbsp;<%} %>
                <% } %>
            </div>
            <% if (Model.IsNew == false)
               {%>
            <div class="grid_6 textRight">
                <%: Html.LabelFor(m=>m.DateCreatedLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.DateTooltip})%>
            </div>
            <div class="grid_7 omega lineHeight22 textLeft">
                <span class="Gray14">
                    <%if (!string.IsNullOrWhiteSpace(Model.DateCreatedText))
                      { %><%: Model.DateCreatedText %><%}
                      else
                      { %>&nbsp;<%} %></span>
            </div>
            <%} %>
<%--            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                <%: Html.LabelFor(m=>m.SectionLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.SectionTooltip})%>
            </div>
            <div class="grid_7 lineHeight22 textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%= Html.Kendo().DropDownListFor(m => m.TemplateSectionID)
                            .Name("TemplateSectionID")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .HtmlAttributes(new { style = "width: 100%" })
                            .Value(Model.TemplateSectionID.ToString())
                            .DataSource(source => {
                                source.Read(read =>
                                {
                                    read.Action("GetCascadeTemplateSections", "Templates")
                                        .Data("filterSections");
                                })
                                .ServerFiltering(true);
                            })
                            .Enable(false)
                            .AutoBind(false)
                            .CascadeFrom("ModuleTypeID")
                %>
                <script>
                    function filterSections() {
                        return {
                            moduleTypeIDString: $("#ModuleTypeID").val()
                        };
                    }
                </script>
                <%}
                   else
                   { %>
                <%if (!string.IsNullOrWhiteSpace(Model.TemplateSectionName))
                  { %><a class="lineHeight22 Gray14" style="display: inline; width: 244px; font-size: 14px;"><%: Model.TemplateSectionName %></a><%}
                  else
                  { %>&nbsp;<%} %>
                <% } %>
            </div>--%>
            <% if (Model.IsNew == false)
               {%>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                <%: Html.LabelFor(m=>m.CreatedByLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.CreatedByTooltip})%>
            </div>
            <div class="grid_7 omega lineHeight22 textLeft" style="color: #808080; font-size: 14px;">
                <%: Model.CreatedBy %>
            </div>
            <%} %>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                <%: Html.LabelFor(m=>m.JurisdictionLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.JurisdictionTooltip})%>
            </div>
            <div class="grid_7 lineHeight22 textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                        <%= Html.Kendo().MultiSelect()
                            .Name("JurisdictionMultiDropDown")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .Filter("startswith")
                            .DataSource(source =>
				            {
					            source.Read(read =>
					            {
                                    read.Action("MultiSelect", "TableData", new { area = "", id = "CountryLawJurisdictionsTable" });
					            })
					            .ServerFiltering(false);
				            })
				            .HtmlAttributes(new { style = "width: 100%" })
                        %>
                <%}
                   else
                   { %>
                <%if (!string.IsNullOrWhiteSpace(Model.JurisdictionNames))
                  { %><a class="lineHeight22 Gray14" style="display: inline; width: 244px; font-size: 14px;"><%: Model.JurisdictionNames %></a><%}
                  else
                  { %>&nbsp;<%} %>
                <% } %>
            </div>
            <div id="TrademarkStatusLabelDiv" class="grid_6 textRight" style="visibility: hidden;">
                <%: Html.LabelFor(m=>m.TrademarkStatusLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.TrademarkStatusTooltip})%>
            </div>
            <div id="TrademarkStatusSelectDiv" class="grid_7 omega lineHeight22 textLeft" style="visibility: hidden;">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%= Html.Kendo().DropDownListFor(m => m.TrademarkStatusCodeID)
                                .Name("TrademarkStatusCodeID")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .HtmlAttributes(new { style = "width: 100%" })
                                .BindTo(Model.TrademarkStatusCodeList)
                                .Value(Model.TrademarkStatusCodeID.ToString())
                %>
                <%}
                   else
                   { %>
                <%if (!string.IsNullOrWhiteSpace(Model.TrademarkStatusCodeName))
                  { %><a class="lineHeight22 Gray14" style="display: inline; width: 244px; font-size: 14px;"><%: Model.TrademarkStatusCodeName %></a><%}
                  else
                  { %>&nbsp;<%} %>
                <% } %>
            </div>
            <div class="pad5">
            </div>
            <div class="grid_6 alpha textRight">
                <%: Html.LabelFor(m=>m.NotesLabel, new{@class="formLabel lineHeight22", @title=Resources.Templates.Details.NotesTooltip})%>
            </div>
            <div class="grid_17 omega textLeft">
                <% if (ViewBag.ReadOnly == false)
                   {%>
                <%: Html.TextBoxFor(m=>m.Notes, new {@class="k-input k-textbox k-input-solid k-input-md k-rounded-md", @style="width:100%; font-size:12px"}) %>
                <%--                <% Html.Kendo().EditorFor(m => m.Notes)
                    .Name("Notes")
                    .HtmlAttributes(new { style = "height: 50px; line-height:20px;" })
                    .Value(Model.Notes)
                    .Tools(tools => tools.ViewHtml())
                    .Encode(false)
                    .Render();
                %>--%>
                <%}
                   else
                   { %>
                <span style="color: #808080; font-size: 14px">
                    <span class="pad2"></span>
                    <%: Html.Raw(Model.Notes) %>
                </span>
                <% } %>
            </div>
        </div>
    </div>

    <% } //end of form %>

    <div class="pad20">
    </div>
    <div id="SubjectDiv" style="display: none;">
        <% if (ViewBag.ReadOnly)
           {%>
        <div class="prefix_1 grid_27 alpha omega">
            <span style="color: #808080; font-size: 14px">
                <span class="pad2"></span>
                <%: Html.Raw(Model.EmailSubject) %>
            </span>
        </div>
        <%}
           else
           {%>
        <div class="prefix_1 grid_19 alpha">
            <div id="subjectWrapper"></div>
            <%: Html.TextBoxFor(m=>m.EmailSubject, new {@id = "EmailSubject", @class="k-input k-textbox k-input-solid k-input-md k-rounded-md", @style="width: 100%; font-size:12px", placeholder = Resources.Templates.Details.SubjectLabel}) %>
        </div>

        <%}%>
    </div>
    <div class="pad5">
    </div>
<%--       <div id="editor"></div>--%>
    <% if (ViewBag.ReadOnly)
       {%>
    <div class="prefix_1 grid_27 alpha omega">
        <span style="color: #808080; font-size: 14px">
            <span class="pad2"></span>
            <%: Html.Raw(Model.EmailBody) %>
        </span>
    </div>
    <%}
       else
       {%>

    <div class="prefix_1 grid_18 alpha" id="example">
<%--        <%: Html.TextAreaFor(m => m.EmailBody, new {@id = "EmailBody", @style = "height: 400px;"})%>--%>
<%--        <%: Html.TextAreaFor(m => m.EmailBody, new {@id = "EmailBody", @style = "height: 400px;", @class="k-content" })%>--%>
     <div id="editor"><%: Html.Raw(Model.EmailBody) %></div>
<%--      <div id="editor"></div>--%>
    </div>
    <div id="TreeViewDiv" class="grid_9 omega" style="display: none;">
        <b style="color: #3e6b99"><%: Resources.Templates.Details.DragInstructionsLabel %></b>
        <div class="clear">
        </div>
        <ul id="treeView" style="height: 400px; overflow-y: auto;">
            <%-- Account Management Module --%>
                <li id="AccountManagementNodes"><b><%: Resources.Templates.Details.AccountManagementModuleHeaderLabel %></b>
                    <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddressBlockToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddressLineToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress1Token %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress1And2Token %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress1And2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress2Token %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCityToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCityStatePostalCodeToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCityStatePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCountryToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyIncorporateInToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyIncorporateInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyPostalCodeToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyStateToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountHolderCompanyTypeOfEntityToken %>"><%: Resources.Templates.AccountManagementModule.AccountHolderCompanyTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountManagerToken %>"><%: Resources.Templates.AccountManagementModule.AccountManagerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.AccountNumberToken %>"><%: Resources.Templates.AccountManagementModule.AccountNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.CompanyTypeToken %>"><%: Resources.Templates.AccountManagementModule.CompanyTypeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.ContractSignedDateToken %>"><%: Resources.Templates.AccountManagementModule.ContractSignedDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.OtherUsersToken %>"><%: Resources.Templates.AccountManagementModule.OtherUsersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.RecordCountToken %>"><%: Resources.Templates.AccountManagementModule.RecordCountToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.RecordLimitToken %>"><%: Resources.Templates.AccountManagementModule.RecordLimitToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.ReferralSourceToken %>"><%: Resources.Templates.AccountManagementModule.ReferralSourceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.RequestedUsersToken %>"><%: Resources.Templates.AccountManagementModule.RequestedUsersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.SupportPersonToken %>"><%: Resources.Templates.AccountManagementModule.SupportPersonToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.TmRecordsDownloadedTableToken %>"><%: Resources.Templates.AccountManagementModule.TmRecordsDownloadedTableToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.TodaysDateToken %>"><%: Resources.Templates.AccountManagementModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.TrainingSpecialistToken %>"><%: Resources.Templates.AccountManagementModule.TrainingSpecialistToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.TypeOfAccountToken %>"><%: Resources.Templates.AccountManagementModule.TypeOfAccountToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.UnallocatedUsersToken %>"><%: Resources.Templates.AccountManagementModule.UnallocatedUsersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AccountManagementModule.UsersTableToken %>"><%: Resources.Templates.AccountManagementModule.UsersTableToken %></span></li>
                </ul>
            </li>
            <%--Trademarks Module--%>
            <li id="TrademarkNodes"><b><%: Resources.Templates.Details.TrademarksModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ActiveDocketActionsToken %>"><%: Resources.Templates.TrademarksModule.ActiveDocketActionsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ActiveDocketActionsShortToken %>"><%: Resources.Templates.TrademarksModule.ActiveDocketActionsShortToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentAddress1Token %>"><%: Resources.Templates.TrademarksModule.AgentAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentAddress1And2Token %>"><%: Resources.Templates.TrademarksModule.AgentAddress1And2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentAddress2Token %>"><%: Resources.Templates.TrademarksModule.AgentAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentCityToken %>"><%: Resources.Templates.TrademarksModule.AgentCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken %>"><%: Resources.Templates.TrademarksModule.AgentCityStatePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactToken %>"><%: Resources.Templates.TrademarksModule.AgentContactToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactDepartmentToken %>"><%: Resources.Templates.TrademarksModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactFirstNameToken %>"><%: Resources.Templates.TrademarksModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.TrademarksModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactSalutationToken %>"><%: Resources.Templates.TrademarksModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactTitleToken %>"><%: Resources.Templates.TrademarksModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.TrademarksModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.TrademarksModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentCountryToken %>"><%: Resources.Templates.TrademarksModule.AgentCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentPostalCodeToken %>"><%: Resources.Templates.TrademarksModule.AgentPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentStateToken %>"><%: Resources.Templates.TrademarksModule.AgentStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentsToken %>"><%: Resources.Templates.TrademarksModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.AgentsReferenceToken %>"><%: Resources.Templates.TrademarksModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantAddress1Token %>"><%: Resources.Templates.TrademarksModule.ApplicantAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantAddress1And2Token %>"><%: Resources.Templates.TrademarksModule.ApplicantAddress1And2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantAddress2Token %>"><%: Resources.Templates.TrademarksModule.ApplicantAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantCityToken %>"><%: Resources.Templates.TrademarksModule.ApplicantCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantCityStatePostalCodeToken %>"><%: Resources.Templates.TrademarksModule.ApplicantCityStatePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantCountryToken %>"><%: Resources.Templates.TrademarksModule.ApplicantCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantIncorporateInToken %>"><%: Resources.Templates.TrademarksModule.ApplicantIncorporateInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantPostalCodeToken %>"><%: Resources.Templates.TrademarksModule.ApplicantPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantStateToken %>"><%: Resources.Templates.TrademarksModule.ApplicantStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantTypeOfEntityToken %>"><%: Resources.Templates.TrademarksModule.ApplicantTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicantRegistrantToken %>"><%: Resources.Templates.TrademarksModule.ApplicantRegistrantToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicationDateToken %>"><%: Resources.Templates.TrademarksModule.ApplicationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicationDateLongToken %>"><%: Resources.Templates.TrademarksModule.ApplicationDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ApplicationNumberToken %>"><%: Resources.Templates.TrademarksModule.ApplicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ArchivedToken %>"><%: Resources.Templates.TrademarksModule.ArchivedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.BasisOfFilingToken %>"><%: Resources.Templates.TrademarksModule.BasisOfFilingToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.BrandingLogoToken %>"><%: Resources.Templates.TrademarksModule.BrandingLogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.BrandingLogoSmallToken %>"><%: Resources.Templates.TrademarksModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.BrandingLogoMediumToken %>"><%: Resources.Templates.TrademarksModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.BrandingLogoLargeToken %>"><%: Resources.Templates.TrademarksModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CaseDescriptionToken %>"><%: Resources.Templates.TrademarksModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ManagersToken %>"><%: Resources.Templates.TrademarksModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClassesToken %>"><%: Resources.Templates.TrademarksModule.ClassesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClassesAndGoodsToken %>"><%: Resources.Templates.TrademarksModule.ClassesAndGoodsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientToken %>"><%: Resources.Templates.TrademarksModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientAddress1Token %>"><%: Resources.Templates.TrademarksModule.ClientAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientAddress1And2Token %>"><%: Resources.Templates.TrademarksModule.ClientAddress1And2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientAddress2Token %>"><%: Resources.Templates.TrademarksModule.ClientAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientCityToken %>"><%: Resources.Templates.TrademarksModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientCityStatePostalCodeToken %>"><%: Resources.Templates.TrademarksModule.ClientCityStatePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactToken %>"><%: Resources.Templates.TrademarksModule.ClientContactToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactDepartmentToken %>"><%: Resources.Templates.TrademarksModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactFirstNameToken %>"><%: Resources.Templates.TrademarksModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.TrademarksModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactSalutationToken %>"><%: Resources.Templates.TrademarksModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactTitleToken %>"><%: Resources.Templates.TrademarksModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.TrademarksModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.TrademarksModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientCountryToken %>"><%: Resources.Templates.TrademarksModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientNumberToken %>"><%: Resources.Templates.TrademarksModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientPostalCodeToken %>"><%: Resources.Templates.TrademarksModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientStateToken %>"><%: Resources.Templates.TrademarksModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ClientsReferenceToken %>"><%: Resources.Templates.TrademarksModule.ClientsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CompletedDocketActionsToken %>"><%: Resources.Templates.TrademarksModule.CompletedDocketActionsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ConventionPriorityDateToken %>"><%: Resources.Templates.TrademarksModule.ConventionPriorityDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ConventionPriorityDateLongToken %>"><%: Resources.Templates.TrademarksModule.ConventionPriorityDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ConventionPriorityJurisdictionToken %>"><%: Resources.Templates.TrademarksModule.ConventionPriorityJurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ConventionPriorityNumberToken %>"><%: Resources.Templates.TrademarksModule.ConventionPriorityNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CoolingOffPeriodEndsToken %>"><%: Resources.Templates.TrademarksModule.CoolingOffPeriodEndsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CoolingOffPeriodEndsLongToken %>"><%: Resources.Templates.TrademarksModule.CoolingOffPeriodEndsLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CostCenterToken %>"><%: Resources.Templates.TrademarksModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CustomsRecordalToken %>"><%: Resources.Templates.TrademarksModule.CustomsRecordalToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.CustomsRecordalsToken %>"><%: Resources.Templates.TrademarksModule.CustomsRecordalsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DateCheckedToken %>"><%: Resources.Templates.TrademarksModule.DateCheckedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DateOfPublicationToken %>"><%: Resources.Templates.TrademarksModule.DateOfPublicationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DateOfPublicationLongToken %>"><%: Resources.Templates.TrademarksModule.DateOfPublicationLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DeclarationOfUseFiledToken %>"><%: Resources.Templates.TrademarksModule.DeclarationOfUseFiledToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DeclarationOfUseFiledLongToken %>"><%: Resources.Templates.TrademarksModule.DeclarationOfUseFiledLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.DocumentsToken %>"><%: Resources.Templates.TrademarksModule.DocumentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ExtensionsObtainedUntilToken %>"><%: Resources.Templates.TrademarksModule.ExtensionsObtainedUntilToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ExtensionsObtainedUntilLongToken %>"><%: Resources.Templates.TrademarksModule.ExtensionsObtainedUntilLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.FileReferenceToken %>"><%: Resources.Templates.TrademarksModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.FirstUseToken %>"><%: Resources.Templates.TrademarksModule.FirstUseToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.FirstUseInCommerceToken %>"><%: Resources.Templates.TrademarksModule.FirstUseInCommerceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.GrantDateToken %>"><%: Resources.Templates.TrademarksModule.GrantDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.GrantDateLongToken %>"><%: Resources.Templates.TrademarksModule.GrantDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.GroupsToken %>"><%: Resources.Templates.TrademarksModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.JournalEntriesToken %>"><%: Resources.Templates.TrademarksModule.JournalEntriesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.JurisdictionToken %>"><%: Resources.Templates.TrademarksModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.LimitationsToken %>"><%: Resources.Templates.TrademarksModule.LimitationsToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.LogoToken %>"><%: Resources.Templates.TrademarksModule.LogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.LogoSmallToken %>"><%: Resources.Templates.TrademarksModule.LogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.LogoMediumToken %>"><%: Resources.Templates.TrademarksModule.LogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.LogoLargeToken %>"><%: Resources.Templates.TrademarksModule.LogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.MatterNumberToken %>"><%: Resources.Templates.TrademarksModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextActionToken %>"><%: Resources.Templates.TrademarksModule.NextActionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextActionLongToken %>"><%: Resources.Templates.TrademarksModule.NextActionLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextDeadlineToken %>"><%: Resources.Templates.TrademarksModule.NextDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextDeadlineLongToken %>"><%: Resources.Templates.TrademarksModule.NextDeadlineLongToken %></span></li>
                    <%--                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextDeadlineDateToken %>"><%: Resources.Templates.TrademarksModule.NextDeadlineDateToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextReminderToken %>"><%: Resources.Templates.TrademarksModule.NextReminderToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextReminderLongToken %>"><%: Resources.Templates.TrademarksModule.NextReminderLongToken %></span></li>
                    <%--                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NextReminderDateToken %>"><%: Resources.Templates.TrademarksModule.NextReminderDateToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NotesToken %>"><%: Resources.Templates.TrademarksModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NoticeOfAllowanceDateToken %>"><%: Resources.Templates.TrademarksModule.NoticeOfAllowanceDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.NoticeOfAllowanceDateLongToken %>"><%: Resources.Templates.TrademarksModule.NoticeOfAllowanceDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.OppositionPeriodEndsToken %>"><%: Resources.Templates.TrademarksModule.OppositionPeriodEndsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.OppositionPeriodEndsLongToken %>"><%: Resources.Templates.TrademarksModule.OppositionPeriodEndsLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.OtherPartyTrademarkToken %>"><%: Resources.Templates.TrademarksModule.OtherPartyTrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.OwnerToken %>"><%: Resources.Templates.TrademarksModule.OwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineToken %>"><%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineLongToken %>"><%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken %>"><%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken %>"><%: Resources.Templates.TrademarksModule.PriorityFilingDeadlineFromPriorityApplicationLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.PublicationDetailsToken %>"><%: Resources.Templates.TrademarksModule.PublicationDetailsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RecordCheckedByToken %>"><%: Resources.Templates.TrademarksModule.RecordCheckedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RecordCreatedByToken %>"><%: Resources.Templates.TrademarksModule.RecordCreatedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RecordCreatedOnToken %>"><%: Resources.Templates.TrademarksModule.RecordCreatedOnToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RegionToken %>"><%: Resources.Templates.TrademarksModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RegistrationDateToken %>"><%: Resources.Templates.TrademarksModule.RegistrationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RegistrationDateLongToken %>"><%: Resources.Templates.TrademarksModule.RegistrationDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RegistrationNumberToken %>"><%: Resources.Templates.TrademarksModule.RegistrationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RenewalDueToken %>"><%: Resources.Templates.TrademarksModule.RenewalDueToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RenewalDueLongToken %>"><%: Resources.Templates.TrademarksModule.RenewalDueLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.RenewalsToken %>"><%: Resources.Templates.TrademarksModule.RenewalsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ResponseToOfficeActionDueToken %>"><%: Resources.Templates.TrademarksModule.ResponseToOfficeActionDueToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.ResponsibleOfficeToken %>"><%: Resources.Templates.TrademarksModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Section8AffidavitDueToken %>"><%: Resources.Templates.TrademarksModule.Section8AffidavitDueToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Section8AffidavitDueLongToken %>"><%: Resources.Templates.TrademarksModule.Section8AffidavitDueLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileToken %>"><%: Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileLongToken %>"><%: Resources.Templates.TrademarksModule.Section8AffidavitFirstDayToFileLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateToken %>"><%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateLongToken %>"><%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitDueDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateToken %>"><%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateLongToken %>"><%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitDueDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateToken %>"><%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateLongToken %>"><%: Resources.Templates.TrademarksModule.Sec71SixYearAffidavitGracePeriodEndsDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateToken %>"><%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateLongToken %>"><%: Resources.Templates.TrademarksModule.Sec71TenYearAffidavitGracePeriodEndsDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.StatusToken %>"><%: Resources.Templates.TrademarksModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.SubstatusToken %>"><%: Resources.Templates.TrademarksModule.SubstatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.SubstatusDateToken %>"><%: Resources.Templates.TrademarksModule.SubstatusDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TmIdNumberToken %>"><%: Resources.Templates.TrademarksModule.TmIdNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TmRegistrationDetailsToken %>"><%: Resources.Templates.TrademarksModule.TmRegistrationDetailsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TMOGoodsToken %>"><%: Resources.Templates.TrademarksModule.TMOGoodsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TmoStatusToken %>"><%: Resources.Templates.TrademarksModule.TmoStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TmoStatusDateToken %>"><%: Resources.Templates.TrademarksModule.TmoStatusDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TodaysDateToken %>"><%: Resources.Templates.TrademarksModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TodaysDateLongToken %>"><%: Resources.Templates.TrademarksModule.TodaysDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TrademarkToken %>"><%: Resources.Templates.TrademarksModule.TrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TypeOfRegistrationToken %>"><%: Resources.Templates.TrademarksModule.TypeOfRegistrationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.TypeOfTrademarkToken %>"><%: Resources.Templates.TrademarksModule.TypeOfTrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.USSOUUltimateDeadlineToken %>"><%: Resources.Templates.TrademarksModule.USSOUUltimateDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.USSOUUltimateDeadlineLongToken %>"><%: Resources.Templates.TrademarksModule.USSOUUltimateDeadlineLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.WipoCentralAttackExpiresToken %>"><%: Resources.Templates.TrademarksModule.WipoCentralAttackExpiresToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.WipoCodeToken %>"><%: Resources.Templates.TrademarksModule.WipoCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarksModule.WipoDesignationsToken %>"><%: Resources.Templates.TrademarksModule.WipoDesignationsToken %></span></li>
                </ul>
            </li>
            <%--Address Book - Company Module--%>
            <li id="AddressBookCompanyNodes"><b><%: Resources.Templates.Details.CompanyModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.Address1Token %>"><%: Resources.Templates.CompaniesModule.Address1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.Address2Token %>"><%: Resources.Templates.CompaniesModule.Address2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.BrandingLogoSmallToken %>"><%: Resources.Templates.CompaniesModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.BrandingLogoMediumToken %>"><%: Resources.Templates.CompaniesModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.BrandingLogoLargeToken %>"><%: Resources.Templates.CompaniesModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CaseDescriptionToken %>"><%: Resources.Templates.CompaniesModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.ManagersToken %>"><%: Resources.Templates.CompaniesModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CityToken %>"><%: Resources.Templates.CompaniesModule.CityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.ClientNumberToken %>"><%: Resources.Templates.CompaniesModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CompanyClassificationToken %>"><%: Resources.Templates.CompaniesModule.CompanyClassificationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CompanyNameToken %>"><%: Resources.Templates.CompaniesModule.CompanyNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CompanyNumberToken %>"><%: Resources.Templates.CompaniesModule.CompanyNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.AlternateNameToken %>"><%: Resources.Templates.CompaniesModule.AlternateNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.PeopleToken %>"><%: Resources.Templates.CompaniesModule.PeopleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.CountryToken %>"><%: Resources.Templates.CompaniesModule.CountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.DocketManagersToken %>"><%: Resources.Templates.CompaniesModule.DocketManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.FaxToken %>"><%: Resources.Templates.CompaniesModule.FaxToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.FileLocationToken %>"><%: Resources.Templates.CompaniesModule.FileLocationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.FileReferenceToken %>"><%: Resources.Templates.CompaniesModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.GroupsToken %>"><%: Resources.Templates.CompaniesModule.GroupsToken	%></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.JournalEntriesToken %>"><%: Resources.Templates.CompaniesModule.JournalEntriesToken	%></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.MainTelephoneToken %>"><%: Resources.Templates.CompaniesModule.MainTelephoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.NotesToken %>"><%: Resources.Templates.CompaniesModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.PostalCodeToken %>"><%: Resources.Templates.CompaniesModule.PostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.PracticeJurisdictionsToken %>"><%: Resources.Templates.CompaniesModule.PracticeJurisdictionsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.RecordIdToken %>"><%: Resources.Templates.CompaniesModule.RecordIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.RegionToken %>"><%: Resources.Templates.CompaniesModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.StateToken %>"><%: Resources.Templates.CompaniesModule.StateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.TypeOfEntityToken %>"><%: Resources.Templates.CompaniesModule.TypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.WebsiteToken %>"><%: Resources.Templates.CompaniesModule.WebsiteToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.WhereIncorporatedToken %>"><%: Resources.Templates.CompaniesModule.WhereIncorporatedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.CompaniesModule.PatentEntityStatusToken %>"><%: Resources.Templates.CompaniesModule.PatentEntityStatusToken %></span></li>
                </ul>
            </li>
            <%--Address Book - People Module--%>
            <li id="AddressBookPeopleNodes"><b><%: Resources.Templates.Details.PeopleModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.AlternateEmailToken %>"><%: Resources.Templates.PeopleModule.AlternateEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.BrandingLogoSmallToken %>"><%: Resources.Templates.PeopleModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.BrandingLogoMediumToken %>"><%: Resources.Templates.PeopleModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.BrandingLogoLargeToken %>"><%: Resources.Templates.PeopleModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CitizenshipToken %>"><%: Resources.Templates.PeopleModule.CitizenshipToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyToken %>"><%: Resources.Templates.PeopleModule.CompanyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyAddress1Token %>"><%: Resources.Templates.PeopleModule.CompanyAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyAddress2Token %>"><%: Resources.Templates.PeopleModule.CompanyAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyCityToken %>"><%: Resources.Templates.PeopleModule.CompanyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyClassificationToken %>"><%: Resources.Templates.PeopleModule.CompanyClassificationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyCountryToken %>"><%: Resources.Templates.PeopleModule.CompanyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyPostalCodeToken %>"><%: Resources.Templates.PeopleModule.CompanyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.CompanyStateToken %>"><%: Resources.Templates.PeopleModule.CompanyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.ContactTypeToken %>"><%: Resources.Templates.PeopleModule.ContactTypeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.DepartmentToken %>"><%: Resources.Templates.PeopleModule.DepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.FirstNameToken %>"><%: Resources.Templates.PeopleModule.FirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.GroupsToken %>"><%: Resources.Templates.PeopleModule.GroupsToken	%></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.LastNameToken %>"><%: Resources.Templates.PeopleModule.LastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.MobilePhoneToken %>"><%: Resources.Templates.PeopleModule.MobilePhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.NotesToken %>"><%: Resources.Templates.PeopleModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.PersonIdToken %>"><%: Resources.Templates.PeopleModule.PersonIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.PersonalEmailToken %>"><%: Resources.Templates.PeopleModule.PersonalEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.PersonalPhoneToken %>"><%: Resources.Templates.PeopleModule.PersonalPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.PhotographToken %>"><%: Resources.Templates.PeopleModule.PhotographToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.PreferredNameToken %>"><%: Resources.Templates.PeopleModule.PreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.RecordIdToken %>"><%: Resources.Templates.PeopleModule.RecordIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.RegionToken %>"><%: Resources.Templates.PeopleModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.SalutationToken %>"><%: Resources.Templates.PeopleModule.SalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.TitlePositionToken %>"><%: Resources.Templates.PeopleModule.TitlePositionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.WorkEmailToken %>"><%: Resources.Templates.PeopleModule.WorkEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PeopleModule.WorkPhoneToken %>"><%: Resources.Templates.PeopleModule.WorkPhoneToken %></span></li>
                </ul>
            </li>
            <%--Demos Module--%>
            <li id="DemoNodes"><b><%: Resources.Templates.DemosModule.DemosHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.DemosModule.DemoLinkToken %>"><%: Resources.Templates.DemosModule.DemoLinkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DemosModule.ExpirationDateToken %>"><%: Resources.Templates.DemosModule.ExpirationDateToken %></span></li>
                </ul>
            </li>
            <%--Docket Module--%>
            <li id="DocketNodes"><b><%: Resources.Templates.Details.DocketModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ActionStatusToken %>"><%: Resources.Templates.DocketModule.ActionStatusToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ActiveDocketActionsToken %>"><%: Resources.Templates.DocketModule.ActiveDocketActionsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ActiveDocketActionsShortToken %>"><%: Resources.Templates.DocketModule.ActiveDocketActionsShortToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.AgentToken %>"><%: Resources.Templates.DocketModule.AgentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.AgentReferenceToken %>"><%: Resources.Templates.DocketModule.AgentReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ApplicationDateToken %>"><%: Resources.Templates.DocketModule.ApplicationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ApplicationNumberToken %>"><%: Resources.Templates.DocketModule.ApplicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.BrandingLogoSmallToken %>"><%: Resources.Templates.DocketModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.BrandingLogoMediumToken %>"><%: Resources.Templates.DocketModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.BrandingLogoLargeToken %>"><%: Resources.Templates.DocketModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.CaseDescriptionToken %>"><%: Resources.Templates.DocketModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.CaseManagersToken %>"><%: Resources.Templates.DocketModule.CaseManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.CaseNumberToken %>"><%: Resources.Templates.DocketModule.CaseNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.CaseTitleToken %>"><%: Resources.Templates.DocketModule.CaseTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ClassesToken %>"><%: Resources.Templates.DocketModule.ClassesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ClientToken %>"><%: Resources.Templates.DocketModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ClientNumberToken %>"><%: Resources.Templates.DocketModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ClientReferenceToken %>"><%: Resources.Templates.DocketModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.CompletedDocketActionsToken %>"><%: Resources.Templates.DocketModule.CompletedDocketActionsToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.DeadlineToken %>"><%: Resources.Templates.DocketModule.DeadlineToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.DocketManagerToken %>"><%: Resources.Templates.DocketModule.DocketManagerToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.DueDateToken %>"><%: Resources.Templates.DocketModule.DueDateToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.FileReferenceToken %>"><%: Resources.Templates.DocketModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.IPRightsInDisputeToken %>"><%: Resources.Templates.DocketModule.IPRightsInDisputeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.JournalEntriesTrademarksToken %>"><%: Resources.Templates.DocketModule.JournalEntriesTrademarksToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.JournalEntriesDisputesToken %>"><%: Resources.Templates.DocketModule.JournalEntriesDisputesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.JurisdictionToken %>"><%: Resources.Templates.DocketModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.LogoToken %>"><%: Resources.Templates.DocketModule.LogoToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.LogoSmallToken %>"><%: Resources.Templates.DocketModule.LogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.LogoMediumToken %>"><%: Resources.Templates.DocketModule.LogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.LogoLargeToken %>"><%: Resources.Templates.DocketModule.LogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.NextActionPairToken %>"><%: Resources.Templates.DocketModule.NextActionPairToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.NextDeadlinePairToken %>"><%: Resources.Templates.DocketModule.NextDeadlinePairToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.NextReminderPairToken %>"><%: Resources.Templates.DocketModule.NextReminderPairToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.NotesToken %>"><%: Resources.Templates.DocketModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.OwnerApplicantToken %>"><%: Resources.Templates.DocketModule.OwnerApplicantToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.PatentTitleToken %>"><%: Resources.Templates.DocketModule.PatentTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.PatentNumberToken %>"><%: Resources.Templates.DocketModule.PatentNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.PriorityDateToken %>"><%: Resources.Templates.DocketModule.PriorityDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.RegistrationDateToken %>"><%: Resources.Templates.DocketModule.RegistrationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.RegistrationNumberToken %>"><%: Resources.Templates.DocketModule.RegistrationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.ReminderToken %>"><%: Resources.Templates.DocketModule.ReminderToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.RenewalDateInRecordToken %>"><%: Resources.Templates.DocketModule.RenewalDateInRecordToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.StatusToken %>"><%: Resources.Templates.DocketModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.StatusDateToken %>"><%: Resources.Templates.DocketModule.StatusDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.SubstatusToken %>"><%: Resources.Templates.DocketModule.SubstatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.SystemCalcRenewalDateToken %>"><%: Resources.Templates.DocketModule.SystemCalcRenewalDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.TmoRenewalDateToken %>"><%: Resources.Templates.DocketModule.TmoRenewalDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.TrademarkToken %>"><%: Resources.Templates.DocketModule.TrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.TrademarkRegistrationDetailsToken %>"><%: Resources.Templates.DocketModule.TrademarkRegistrationDetailsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocketModule.TypeOfDisputeToken %>"><%: Resources.Templates.DocketModule.TypeOfDisputeToken %></span></li>
                </ul>
            </li>
            <%--Documents Module--%>
            <li id="DocumentNodes"><b><%: Resources.Templates.Details.DocumentsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.AttachedToken %>"><%: Resources.Templates.DocumentsModule.AttachedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.AuthorToken %>"><%: Resources.Templates.DocumentsModule.AuthorToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.ManagersToken %>"><%: Resources.Templates.DocumentsModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.AgentsToken %>"><%: Resources.Templates.DocumentsModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.AgentReferencesToken %>"><%: Resources.Templates.DocumentsModule.AgentReferencesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.BrandingLogoSmallToken %>"><%: Resources.Templates.DocumentsModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.BrandingLogoMediumToken %>"><%: Resources.Templates.DocumentsModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.BrandingLogoLargeToken %>"><%: Resources.Templates.DocumentsModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.ClientToken %>"><%: Resources.Templates.DocumentsModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.ClientNumberToken %>"><%: Resources.Templates.DocumentsModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.DateOfDocumentToken %>"><%: Resources.Templates.DocumentsModule.DateOfDocumentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.DateUploadedToken %>"><%: Resources.Templates.DocumentsModule.DateUploadedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.DescriptionOfDocumentToken %>"><%: Resources.Templates.DocumentsModule.DescriptionOfDocumentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.DocumentIdToken %>"><%: Resources.Templates.DocumentsModule.DocumentIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.FileLocationToken %>"><%: Resources.Templates.DocumentsModule.FileLocationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.FileNameToken %>"><%: Resources.Templates.DocumentsModule.FileNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.GroupsToken %>"><%: Resources.Templates.DocumentsModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.KeyWordsToken %>"><%: Resources.Templates.DocumentsModule.KeyWordsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.NotesToken %>"><%: Resources.Templates.DocumentsModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.OwnerToken %>"><%: Resources.Templates.DocumentsModule.OwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.TypeOfDocumentToken %>"><%: Resources.Templates.DocumentsModule.TypeOfDocumentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DocumentsModule.UploadedByToken %>"><%: Resources.Templates.DocumentsModule.UploadedByToken %></span></li>
                </ul>
            </li>
            <%--Trademark Profile Module--%>
            <li id="TrademarkProfileNodes"><b><%: Resources.Templates.Details.TrademarkProfilesModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.BrandFamilyToken %>"><%: Resources.Templates.TrademarkProfilesModule.BrandFamilyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.BrandOwnerToken %>"><%: Resources.Templates.TrademarkProfilesModule.BrandOwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.BrandingLogoSmallToken %>"><%: Resources.Templates.TrademarkProfilesModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.BrandingLogoMediumToken %>"><%: Resources.Templates.TrademarkProfilesModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.BrandingLogoLargeToken %>"><%: Resources.Templates.TrademarkProfilesModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.CaseDescriptionToken %>"><%: Resources.Templates.TrademarkProfilesModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.ManagersToken %>"><%: Resources.Templates.TrademarkProfilesModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.ColorsClaimedToken %>"><%: Resources.Templates.TrademarkProfilesModule.ColorsClaimedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.DateMarkAdoptedToken %>"><%: Resources.Templates.TrademarkProfilesModule.DateMarkAdoptedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.DescriptionOfMarkToken %>"><%: Resources.Templates.TrademarkProfilesModule.DescriptionOfMarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.DeviceClassificationToken %>"><%: Resources.Templates.TrademarkProfilesModule.DeviceClassificationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.FileLocationToken %>"><%: Resources.Templates.TrademarkProfilesModule.FileLocationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.GenericProductsToken %>"><%: Resources.Templates.TrademarkProfilesModule.GenericProductsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.ImageToken %>"><%: Resources.Templates.TrademarkProfilesModule.ImageToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.ImageFileNameToken %>"><%: Resources.Templates.TrademarkProfilesModule.ImageFileNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.MarkAdoptedToken %>"><%: Resources.Templates.TrademarkProfilesModule.MarkAdoptedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.NotesToken %>"><%: Resources.Templates.TrademarkProfilesModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.RecordsAttachedToken %>"><%: Resources.Templates.TrademarkProfilesModule.RecordsAttachedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.TmProfileIdToken %>"><%: Resources.Templates.TrademarkProfilesModule.TmProfileIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.TrademarkNameToken %>"><%: Resources.Templates.TrademarkProfilesModule.TrademarkNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.TranslationToken %>"><%: Resources.Templates.TrademarkProfilesModule.TranslationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.TransliterationToken %>"><%: Resources.Templates.TrademarkProfilesModule.TransliterationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.TypeOfTrademarkToken %>"><%: Resources.Templates.TrademarkProfilesModule.TypeOfTrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.TrademarkProfilesModule.UseAsApplicantToken %>"><%: Resources.Templates.TrademarkProfilesModule.UseAsApplicantToken %></span></li>
                </ul>
            </li>
            <%--Disputes Module--%>
            <li id="DisputeNodes"><b><%: Resources.Templates.Details.DisputesModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ActiveDocketActionsToken %>"><%: Resources.Templates.DisputesModule.ActiveDocketActionsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ActiveDocketActionsShortToken %>"><%: Resources.Templates.DisputesModule.ActiveDocketActionsShortToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactDepartmentToken %>"><%: Resources.Templates.DisputesModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactFirstNameToken %>"><%: Resources.Templates.DisputesModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.DisputesModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactSalutationToken %>"><%: Resources.Templates.DisputesModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactTitleToken %>"><%: Resources.Templates.DisputesModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.DisputesModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.DisputesModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentsToken %>"><%: Resources.Templates.DisputesModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.AgentsReferenceToken %>"><%: Resources.Templates.DisputesModule.AgentsReferenceToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.BrandingLogoToken %>"><%: Resources.Templates.DisputesModule.BrandingLogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.BrandingLogoSmallToken %>"><%: Resources.Templates.DisputesModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.BrandingLogoMediumToken %>"><%: Resources.Templates.DisputesModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.BrandingLogoLargeToken %>"><%: Resources.Templates.DisputesModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.CaseDescriptionToken %>"><%: Resources.Templates.DisputesModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ManagersToken %>"><%: Resources.Templates.DisputesModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.CaseNumberToken %>"><%: Resources.Templates.DisputesModule.CaseNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.CaseTitleToken %>"><%: Resources.Templates.DisputesModule.CaseTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientToken %>"><%: Resources.Templates.DisputesModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactDepartmentToken %>"><%: Resources.Templates.DisputesModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactFirstNameToken %>"><%: Resources.Templates.DisputesModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.DisputesModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactSalutationToken %>"><%: Resources.Templates.DisputesModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactTitleToken %>"><%: Resources.Templates.DisputesModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.DisputesModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.DisputesModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientIPRightsToken %>"><%: Resources.Templates.DisputesModule.ClientIPRightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientNumberToken %>"><%: Resources.Templates.DisputesModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ClientReferenceToken %>"><%: Resources.Templates.DisputesModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.CourtToken %>"><%: Resources.Templates.DisputesModule.CourtToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.CostCenterToken %>"><%: Resources.Templates.DisputesModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.DateActionFiledToken %>"><%: Resources.Templates.DisputesModule.DateActionFiledToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.DateCaseOpenedToken %>"><%: Resources.Templates.DisputesModule.DateCaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.DateOfStatusToken %>"><%: Resources.Templates.DisputesModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.DisputeIdNumberToken %>"><%: Resources.Templates.DisputesModule.DisputeIdNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.FileReferenceToken %>"><%: Resources.Templates.DisputesModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.GoodsInDisputeToken %>"><%: Resources.Templates.DisputesModule.GoodsInDisputeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.GroupsToken %>"><%: Resources.Templates.DisputesModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.IPRightsInDisputeToken %>"><%: Resources.Templates.DisputesModule.IPRightsInDisputeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.JournalEntriesToken %>"><%: Resources.Templates.DisputesModule.JournalEntriesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.JurisdictionToken %>"><%: Resources.Templates.DisputesModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.MatterNumberToken %>"><%: Resources.Templates.DisputesModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.NextDeadlineToken %>"><%: Resources.Templates.DisputesModule.NextDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.NotesToken %>"><%: Resources.Templates.DisputesModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OtherPartysIpRightsToken %>"><%: Resources.Templates.DisputesModule.OtherPartysIpRightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OpposingPartiesToken %>"><%: Resources.Templates.DisputesModule.OpposingPartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OpposingPartyTrademarksToken %>"><%: Resources.Templates.DisputesModule.OpposingPartyTrademarksToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OurPartiesToken %>"><%: Resources.Templates.DisputesModule.OurPartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OurPartyTrademarksToken %>"><%: Resources.Templates.DisputesModule.OurPartyTrademarksToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OutcomeToken %>"><%: Resources.Templates.DisputesModule.OutcomeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.OwnerToken %>"><%: Resources.Templates.DisputesModule.OwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.RegionToken %>"><%: Resources.Templates.DisputesModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.RepresentedByToken %>"><%: Resources.Templates.DisputesModule.RepresentedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.ResponsibleOfficeToken %>"><%: Resources.Templates.DisputesModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.StatusToken %>"><%: Resources.Templates.DisputesModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.TodaysDateToken %>"><%: Resources.Templates.DisputesModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.TypeOfDisputeToken %>"><%: Resources.Templates.DisputesModule.TypeOfDisputeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.VenueToken %>"><%: Resources.Templates.DisputesModule.VenueToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DisputesModule.WipoCodeToken %>"><%: Resources.Templates.DisputesModule.WipoCodeToken %></span></li>
                </ul>
            </li>
            <li id="ReferenceNodes"><b><%: Resources.Templates.Details.ReferencesModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <%--<li><span class="draggablenode"><%: Resources.Templates.Details.WipoIrBaseToken %></span></li>--%>
                </ul>
            </li>
            <li id="DesignRightNodes"><b><%: Resources.Templates.Details.DesignRightsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <%--<li><span class="draggablenode"><%: Resources.Templates.Details.WipoIrBaseToken %></span></li>--%>
                </ul>
            </li>
            <%--Searches Module--%>
            <li id="SearchNodes"><b><%: Resources.Templates.Details.SearchesModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactDepartmentToken %>"><%: Resources.Templates.SearchesModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactFirstNameToken %>"><%: Resources.Templates.SearchesModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.SearchesModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactSalutationToken %>"><%: Resources.Templates.SearchesModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactTitleToken %>"><%: Resources.Templates.SearchesModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.SearchesModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.SearchesModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentsToken %>"><%: Resources.Templates.SearchesModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.AgentsReferenceToken %>"><%: Resources.Templates.SearchesModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ApplicantRegistrantToken %>"><%: Resources.Templates.SearchesModule.ApplicantRegistrantToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandFamilyToken %>"><%: Resources.Templates.SearchesModule.BrandFamilyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandOwnerToken %>"><%: Resources.Templates.SearchesModule.BrandOwnerToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandingLogoToken %>"><%: Resources.Templates.SearchesModule.BrandingLogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandingLogoSmallToken %>"><%: Resources.Templates.SearchesModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandingLogoMediumToken %>"><%: Resources.Templates.SearchesModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.BrandingLogoLargeToken %>"><%: Resources.Templates.SearchesModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.CaseDescriptionToken %>"><%: Resources.Templates.SearchesModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ManagersToken %>"><%: Resources.Templates.SearchesModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClassesSearchedToken %>"><%: Resources.Templates.SearchesModule.ClassesSearchedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClassesToFileToken %>"><%: Resources.Templates.SearchesModule.ClassesToFileToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClassesAndGoodsToFileToken %>"><%: Resources.Templates.SearchesModule.ClassesAndGoodsToFileToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientToken %>"><%: Resources.Templates.SearchesModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactDepartmentToken %>"><%: Resources.Templates.SearchesModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactFirstNameToken %>"><%: Resources.Templates.SearchesModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.SearchesModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactSalutationToken %>"><%: Resources.Templates.SearchesModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactTitleToken %>"><%: Resources.Templates.SearchesModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.SearchesModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.SearchesModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ClientReferenceToken %>"><%: Resources.Templates.SearchesModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ColorsClaimedToken %>"><%: Resources.Templates.SearchesModule.ColorsClaimedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.CostCenterToken %>"><%: Resources.Templates.SearchesModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.DateMarkAdoptedToken %>"><%: Resources.Templates.SearchesModule.DateMarkAdoptedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.DateOfSearchToken %>"><%: Resources.Templates.SearchesModule.DateOfSearchToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.DescriptionOfMarkToken %>"><%: Resources.Templates.SearchesModule.DescriptionOfMarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.DeviceClassificationToken %>"><%: Resources.Templates.SearchesModule.DeviceClassificationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.FileLocationToken %>"><%: Resources.Templates.SearchesModule.FileLocationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.GenericProductsToken %>"><%: Resources.Templates.SearchesModule.GenericProductsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.GroupsToken %>"><%: Resources.Templates.SearchesModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ImageFileNameToken %>"><%: Resources.Templates.SearchesModule.ImageFileNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.JurisdictionsToken %>"><%: Resources.Templates.SearchesModule.JurisdictionsToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.LogoToken %>"><%: Resources.Templates.SearchesModule.LogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.LogoSmallToken %>"><%: Resources.Templates.SearchesModule.LogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.LogoMediumToken %>"><%: Resources.Templates.SearchesModule.LogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.LogoLargeToken %>"><%: Resources.Templates.SearchesModule.LogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.MarkAbandonedToken %>"><%: Resources.Templates.SearchesModule.MarkAbandonedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.MatterNumberToken %>"><%: Resources.Templates.SearchesModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.NotesToken %>"><%: Resources.Templates.SearchesModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.OwnerToken %>"><%: Resources.Templates.SearchesModule.OwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.ResponsibleOfficeToken %>"><%: Resources.Templates.SearchesModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.SearchServiceToken %>"><%: Resources.Templates.SearchesModule.SearchServiceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.StatusOfSearchToken %>"><%: Resources.Templates.SearchesModule.StatusOfSearchToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TmSearchIdToken %>"><%: Resources.Templates.SearchesModule.TmSearchIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TodaysDateToken %>"><%: Resources.Templates.SearchesModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TrademarkSearchedToken %>"><%: Resources.Templates.SearchesModule.TrademarkSearchedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TranslationToken %>"><%: Resources.Templates.SearchesModule.TranslationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TransliterationToken %>"><%: Resources.Templates.SearchesModule.TransliterationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TypeOfSearchToken %>"><%: Resources.Templates.SearchesModule.TypeOfSearchToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.TypeOfTrademarkToken %>"><%: Resources.Templates.SearchesModule.TypeOfTrademarkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.SearchesModule.WipoCodeToken %>"><%: Resources.Templates.SearchesModule.WipoCodeToken %></span></li>
                </ul>
            </li>
            <%--Domain Names Module--%>
            <li id="DomainNameNodes"><b><%: Resources.Templates.Details.DomainNamesModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.AccountsToken %>"><%: Resources.Templates.DomainNamesModule.AccountsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ActiveSiteToken %>"><%: Resources.Templates.DomainNamesModule.ActiveSiteToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.AgentsToken %>"><%: Resources.Templates.DomainNamesModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.AgentsReferenceToken %>"><%: Resources.Templates.DomainNamesModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.CaseDescriptionToken %>"><%: Resources.Templates.DomainNamesModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.CostCenterToken %>"><%: Resources.Templates.DomainNamesModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.BrandingLogoSmallToken %>"><%: Resources.Templates.DomainNamesModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.BrandingLogoMediumToken %>"><%: Resources.Templates.DomainNamesModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.BrandingLogoLargeToken %>"><%: Resources.Templates.DomainNamesModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ManagersToken %>"><%: Resources.Templates.DomainNamesModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ClientToken %>"><%: Resources.Templates.DomainNamesModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ClientReferenceToken %>"><%: Resources.Templates.DomainNamesModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.DomainIdToken %>"><%: Resources.Templates.DomainNamesModule.DomainIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.DomainNameToken %>"><%: Resources.Templates.DomainNamesModule.DomainNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ExpirationDateToken %>"><%: Resources.Templates.DomainNamesModule.ExpirationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.FileReferenceToken %>"><%: Resources.Templates.DomainNamesModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.GroupsToken %>"><%: Resources.Templates.DomainNamesModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.IpAddress1Token %>"><%: Resources.Templates.DomainNamesModule.IpAddress1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.IpAddress2Token %>"><%: Resources.Templates.DomainNamesModule.IpAddress2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.MatterNumberToken %>"><%: Resources.Templates.DomainNamesModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.PasswordToken %>"><%: Resources.Templates.DomainNamesModule.PasswordToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.PrivateRegistrationToken %>"><%: Resources.Templates.DomainNamesModule.PrivateRegistrationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.RedirectedToToken %>"><%: Resources.Templates.DomainNamesModule.RedirectedToToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.RegistrantToken %>"><%: Resources.Templates.DomainNamesModule.RegistrantToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.RegistrarToken %>"><%: Resources.Templates.DomainNamesModule.RegistrarToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.RegistrationDateToken %>"><%: Resources.Templates.DomainNamesModule.RegistrationDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.ResponsibleOfficeToken %>"><%: Resources.Templates.DomainNamesModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.Server1Token %>"><%: Resources.Templates.DomainNamesModule.Server1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.Server2Token %>"><%: Resources.Templates.DomainNamesModule.Server2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.StatusToken %>"><%: Resources.Templates.DomainNamesModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.UserIDToken %>"><%: Resources.Templates.DomainNamesModule.UserIDToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.DomainNamesModule.UserNameToken %>"><%: Resources.Templates.DomainNamesModule.UserNameToken %></span></li>
                </ul>
            </li>
            <li id="AssignmentNodes"><b><%: Resources.Templates.Details.AssignmentsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AssignmentIdToken %>"><%: Resources.Templates.AssignmentsModule.AssignmentIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentToken %>"><%: Resources.Templates.AssignmentsModule.AgentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.AgentAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.AgentAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.AgentAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.AgentAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentCityToken %>"><%: Resources.Templates.AssignmentsModule.AgentCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactDepartmentToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactFirstNameToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactLastNameToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactLastNameToken %></span></li>               
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactSalutationToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactTitleToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.AssignmentsModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentCountryToken %>"><%: Resources.Templates.AssignmentsModule.AgentCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentPostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.AgentPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentRolesToken %>"><%: Resources.Templates.AssignmentsModule.AgentRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentStateToken %>"><%: Resources.Templates.AssignmentsModule.AgentStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.AgentsToken %>"><%: Resources.Templates.AssignmentsModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.BrandingLogoSmallToken %>"><%: Resources.Templates.AssignmentsModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.BrandingLogoMediumToken %>"><%: Resources.Templates.AssignmentsModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.BrandingLogoLargeToken %>"><%: Resources.Templates.AssignmentsModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.CaseClosedToken %>"><%: Resources.Templates.AssignmentsModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.CaseDescriptionToken %>"><%: Resources.Templates.AssignmentsModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ManagersToken %>"><%: Resources.Templates.AssignmentsModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.CaseOpenedToken %>"><%: Resources.Templates.AssignmentsModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientToken %>"><%: Resources.Templates.AssignmentsModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientCityToken %>"><%: Resources.Templates.AssignmentsModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactDepartmentToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactFirstNameToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactLastNameToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactSalutationToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactTitleToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.AssignmentsModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientCountryToken %>"><%: Resources.Templates.AssignmentsModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientNumberToken %>"><%: Resources.Templates.AssignmentsModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientPostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ClientStateToken %>"><%: Resources.Templates.AssignmentsModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ConsiderationToken %>"><%: Resources.Templates.AssignmentsModule.ConsiderationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateOfAssignmentToken %>"><%: Resources.Templates.AssignmentsModule.DateOfAssignmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateOfAssignmentLongToken %>"><%: Resources.Templates.AssignmentsModule.DateOfAssignmentLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateOfExecutionToken %>"><%: Resources.Templates.AssignmentsModule.DateOfExecutionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateOfExecutionLongToken %>"><%: Resources.Templates.AssignmentsModule.DateOfExecutionLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateOfStatusToken %>"><%: Resources.Templates.AssignmentsModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.DateRecordedToken %>"><%: Resources.Templates.AssignmentsModule.DateRecordedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.EffectiveDateToken %>"><%: Resources.Templates.AssignmentsModule.EffectiveDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.EffectiveDateLongToken %>"><%: Resources.Templates.AssignmentsModule.EffectiveDateLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.FileReferenceToken %>"><%: Resources.Templates.AssignmentsModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.FrameToken %>"><%: Resources.Templates.AssignmentsModule.FrameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.GroupsToken %>"><%: Resources.Templates.AssignmentsModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.JurisdictionToken %>"><%: Resources.Templates.AssignmentsModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.NotesToken %>"><%: Resources.Templates.AssignmentsModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.OtherPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.OtherPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyCityToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyCountryToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyPostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OtherPartyStateToken %>"><%: Resources.Templates.AssignmentsModule.OtherPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.OurPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.OurPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyCityToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyCountryToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyPostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.OurPartyStateToken %>"><%: Resources.Templates.AssignmentsModule.OurPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartiesToken %>"><%: Resources.Templates.AssignmentsModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartiesAndRolesToken %>"><%: Resources.Templates.AssignmentsModule.PartiesAndRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeCityToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeCountryToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeIncorporatedInToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneePostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeRepresentedByToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeRepresentedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeStateToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssigneeTypeOfEntityToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssigneeTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorAddressBlockToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLineToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLine1Token %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLine2Token %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorCityToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorCountryToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorIncorporatedInToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorPostalCodeToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorRepresentedByToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorRepresentedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorStateToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.PartyAssignorTypeOfEntityToken %>"><%: Resources.Templates.AssignmentsModule.PartyAssignorTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.ReelToken %>"><%: Resources.Templates.AssignmentsModule.ReelToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.RegionToken %>"><%: Resources.Templates.AssignmentsModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.StatusToken %>"><%: Resources.Templates.AssignmentsModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TitleToken %>"><%: Resources.Templates.AssignmentsModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TmAssignmentScheduleToken %>"><%: Resources.Templates.AssignmentsModule.TmAssignmentScheduleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TmAssignmentScheduleNoImageToken %>"><%: Resources.Templates.AssignmentsModule.TmAssignmentScheduleNoImageToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TMOReferenceToken %>"><%: Resources.Templates.AssignmentsModule.TMOReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TodaysDateToken %>"><%: Resources.Templates.AssignmentsModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.TypeOfConveyanceToken %>"><%: Resources.Templates.AssignmentsModule.TypeOfConveyanceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AssignmentsModule.WithGoodwillToken %>"><%: Resources.Templates.AssignmentsModule.WithGoodwillToken %></span></li>
                </ul>
            </li>
            <%--Additional IPs Module--%>
            <li id="AdditionalIpNodes"><b><%: Resources.Templates.Details.AdditionalIPsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AdditionalIpIdToken %>"><%: Resources.Templates.AdditionalIPModule.AdditionalIpIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentToken %>"><%: Resources.Templates.AdditionalIPModule.AgentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentCityToken %>"><%: Resources.Templates.AdditionalIPModule.AgentCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactLastNameToken %></span></li>               
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentCountryToken %>"><%: Resources.Templates.AdditionalIPModule.AgentCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.AgentPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentsReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentRolesToken %>"><%: Resources.Templates.AdditionalIPModule.AgentRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentStateToken %>"><%: Resources.Templates.AdditionalIPModule.AgentStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentsToken %>"><%: Resources.Templates.AdditionalIPModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ApplicationNumberToken %>"><%: Resources.Templates.AdditionalIPModule.ApplicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AuthorsToken %>"><%: Resources.Templates.AdditionalIPModule.AuthorsToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseClosedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %>"><%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ManagersToken %>"><%: Resources.Templates.AdditionalIPModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientToken %>"><%: Resources.Templates.AdditionalIPModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCityToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCountryToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientStateToken %>"><%: Resources.Templates.AdditionalIPModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ConsiderationToken %>"><%: Resources.Templates.AdditionalIPModule.ConsiderationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CopyRightExpiresToken %>"><%: Resources.Templates.AdditionalIPModule.CopyRightExpiresToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfAgreementToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfAgreementToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateRecordedToken %>"><%: Resources.Templates.AdditionalIPModule.DateRecordedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateRegisteredToken %>"><%: Resources.Templates.AdditionalIPModule.DateRegisteredToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DisclosedToken %>"><%: Resources.Templates.AdditionalIPModule.DisclosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ExclusivityToken %>"><%: Resources.Templates.AdditionalIPModule.ExclusivityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.FileReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.FilingDateToken %>"><%: Resources.Templates.AdditionalIPModule.FilingDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GrantedToken %>"><%: Resources.Templates.AdditionalIPModule.GrantedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GroupsToken %>"><%: Resources.Templates.AdditionalIPModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.HowOwnershipAquiredToken %>"><%: Resources.Templates.AdditionalIPModule.HowOwnershipAquiredToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.JurisdictionToken %>"><%: Resources.Templates.AdditionalIPModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NotesToken %>"><%: Resources.Templates.AdditionalIPModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyCityToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyCountryToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OtherPartyStateToken %>"><%: Resources.Templates.AdditionalIPModule.OtherPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.OurPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.OurPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyCityToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyCountryToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.OurPartyStateToken %>"><%: Resources.Templates.AdditionalIPModule.OurPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeCityToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeCountryToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeIncorporatedInToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneePostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeStateToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssigneeTypeOfEntityToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssigneeTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorCityToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorCountryToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorIncorporatedInToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorStateToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartyAssignorTypeOfEntityToken %>"><%: Resources.Templates.AdditionalIPModule.PartyAssignorTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PatentNumberPatentsAndDesignsToken %>"><%: Resources.Templates.AdditionalIPModule.PatentNumberPatentsAndDesignsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PublicationNumberToken %>"><%: Resources.Templates.AdditionalIPModule.PublicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegionToken %>"><%: Resources.Templates.AdditionalIPModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegistrationNumberCopyrightsToken %>"><%: Resources.Templates.AdditionalIPModule.RegistrationNumberCopyrightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RelatedTrademarksToken %>"><%: Resources.Templates.AdditionalIPModule.RelatedTrademarksToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RelatedTrademarksTableToken %>"><%: Resources.Templates.AdditionalIPModule.RelatedTrademarksTableToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RenewableToken %>"><%: Resources.Templates.AdditionalIPModule.RenewableToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %>"><%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.StatusToken %>"><%: Resources.Templates.AdditionalIPModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %>"><%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TermToken %>"><%: Resources.Templates.AdditionalIPModule.TermToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleToken %>"><%: Resources.Templates.AdditionalIPModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleCopyrightsToken %>"><%: Resources.Templates.AdditionalIPModule.TitleCopyrightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TmAssignmentScheduleToken %>"><%: Resources.Templates.AdditionalIPModule.TmAssignmentScheduleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TmAssignmentScheduleNoImageToken %>"><%: Resources.Templates.AdditionalIPModule.TmAssignmentScheduleNoImageToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TodaysDateToken %>"><%: Resources.Templates.AdditionalIPModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypeOfAgreementToken %>"><%: Resources.Templates.AdditionalIPModule.TypeOfAgreementToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypeOfMatterToken %>"><%: Resources.Templates.AdditionalIPModule.TypeOfMatterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypeOfWorkToken %>"><%: Resources.Templates.AdditionalIPModule.TypeOfWorkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypePatentsAndDesignsToken %>"><%: Resources.Templates.AdditionalIPModule.TypePatentsAndDesignsToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.WithGoodwillToken %>"><%: Resources.Templates.AdditionalIPModule.WithGoodwillToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.YearCompletedToken %>"><%: Resources.Templates.AdditionalIPModule.YearCompletedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.YearOfAuthorsDeathToken %>"><%: Resources.Templates.AdditionalIPModule.YearOfAuthorsDeathToken %></span></li>

                </ul>
            </li>
            <%--E-Commerce Module--%>
            <li id="ECommerceNodes"><b><%: Resources.Templates.Details.ECommerceModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactDepartmentToken %>"><%: Resources.Templates.ECommerceModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactFirstNameToken %>"><%: Resources.Templates.ECommerceModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.ECommerceModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactSalutationToken %>"><%: Resources.Templates.ECommerceModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactTitleToken %>"><%: Resources.Templates.ECommerceModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.ECommerceModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.ECommerceModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentsToken %>"><%: Resources.Templates.ECommerceModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.AgentsReferenceToken %>"><%: Resources.Templates.ECommerceModule.AgentsReferenceToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.BrandingLogoToken %>"><%: Resources.Templates.ECommerceModule.BrandingLogoToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.BrandingLogoSmallToken %>"><%: Resources.Templates.ECommerceModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.BrandingLogoMediumToken %>"><%: Resources.Templates.ECommerceModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.BrandingLogoLargeToken %>"><%: Resources.Templates.ECommerceModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.CaseDescriptionToken %>"><%: Resources.Templates.ECommerceModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ManagersToken %>"><%: Resources.Templates.ECommerceModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.CaseTitleToken %>"><%: Resources.Templates.ECommerceModule.CaseTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.CategoryToken %>"><%: Resources.Templates.ECommerceModule.CategoryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientToken %>"><%: Resources.Templates.ECommerceModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactDepartmentToken %>"><%: Resources.Templates.ECommerceModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactFirstNameToken %>"><%: Resources.Templates.ECommerceModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.ECommerceModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactSalutationToken %>"><%: Resources.Templates.ECommerceModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactTitleToken %>"><%: Resources.Templates.ECommerceModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.ECommerceModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.ECommerceModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ClientReferenceToken %>"><%: Resources.Templates.ECommerceModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.FileOpenedDateToken %>"><%: Resources.Templates.ECommerceModule.FileOpenedDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.FileClosedDateToken %>"><%: Resources.Templates.ECommerceModule.FileClosedDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.MisuseToken %>"><%: Resources.Templates.ECommerceModule.MisuseToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ECommerceIdNumberToken %>"><%: Resources.Templates.ECommerceModule.ECommerceIdNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.FileReferenceToken %>"><%: Resources.Templates.ECommerceModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.GroupsToken %>"><%: Resources.Templates.ECommerceModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.JurisdictionToken %>"><%: Resources.Templates.ECommerceModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.NotesToken %>"><%: Resources.Templates.ECommerceModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OpposerRepresentedByToken %>"><%: Resources.Templates.ECommerceModule.OpposerRepresentedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OpposingPartiesToken %>"><%: Resources.Templates.ECommerceModule.OpposingPartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OpposingPartiesIPRightsInvolvedToken %>"><%: Resources.Templates.ECommerceModule.OpposingPartiesIPRightsInvolvedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OpposingPartiesWithRoleToken %>"><%: Resources.Templates.ECommerceModule.OpposingPartiesWithRoleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OurPartiesToken %>"><%: Resources.Templates.ECommerceModule.OurPartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OurPartiesWithRoleToken %>"><%: Resources.Templates.ECommerceModule.OurPartiesWithRoleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.OurPartyIPRightsInvolvedToken %>"><%: Resources.Templates.ECommerceModule.OurPartyIPRightsInvolvedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.RegionToken %>"><%: Resources.Templates.ECommerceModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.ResolutionToken %>"><%: Resources.Templates.ECommerceModule.ResolutionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.SourceToken %>"><%: Resources.Templates.ECommerceModule.SourceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.StatusToken %>"><%: Resources.Templates.ECommerceModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.TodaysDateToken %>"><%: Resources.Templates.ECommerceModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.ECommerceModule.WipoCodeToken %>"><%: Resources.Templates.ECommerceModule.WipoCodeToken %></span></li>
                </ul>
            </li>
            <%--Patents Module--%>
            <li id="PatentNodes"><b><%: Resources.Templates.Details.PatentModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.FirstNamedInventorToken %>"><%: Resources.Templates.PatentModule.FirstNamedInventorToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AbstractToken %>"><%: Resources.Templates.PatentModule.AbstractToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentToken %>"><%: Resources.Templates.PatentModule.AgentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentAddressBlockToken %>"><%: Resources.Templates.PatentModule.AgentAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentAddressLineToken %>"><%: Resources.Templates.PatentModule.AgentAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentAddressLine1Token %>"><%: Resources.Templates.PatentModule.AgentAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentAddressLine2Token %>"><%: Resources.Templates.PatentModule.AgentAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentCityToken %>"><%: Resources.Templates.PatentModule.AgentCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactDepartmentToken %>"><%: Resources.Templates.PatentModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactFirstNameToken %>"><%: Resources.Templates.PatentModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactLastNameToken %>"><%: Resources.Templates.PatentModule.AgentContactLastNameToken %></span></li>               
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.PatentModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactSalutationToken %>"><%: Resources.Templates.PatentModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactTitleToken %>"><%: Resources.Templates.PatentModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.PatentModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.PatentModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentCountryToken %>"><%: Resources.Templates.PatentModule.AgentCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentPostalCodeToken %>"><%: Resources.Templates.PatentModule.AgentPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentsReferenceToken %>"><%: Resources.Templates.PatentModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentRolesToken %>"><%: Resources.Templates.PatentModule.AgentRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentStateToken %>"><%: Resources.Templates.PatentModule.AgentStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AgentsToken %>"><%: Resources.Templates.PatentModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AiaToken %>"><%: Resources.Templates.PatentModule.AiaToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AnnuityPaymentProviderToken %>"><%: Resources.Templates.PatentModule.AnnuityPaymentProviderToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.AppealFiledDateToken %>"><%: Resources.Templates.PatentModule.AppealFiledDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ApplicantToken %>"><%: Resources.Templates.PatentModule.ApplicantToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ApplicationNumberToken %>"><%: Resources.Templates.PatentModule.ApplicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ApplicationPCTNumberToken %>"><%: Resources.Templates.PatentModule.ApplicationPCTNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.BrandingLogoSmallToken %>"><%: Resources.Templates.PatentModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.BrandingLogoMediumToken %>"><%: Resources.Templates.PatentModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.BrandingLogoLargeToken %>"><%: Resources.Templates.PatentModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CaseClosedToken %>"><%: Resources.Templates.PatentModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CaseDescriptionToken %>"><%: Resources.Templates.PatentModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CaseOpenedToken %>"><%: Resources.Templates.PatentModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CaseTypesToken %>"><%: Resources.Templates.PatentModule.CaseTypesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientToken %>"><%: Resources.Templates.PatentModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientAddressBlockToken %>"><%: Resources.Templates.PatentModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientAddressLineToken %>"><%: Resources.Templates.PatentModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientAddressLine1Token %>"><%: Resources.Templates.PatentModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientAddressLine2Token %>"><%: Resources.Templates.PatentModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientCityToken %>"><%: Resources.Templates.PatentModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactDepartmentToken %>"><%: Resources.Templates.PatentModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactFirstNameToken %>"><%: Resources.Templates.PatentModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactLastNameToken %>"><%: Resources.Templates.PatentModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.PatentModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactSalutationToken %>"><%: Resources.Templates.PatentModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactTitleToken %>"><%: Resources.Templates.PatentModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.PatentModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.PatentModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientCountryToken %>"><%: Resources.Templates.PatentModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientNumberToken %>"><%: Resources.Templates.PatentModule.ClientNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientPostalCodeToken %>"><%: Resources.Templates.PatentModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientReferenceToken %>"><%: Resources.Templates.PatentModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ClientStateToken %>"><%: Resources.Templates.PatentModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CostCenterToken %>"><%: Resources.Templates.PatentModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CPCToken %>"><%: Resources.Templates.PatentModule.CPCToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CreatedByToken %>"><%: Resources.Templates.PatentModule.CreatedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.CreatedOnToken %>"><%: Resources.Templates.PatentModule.CreatedOnToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.DateOfStatusToken %>"><%: Resources.Templates.PatentModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.DisclosureFirstSaleToken %>"><%: Resources.Templates.PatentModule.DisclosureFirstSaleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.DrawingSmallToken %>"><%: Resources.Templates.PatentModule.DrawingSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.DrawingMediumToken %>"><%: Resources.Templates.PatentModule.DrawingMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.DrawingLargeToken %>"><%: Resources.Templates.PatentModule.DrawingLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.EntityStatusToken %>"><%: Resources.Templates.PatentModule.EntityStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.EarliestPriorityDateToken %>"><%: Resources.Templates.PatentModule.EarliestPriorityDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ExaminersAnswerDateToken %>"><%: Resources.Templates.PatentModule.ExaminersAnswerDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ExaminerNameToken %>"><%: Resources.Templates.PatentModule.ExaminerNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.FamilyIdToken %>"><%: Resources.Templates.PatentModule.FamilyIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.FileReferenceToken %>"><%: Resources.Templates.PatentModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.FilingDateToken %>"><%: Resources.Templates.PatentModule.FilingDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.FinalRejectionMailedDateToken %>"><%: Resources.Templates.PatentModule.FinalRejectionMailedDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.GrantedToken %>"><%: Resources.Templates.PatentModule.GrantedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.GroupsToken %>"><%: Resources.Templates.PatentModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.GroupArtUnitToken %>"><%: Resources.Templates.PatentModule.GroupArtUnitToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.IPCToken %>"><%: Resources.Templates.PatentModule.IPCToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.JurisdictionToken %>"><%: Resources.Templates.PatentModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.LastUpdatedByToken %>"><%: Resources.Templates.PatentModule.LastUpdatedByToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.LastUpdatedOnToken %>"><%: Resources.Templates.PatentModule.LastUpdatedOnToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ManagersToken %>"><%: Resources.Templates.PatentModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.MatterNumberToken %>"><%: Resources.Templates.PatentModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.NextDeadlineToken %>"><%: Resources.Templates.PatentModule.NextDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.NextDeadlineLongToken %>"><%: Resources.Templates.PatentModule.NextDeadlineLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.NextReminderToken %>"><%: Resources.Templates.PatentModule.NextReminderToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.NextReminderLongToken %>"><%: Resources.Templates.PatentModule.NextReminderLongToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.NotesToken %>"><%: Resources.Templates.PatentModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OfficeActionDateToken %>"><%: Resources.Templates.PatentModule.OfficeActionDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyToken %>"><%: Resources.Templates.PatentModule.OtherPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyAddressBlockToken %>"><%: Resources.Templates.PatentModule.OtherPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyAddressLineToken %>"><%: Resources.Templates.PatentModule.OtherPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyAddressLine1Token %>"><%: Resources.Templates.PatentModule.OtherPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyAddressLine2Token %>"><%: Resources.Templates.PatentModule.OtherPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyCityToken %>"><%: Resources.Templates.PatentModule.OtherPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyCountryToken %>"><%: Resources.Templates.PatentModule.OtherPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyPostalCodeToken %>"><%: Resources.Templates.PatentModule.OtherPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OtherPartyStateToken %>"><%: Resources.Templates.PatentModule.OtherPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyToken %>"><%: Resources.Templates.PatentModule.OurPartyToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyAddressBlockToken %>"><%: Resources.Templates.PatentModule.OurPartyAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyAddressLineToken %>"><%: Resources.Templates.PatentModule.OurPartyAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyAddressLine1Token %>"><%: Resources.Templates.PatentModule.OurPartyAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyAddressLine2Token %>"><%: Resources.Templates.PatentModule.OurPartyAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyCityToken %>"><%: Resources.Templates.PatentModule.OurPartyCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyCountryToken %>"><%: Resources.Templates.PatentModule.OurPartyCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyPostalCodeToken %>"><%: Resources.Templates.PatentModule.OurPartyPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OurPartyStateToken %>"><%: Resources.Templates.PatentModule.OurPartyStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.OwnerToken %>"><%: Resources.Templates.PatentModule.OwnerToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartiesToken %>"><%: Resources.Templates.PatentModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartiesAndCompanyNumbersToken %>"><%: Resources.Templates.PatentModule.PartiesAndCompanyNumbersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartiesAndRolesToken %>"><%: Resources.Templates.PatentModule.PartiesAndRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeAddressBlockToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeAddressLineToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeAddressLine1Token %>"><%: Resources.Templates.PatentModule.PartyAssigneeAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeAddressLine2Token %>"><%: Resources.Templates.PatentModule.PartyAssigneeAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeCityToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeCountryToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeIncorporatedInToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneePostalCodeToken %>"><%: Resources.Templates.PatentModule.PartyAssigneePostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeStateToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssigneeTypeOfEntityToken %>"><%: Resources.Templates.PatentModule.PartyAssigneeTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorToken %>"><%: Resources.Templates.PatentModule.PartyAssignorToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorAddressBlockToken %>"><%: Resources.Templates.PatentModule.PartyAssignorAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorAddressLineToken %>"><%: Resources.Templates.PatentModule.PartyAssignorAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorAddressLine1Token %>"><%: Resources.Templates.PatentModule.PartyAssignorAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorAddressLine2Token %>"><%: Resources.Templates.PatentModule.PartyAssignorAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorCityToken %>"><%: Resources.Templates.PatentModule.PartyAssignorCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorCountryToken %>"><%: Resources.Templates.PatentModule.PartyAssignorCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorIncorporatedInToken %>"><%: Resources.Templates.PatentModule.PartyAssignorIncorporatedInToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorPostalCodeToken %>"><%: Resources.Templates.PatentModule.PartyAssignorPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorStateToken %>"><%: Resources.Templates.PatentModule.PartyAssignorStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PartyAssignorTypeOfEntityToken %>"><%: Resources.Templates.PatentModule.PartyAssignorTypeOfEntityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PatentCaseTypeToken %>"><%: Resources.Templates.PatentModule.PatentCaseTypeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PatentExpiresDateToken %>"><%: Resources.Templates.PatentModule.PatentExpiresDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PatentExpiryDateNotionalToken %>"><%: Resources.Templates.PatentModule.PatentExpiryDateNotionalToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PatentIdToken %>"><%: Resources.Templates.PatentModule.PatentIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PatentNumberToken %>"><%: Resources.Templates.PatentModule.PatentNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PTADaysToken %>"><%: Resources.Templates.PatentModule.PTADaysToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PublicationNumberToken %>"><%: Resources.Templates.PatentModule.PublicationNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.PublishedToken %>"><%: Resources.Templates.PatentModule.PublishedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.RegionToken %>"><%: Resources.Templates.PatentModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.ResponsibleOfficeToken %>"><%: Resources.Templates.PatentModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.StatusToken %>"><%: Resources.Templates.PatentModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.SubstatusToken %>"><%: Resources.Templates.PatentModule.SubstatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.TitleToken %>"><%: Resources.Templates.PatentModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.TodaysDateToken %>"><%: Resources.Templates.PatentModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.TypePatentsAndDesignsToken %>"><%: Resources.Templates.PatentModule.TypePatentsAndDesignsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.USPCToken %>"><%: Resources.Templates.PatentModule.USPCToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.PatentModule.WipoCodeToken %>"><%: Resources.Templates.PatentModule.WipoCodeToken %></span></li>
                </ul>
            </li>
            <li id="ContractNodes"><b><%: Resources.Templates.Details.ContractsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseClosedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %>"><%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ManagersToken %>"><%: Resources.Templates.AdditionalIPModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ContractIdToken %>"><%: Resources.Templates.AdditionalIPModule.ContractIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientToken %>"><%: Resources.Templates.AdditionalIPModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCityToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCountryToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientStateToken %>"><%: Resources.Templates.AdditionalIPModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ConsiderationToken %>"><%: Resources.Templates.AdditionalIPModule.ConsiderationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CostCenterToken %>"><%: Resources.Templates.AdditionalIPModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfAgreementToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfAgreementToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateRecordedToken %>"><%: Resources.Templates.AdditionalIPModule.DateRecordedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ExclusivityToken %>"><%: Resources.Templates.AdditionalIPModule.ExclusivityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.FileReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GroupsToken %>"><%: Resources.Templates.AdditionalIPModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.JurisdictionToken %>"><%: Resources.Templates.AdditionalIPModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.MatterNumberToken %>"><%: Resources.Templates.AdditionalIPModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NotesToken %>"><%: Resources.Templates.AdditionalIPModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegionToken %>"><%: Resources.Templates.AdditionalIPModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RelatedTrademarksToken %>"><%: Resources.Templates.AdditionalIPModule.RelatedTrademarksToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RelatedTrademarksTableToken %>"><%: Resources.Templates.AdditionalIPModule.RelatedTrademarksTableToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RenewableToken %>"><%: Resources.Templates.AdditionalIPModule.RenewableToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %>"><%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.StatusToken %>"><%: Resources.Templates.AdditionalIPModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %>"><%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TermToken %>"><%: Resources.Templates.AdditionalIPModule.TermToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleToken %>"><%: Resources.Templates.AdditionalIPModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TodaysDateToken %>"><%: Resources.Templates.AdditionalIPModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypeOfAgreementToken %>"><%: Resources.Templates.AdditionalIPModule.TypeOfAgreementToken %></span></li>
                </ul>
            </li>
            <li id="CopyrightNodes"><b><%: Resources.Templates.Details.CopyrightsModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AuthorsToken %>"><%: Resources.Templates.AdditionalIPModule.AuthorsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseClosedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %>"><%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ManagersToken %>"><%: Resources.Templates.AdditionalIPModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientToken %>"><%: Resources.Templates.AdditionalIPModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCityToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCountryToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientStateToken %>"><%: Resources.Templates.AdditionalIPModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CopyRightExpiresToken %>"><%: Resources.Templates.AdditionalIPModule.CopyRightExpiresToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CopyrightIdToken %>"><%: Resources.Templates.AdditionalIPModule.CopyrightIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CostCenterToken %>"><%: Resources.Templates.AdditionalIPModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateRegisteredToken %>"><%: Resources.Templates.AdditionalIPModule.DateRegisteredToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.FileReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GroupsToken %>"><%: Resources.Templates.AdditionalIPModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.HowOwnershipAquiredToken %>"><%: Resources.Templates.AdditionalIPModule.HowOwnershipAquiredToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.JurisdictionToken %>"><%: Resources.Templates.AdditionalIPModule.JurisdictionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.MatterNumberToken %>"><%: Resources.Templates.AdditionalIPModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NotesToken %>"><%: Resources.Templates.AdditionalIPModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleCopyrightsToken %>"><%: Resources.Templates.AdditionalIPModule.TitleCopyrightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesAndRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegionToken %>"><%: Resources.Templates.AdditionalIPModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegistrationNumberCopyrightsToken %>"><%: Resources.Templates.AdditionalIPModule.RegistrationNumberCopyrightsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %>"><%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.StatusToken %>"><%: Resources.Templates.AdditionalIPModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %>"><%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleToken %>"><%: Resources.Templates.AdditionalIPModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TodaysDateToken %>"><%: Resources.Templates.AdditionalIPModule.TodaysDateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TypeOfWorkToken %>"><%: Resources.Templates.AdditionalIPModule.TypeOfWorkToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.WhereFirstPublishedToken %>"><%: Resources.Templates.AdditionalIPModule.WhereFirstPublishedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.YearCompletedToken %>"><%: Resources.Templates.AdditionalIPModule.YearCompletedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.YearFirstPublishedToken %>"><%: Resources.Templates.AdditionalIPModule.YearFirstPublishedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.YearOfAuthorsDeathToken %>"><%: Resources.Templates.AdditionalIPModule.YearOfAuthorsDeathToken %></span></li>

                </ul>
            </li>
            <li id="GeneralMatterNodes"><b><%: Resources.Templates.Details.GeneralMattersModuleHeaderLabel %></b>
                <ul style="font-size: 10px">
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentToken %>"><%: Resources.Templates.AdditionalIPModule.AgentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.AgentAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentCityToken %>"><%: Resources.Templates.AdditionalIPModule.AgentCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactLastNameToken %></span></li>               
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.AgentContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentCountryToken %>"><%: Resources.Templates.AdditionalIPModule.AgentCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.AgentPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentsReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.AgentsReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentRolesToken %>"><%: Resources.Templates.AdditionalIPModule.AgentRolesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentStateToken %>"><%: Resources.Templates.AdditionalIPModule.AgentStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.AgentsToken %>"><%: Resources.Templates.AdditionalIPModule.AgentsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoSmallToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoMediumToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %>"><%: Resources.Templates.AdditionalIPModule.BrandingLogoLargeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseClosedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseClosedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %>"><%: Resources.Templates.AdditionalIPModule.CaseDescriptionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ManagersToken %>"><%: Resources.Templates.AdditionalIPModule.ManagersToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %>"><%: Resources.Templates.AdditionalIPModule.CaseOpenedToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientToken %>"><%: Resources.Templates.AdditionalIPModule.ClientToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressBlockToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine1Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %>"><%: Resources.Templates.AdditionalIPModule.ClientAddressLine2Token %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCityToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCityToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactDepartmentToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactFirstNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactLastNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactPreferredNameToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactSalutationToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactTitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkPhoneToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %>"><%: Resources.Templates.AdditionalIPModule.ClientContactWorkingEmailToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientCountryToken %>"><%: Resources.Templates.AdditionalIPModule.ClientCountryToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %>"><%: Resources.Templates.AdditionalIPModule.ClientPostalCodeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.ClientReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ClientStateToken %>"><%: Resources.Templates.AdditionalIPModule.ClientStateToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.CostCenterToken %>"><%: Resources.Templates.AdditionalIPModule.CostCenterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %>"><%: Resources.Templates.AdditionalIPModule.DateOfStatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.FileReferenceToken %>"><%: Resources.Templates.AdditionalIPModule.FileReferenceToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GeneralMatterIdToken %>"><%: Resources.Templates.AdditionalIPModule.GeneralMatterIdToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.GroupsToken %>"><%: Resources.Templates.AdditionalIPModule.GroupsToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.JurisdictionToken %>"><%: Resources.Templates.AdditionalIPModule.JurisdictionToken %></span></li>
<%--                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NextDeadlineToken %>"><%: Resources.Templates.AdditionalIPModule.NextDeadlineToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NextReminderToken %>"><%: Resources.Templates.AdditionalIPModule.NextReminderToken %></span></li>--%>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.MatterNumberToken %>"><%: Resources.Templates.AdditionalIPModule.MatterNumberToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.NotesToken %>"><%: Resources.Templates.AdditionalIPModule.NotesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.PartiesToken %>"><%: Resources.Templates.AdditionalIPModule.PartiesToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.RegionToken %>"><%: Resources.Templates.AdditionalIPModule.RegionToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %>"><%: Resources.Templates.AdditionalIPModule.ResponsibleOfficeToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.StatusToken %>"><%: Resources.Templates.AdditionalIPModule.StatusToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %>"><%: Resources.Templates.AdditionalIPModule.SubjectMatterToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TitleToken %>"><%: Resources.Templates.AdditionalIPModule.TitleToken %></span></li>
                    <li><span class="draggablenode" title="<%: Resources.Templates.AdditionalIPModule.TodaysDateToken %>"><%: Resources.Templates.AdditionalIPModule.TodaysDateToken %></span></li>
                </ul>
            </li>
        </ul>
    </div>
    <%}%>

    <div class="pad20">
    </div>
<%--    Only Otemplate owner can delete the template--%>
    <% if (Model.IsNew == false && ((Model.OwnerAccountID != Guid.Empty && Model.OwnerAccountID == TMCloud.Classes.UserContext.GetActiveUserData().AccountID) 
                                || (Model.OwnerAccountID == Guid.Empty && TMCloud.Classes.UserContext.GetActiveUserData().AccountID == TMCloud.Globals.SUPERADMIN_GUID))){%>
    <div class="grid_27 omega">
        <div class="floatRight">
            <div class="GreyButton" onclick="javascript:onDeleteRecord()">
                <div class="floatLeft">
                    <img src="<%: Url.Content("~/Images/Icons/trash.png") %>" style="width: 16px; height: 16px" title="<%: Resources.Templates.Details.Delete %>" alt="<%: Resources.Templates.Details.Delete %>" />&nbsp;
                </div>
                <div class="floatRight">
                    <div class="pad2">
                    </div>
                    <%: Resources.Templates.Details.Delete %>
                </div>
                <div class="clear">
                </div>
            </div>
        </div>
    </div>
    <%} %>

    <script type="text/javascript">

        $("#treeView").kendoTreeView();

        var editorOffset;
        var editorWidth;
        var editorHeight;
        var inEditor = false;
        var inSubject = false;
        var dragX = 0;
        var dragY = 0;
        var iframeDoc;
        var editor;

        function treenodeDragstart(e) {
            var kContent = $('.k-content');
            var kContentParent = $(kContent).parent();
            $(kContentParent).prepend('<div id="editorOverlay" class="overlay"></div>');
            $("#editorOverlay").css({
                "width": 601,
                "height": 330,
                //"width": ($(kContent).outerWidth() - 2),
                //"height": ($(kContent).outerHeight() - 2),
                // This appears to have changed with Kendo Update, don't offset left anymore of it overlaps treeview
                //"left": $(kContent).offset().left
            });

            $(".overlay").kendoDropTarget({
                drop: dropTargetDrop,
                dragenter: dropTargetDragEnter,
                dragleave: dropTargetDragLeave
            });

            var subjectWrapper = $('#subjectWrapper');
            $('#subjectWrapper').append('<div id="subjectOverlay" class="overlay">' + $('#EmailSubject').val() + '</div>');
            $("#subjectOverlay").css({
                "width": $(subjectWrapper).outerWidth(),
                "height": $(subjectWrapper).outerHeight(),
                // This appears to have changed with Kendo Update, don't offset left anymore of it overlaps treeview
                //"left": $(subjectWrapper).offset().left
            });

            $("#subjectOverlay").kendoDropTarget({
                drop: subjectDropTargetDrop,
                dragenter: subjectDropTargetDragEnter,
                dragleave: subjectDropTargetDragLeave
            });
        }

        function treenodeDrop(e) {
            $('#editorOverlay').remove();
            $("#subjectOverlay").remove();
        }

        function treenodeDrag(event) {
            var editor = CKEDITOR.instances.EmailBody;
            if (inEditor) {
                var x = event.x.client - editorOffset.left;
                var y = parseInt(event.y.client - 155);
                //var y = parseInt(event.y.client - editorOffset.top);
                //        var x = event.x.client;
                //var y = event.y.client;
                dragX = x;
                dragY = y;
                console.log(x + "," + y);
                // Try the standards-based way first
                //if (iframeDoc.caretPositionFromPoint) {
                if (editor.getSelection().getRanges()[0] != null) {
                    var sel = editor.getSelection();
                    //var pos = iframeDoc.caretPositionFromPoint(x, y);
                    var pos = editor.getSelection().selectRanges(x, y);
                    try {
                        range = editor.createRange();
                        range.setStart(pos.offsetNode, pos.offset);
                        range.setEnd(pos.offsetNode, pos.offset);
                        range.collapse(true);
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                    catch (error) {
                        //handle no container
                    }
                }
                //    // Next, the WebKit way
                //else if (editor.getSelection().getRanges()[0] != null) {
                //    var sel = editor.getSelection();
                //    try {
                //        //range = iframeDoc.caretRangeFromPoint(x, y);
                //        range = editor.getSelection().getRanges();
                //        range.setStart(range.startContainer, range.startOffset);
                //        range.setEnd(range.startContainer, range.startOffset);

                //        sel.removeAllRanges();
                //        sel.addRange(range);
                //    }
                //    catch (error) {
                //        //handle no container
                //    }
                //}
                //    // Finally, the IE way
                //else if (editor.getSelection().getRanges()[0] != null) {
                //    $('.overlay').hide();
                //    //range = iframeDoc.body.createTextRange();
                //    range = editor.createRange();
                //    try {
                //        range.moveToPoint(x, y);
                //    }
                //    catch (error) {
                //        //handle no container
                //    }

                //    range.select();

                //    $('.overlay').show();
                //}
            }
            else if (inSubject) {
                var x = event.x.client;
                var y = event.y.client;
                dragX = x;
                dragY = y;
                var offset;
                // Try the standards-based way first
                if (editor.getSelection().getRanges()[0] != null) {
                    var pos = editor.getSelection().selectRanges(x, y);
                    offset = pos.offset;
                }
                    // Next, the WebKit way
                else if (document.caretRangeFromPoint) {
                    range = document.caretRangeFromPoint(x, y);
                    offset = range.startOffset;
                } else if (document.body.createTextRange) {
                    range = document.body.createTextRange();

                    range.moveToPoint(x, y);
                    range.select();
                    offset = caret(document.getElementById('subjectOverlay'));

                }

                setCaretPosition(document.getElementById('EmailSubject'), offset);
            }
        }
        function doGetCaretPosition(oField) {

            // Initialize
            var iCaretPos = 0;

            // IE Support
            if (document.selection) {

                // Set focus on the element
                oField.focus();

                // To get cursor position, get empty selection range
                var oSel = document.selection.createRange();

                // Move selection start to 0 position
                oSel.moveStart('character', -oField.value.length);

                // The caret position is selection length
                iCaretPos = oSel.text.length;
            }

                // Firefox support
            else if (oField.selectionStart || oField.selectionStart == '0')
                iCaretPos = oField.selectionStart;

            // Return results
            return (iCaretPos);
        }
        function dropTargetDragEnter(e) {
            inEditor = true;
            editor.focus();
            editorOffset = $("#EmailBody").parent().offset();
            editorWidth = $("#EmailBody").parent().width();
            editorHeight = $("#EmailBody").parent().height();
        }

        function dropTargetDragLeave(e) {
            inEditor = false;
        }

        function dropTargetDrop(e) {
            var x = e.clientX;
            var y = e.clientY;
            var editor = CKEDITOR.instances.EmailBody;
            $('#editorOverlay').remove();
            var range;
            editor.focus();
            // Try the standards-based way first
            if (editor.getSelection().getRanges()[0] != null) {
                //var pos = iframeDoc.caretPositionFromPoint(dragX, dragY);
                //var pos = editor.getSelection().selectRanges(x, y);
                //range = editor.createRange();
                //range.setStart(pos.offsetNode, pos.offset);
                //range.collapse(true);

                range = editor.getSelection().getRanges();
                editor.getSelection().selectRanges(range);
            }
            //    // Next, the WebKit way
            //else if (editor.getSelection().getRanges()[0] != null) {
            //    //range = iframeDoc.caretRangeFromPoint(dragX, dragY);
            //    var pos = editor.getSelection().selectRanges(x, y);
            //    range = editor.createRange();
            //}
            //    // Finally, the IE way
            //else if (iframeDoc.body.createTextRange) {
            //    var textRange = iframeDoc.body.createTextRange();
            //    try {
            //        textRange.moveToPoint(dragX, dragY);
            //    }
            //    catch (error) {
            //        //handle no container
            //    }

            //    textRange.select();

            //    //Gets the caret as an offset
            //    var caret = getCaret(editor.body);

            //    range = iframeDoc.createRange();
            //    range.setStart(editor.body.firstChild, caret);
            //    range.collapse(true);
            //}

            editor.getSelection().selectRanges(range);
            //editor.exec("insertHtml", {
            //    value: " {" + e.draggable.hint[0].textContent + "} "
            //});
            editor.insertHtml("{" + e.draggable.hint[0].textContent + "}");
            inEditor = false;
        }

        function subjectDropTargetDrop(e) {
            var caretPos = document.getElementById("EmailSubject").selectionStart;
            var textAreaTxt = $("#EmailSubject").val();
            var txtToAdd = "{" + e.draggable.element[0].textContent + "} ";
            $("#EmailSubject").val(textAreaTxt.substring(0, caretPos) + txtToAdd + textAreaTxt.substring(caretPos));

            inSubject = false;
        }

        function subjectDropTargetDragEnter(e) {
            inSubject = true;
            editorOffset = $("#EmailSubject").parent().offset();
            editorWidth = $("#EmailSubject").parent().width();
            editorHeight = $("#EmailSubject").parent().height();
        }

        function subjectDropTargetDragLeave(e) {
            inSubject = false;
        }

        // Prevent default <p> addition when hitting enter
        var editorNS = kendo.ui.editor,
        registerTool = editorNS.EditorUtils.registerTool,
        Tool = editorNS.Tool;
        registerTool("insertLineBreak", new Tool({ key: 13, command: editorNS.NewLineCommand }));
        registerTool("insertParagraph", new Tool({ key: 13, shift: true, command: editorNS.ParagraphCommand }));

        //var editor;


        //var editor = CKEDITOR.document.getById('EmailBody');
        //editor = CKEDITOR.replace('EmailBody');

        //editor = $("#EmailBody").kendoEditor({
        //    tools: ["bold",
        //            "italic",
        //            "underline",
        //            "strikethrough",
        //            "justifyLeft",
        //            "justifyCenter",
        //            "justifyRight",
        //            "justifyFull",
        //            "insertUnorderedList",
        //            "insertOrderedList",
        //            "indent",
        //            "outdent",
        //            "createLink",
        //            "unlink",
        //            "insertImage",
        //            "insertFile",
        //            "subscript",
        //            "superscript",
        //            "createTable",
        //            "addRowAbove",
        //            "addRowBelow",
        //            "addColumnLeft",
        //            "addColumnRight",
        //            "deleteRow",
        //            "deleteColumn",
        //            "viewHtml",
        //            "formatting",
        //            "cleanFormatting",
        //            "fontName",
        //            "fontSize",
        //            "foreColor",
        //            "backColor",
        //            {
        //                name: "custom",
        //                tooltip: 'Print',
        //                exec: function (e) {
        //                    var editorContent = $(this).data("kendoEditor").document.documentElement.outerHTML,
        //                        win = window.open(),
        //                        doc = win.document;

        //                    doc.write(editorContent);
        //                    doc.close();
        //                    win.print();
        //                }
        //            }]
        //}).data("kendoEditor");

        <% if (!ViewBag.ReadOnly){%>
        //iframeDoc = document.getElementsByTagName('iframe')[0].contentWindow.document;
        //var test = CKEDITOR.dom.element("iframe");
        //iframeDoc = CKEDITOR.document;
        //iframeDoc = CKEDITOR.dom.element("iframe");
        //iframeDoc = CKEDITOR.dom.getInputElement().contentWindow.document; //CKEDITOR.document.getById('cke_1_contents').contentWindow.document;
        //iframedoc = CKEDITOR.editable;
        <% }%>
        $(".draggablenode").each(function () {
            $(this).kendoDraggable({
                cursorOffset: {
                    top: 10,
                    left: 10
                },
                hint: function (element) {
                    var cloned = $(element).clone();
                    $(cloned).addClass("k-header k-drag-clue");
                    return cloned;
                },
                dragstart: treenodeDragstart,
                dragend: treenodeDrop,
                drag: treenodeDrag
            });
        });

        function getCaret(node) {
            //node.focus(); 
            /* without node.focus() IE will returns -1 when focus is not on node */
            if (node.selectionStart) return node.selectionStart;
            else if (!document.selection) return 0;
            var c = "\001";
            var sel = document.selection.createRange();
            var dul = sel.duplicate();
            var len = 0;
            dul.moveToElementText(node);
            sel.text = c;
            len = (dul.text.indexOf(c));
            sel.moveStart('character', -1);
            sel.text = "";
            return len;
        }

        //Used for setting caret in elements such as forms
        function setCaretPosition(ctrl, pos) {
            if (ctrl.setSelectionRange) {
                ctrl.focus();
                ctrl.setSelectionRange(pos, pos);
            } else if (ctrl.createTextRange) {
                var range = ctrl.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        }

        $("#TemplateTypeID").change(function (e) {
            if ($("#TemplateTypeID").val() == "1d866bd5-c419-e411-80ca-005056b31bc3") {
                document.getElementById("SubjectDiv").removeAttribute('style');
            }
            else {
                document.getElementById("SubjectDiv").style.display = 'none';
            }
        });

        $("#ModuleTypeID").change(function (e) {
            showSelectedModuleInfo();
        });

        function showSelectedModuleInfo() {
            <% if (ViewBag.ReadOnly == false) {%>
            document.getElementById("AccountManagementNodes").style.display = 'none';
            document.getElementById("TrademarkNodes").style.display = 'none';
            document.getElementById("AddressBookCompanyNodes").style.display = 'none';
            document.getElementById("AddressBookPeopleNodes").style.display = 'none';
            document.getElementById("DemoNodes").style.display = 'none';
            document.getElementById("DocketNodes").style.display = 'none';
            document.getElementById("DocumentNodes").style.display = 'none';
            document.getElementById("TrademarkProfileNodes").style.display = 'none';
            document.getElementById("DisputeNodes").style.display = 'none';
            document.getElementById("ReferenceNodes").style.display = 'none';
            document.getElementById("DesignRightNodes").style.display = 'none';
            document.getElementById("SearchNodes").style.display = 'none';
            document.getElementById("DomainNameNodes").style.display = 'none';
            document.getElementById("AssignmentNodes").style.display = 'none';
            document.getElementById("ECommerceNodes").style.display = 'none';
            document.getElementById("TreeViewDiv").style.display = 'none';
            document.getElementById("TrademarkStatusLabelDiv").style.display = 'none';
            document.getElementById("TrademarkStatusSelectDiv").style.display = 'none';
            document.getElementById("PatentNodes").style.display = 'none';
            document.getElementById("AdditionalIpNodes").style.display = 'none';
            document.getElementById("CopyrightNodes").style.display = 'none';
            document.getElementById("ContractNodes").style.display = 'none';
            document.getElementById("GeneralMatterNodes").style.display = 'none';

            // Entire Token Div
            if ($("#ModuleTypeID").val() != "00000000-0000-0000-0000-000000000000") {
                document.getElementById("TreeViewDiv").removeAttribute('style');
            }
            // Account Management
            if ($("#ModuleTypeID").val() == "6992a80e-af4b-4652-998d-a58ce0517450") {
                document.getElementById("AccountManagementNodes").removeAttribute('style');
            }
            // Trademarks Module
            if ($("#ModuleTypeID").val() == "4edd0d14-9b49-4755-beb7-c258fa8e86b5") {
                document.getElementById("TrademarkNodes").removeAttribute('style');
                document.getElementById("TrademarkStatusLabelDiv").removeAttribute('style');
                document.getElementById("TrademarkStatusSelectDiv").removeAttribute('style');
            }
            // Address Book - Companies Module
            if ($("#ModuleTypeID").val() == "b7845034-fa7f-4ea3-b245-01906d41b425") {
                document.getElementById("AddressBookCompanyNodes").removeAttribute('style');
            }
            // Address Book - People Module
            if ($("#ModuleTypeID").val() == "c5593a7b-38ae-4b4d-b912-0a6f764f27b1") {
                document.getElementById("AddressBookPeopleNodes").removeAttribute('style');
            }
            // Demos
            if ($("#ModuleTypeID").val() == "2dc64db4-a867-4955-bf1b-8d3c5c7f42fd") {
                document.getElementById("DemoNodes").removeAttribute('style');
            }     
            // Docket Module
            if ($("#ModuleTypeID").val() == "8857b23d-4c4c-42f5-a08b-12102a21c9a3") {
                document.getElementById("DocketNodes").removeAttribute('style');
            }
            // Document Module
            if ($("#ModuleTypeID").val() == "1e5eaa78-2e85-4307-9c7f-1799ea9f4801") {
                document.getElementById("DocumentNodes").removeAttribute('style');
            }
            // Trademark Profile Module
            if ($("#ModuleTypeID").val() == "fa298344-f06c-413c-a917-3e32c2748622") {
                document.getElementById("TrademarkProfileNodes").removeAttribute('style');
            }
            // Dispute Module
            if ($("#ModuleTypeID").val() == "a5d4b016-00f1-493c-bc1e-5072d4554aaf") {
                document.getElementById("DisputeNodes").removeAttribute('style');
            }
            // Reference Module
            if ($("#ModuleTypeID").val() == "76e2be20-b6d9-4ea4-9a88-6dd7307e60e9") {
                document.getElementById("ReferenceNodes").removeAttribute('style');
            }
            // Design Right Module
            if ($("#ModuleTypeID").val() == "e2d2257c-4a25-4dd8-beb6-922b1c42a73f") {
                document.getElementById("DesignRightNodes").removeAttribute('style');
            }
            // Contract Module
            if ($("#ModuleTypeID").val() == "a98860fa-9bb5-4c4a-beb0-a38cf00ec340") {
                document.getElementById("ContractNodes").removeAttribute('style');
            }
            // Search Module
            if ($("#ModuleTypeID").val() == "a313b86b-2e82-4213-8f08-b38e28fed13b") {
                document.getElementById("SearchNodes").removeAttribute('style');
            }
            // Domain Names Module
            if ($("#ModuleTypeID").val() == "604e2a9c-cdbf-4c14-8ba0-bf36836515cd") {
                document.getElementById("DomainNameNodes").removeAttribute('style');
            }
            // Copyright Module
            if ($("#ModuleTypeID").val() == "a66524ba-5942-4429-842c-c9dbf39c29d2") {
                document.getElementById("CopyrightNodes").removeAttribute('style');
            }
            // Assignment Module
            if ($("#ModuleTypeID").val() == "495cacca-9570-4942-b548-efe7cdadcffb") {
                document.getElementById("AssignmentNodes").removeAttribute('style');
            }
            // Additional IP Module
            if ($("#ModuleTypeID").val() == "20b52f7e-5fb1-41ed-b65e-fdae23b090ec") {
                document.getElementById("AdditionalIpNodes").removeAttribute('style');
            }
            // E-Commerce Module
            if ($("#ModuleTypeID").val() == "1494b54f-c855-492b-b2d9-b448b777f4f8") {
                document.getElementById("ECommerceNodes").removeAttribute('style');
            }
            // Patent Module
            if ($("#ModuleTypeID").val() == "4de847ce-ad55-4116-b4bd-a3161807cf13") {
                document.getElementById("PatentNodes").removeAttribute('style');
            }
            // General Matters Module
            if ($("#ModuleTypeID").val() == "d94c9a95-0844-4e0e-926d-9be62b0a7ed0") {
                document.getElementById("GeneralMatterNodes").removeAttribute('style');
            }

            // Default to expanded. This is done again at end so node is visible at this point
            if ($("#ModuleTypeID").val() != "00000000-0000-0000-0000-000000000000") {
                var treeView = $("#treeView").data("kendoTreeView");
                treeView.expand(".k-item");
            }
            <%}%>
        }

        $(document).ready(function () {
            var multiselectJurisdiction = $("#JurisdictionMultiDropDown").data("kendoMultiSelect");
            var requestUrl = '<%: Url.Action("GetJurisdictionsByTempleteID", "Templates")%>' + '?templateID=' + '<%: Model.ID %>';
            $.ajax({
                url: requestUrl,
                type: 'GET',
                success: function (result) {
                    // make sure data was found
                    if (result.isValid) {
                        //populate jurisdictions dropdown
                        multiselectJurisdiction.value(result.templateJurisdictions);
                    }
                    else {
                        multiselectJurisdiction.value('');
                    }
                }
            });

        });

        var toolbarOptions = [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['blockquote', 'code-block'],

            [{ 'header': 1 }, { 'header': 2 }],               // custom button values
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
            [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
            [{ 'direction': 'rtl' }],                         // text direction

            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            ['link', 'image', 'video', 'formula'],          // add's image support
            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'font': [] }],
            [{ 'align': [] }],

            ['clean']                                         // remove formatting button
        ];

        //const DragAndDropModule = require('quill-drag-and-drop-module');

        var quill = new Quill('#editor', {
            modules: {
                toolbar: toolbarOptions
            },
            dragAndDrop: {
                draggables: [
                    {
                        content_type_patterns: 'draggablenode',
                        tag: 'span',
                        attr: ''
                    },
                ],
                onDrop(file) {
                    return DragAndDropModule.utils.getFileDataUrl(file)
                    //.then(base64 => {...})
                    .then(response_from_server => response_from_server.url_of_resource);
                }
            },
            theme: 'snow'
        });

    </script>
	<script>
	    <% if (!ViewBag.ReadOnly){%>
	    //CKEDITOR.replace('EmailBody', {
	    //    extraPlugins: "tableresize,font,justify,lineheight",
	    //    //extraPlugins: 'colorbutton',
        //    //extraPlugins: 'colordialog',
	    //    height: 400
	    //});
	    <% } %>
	</script>

</asp:Content>